#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")

import main_builders

env.main_sources = []

env_main = env.Clone()

opts = Variables([], ARGUMENTS)
opts.Add(
    BoolVariable(
        "user_test",
        "Include the --user-test option. This option does nothing by default, so you can ignore this flag unless you plan to edit main/usertest/usertest.cpp.",
        False,
    )
)
opts.Update(env_main)

env_main.add_source_files(env.main_sources, "*.cpp")

if env["steamapi"] and env.editor_build:
    env_main.Append(CPPDEFINES=["STEAMAPI_ENABLED"])

if env["tests"]:
    env_main.Append(CPPDEFINES=["TESTS_ENABLED"])

if env_main["user_test"]:
    env_main.Append(CPPDEFINES=["GODOT_USER_TEST_ENABLED"])
    env_main.add_source_files(env.main_sources, "usertest/*.cpp")

env_main.CommandNoCache(
    "#main/splash.gen.h",
    "#main/splash.png",
    env.Run(main_builders.make_splash),
)

if env_main.editor_build and not env_main["no_editor_splash"]:
    env_main.CommandNoCache(
        "#main/splash_editor.gen.h",
        "#main/splash_editor.png",
        env.Run(main_builders.make_splash_editor),
    )

env_main.CommandNoCache(
    "#main/app_icon.gen.h",
    "#main/app_icon.png",
    env.Run(main_builders.make_app_icon),
)

lib = env_main.add_library("main", env.main_sources)
env.Prepend(LIBS=[lib])
