#!/usr/bin/env python
from misc.utility.scons_hints import *

from methods import print_error

Import("env")

# The HTTP server "targets". Run with "scons p=web serve", or "scons p=web run"
if "serve" in COMMAND_LINE_TARGETS or "run" in COMMAND_LINE_TARGETS:
    import os

    from serve import serve

    port = os.environ.get("GODOT_WEB_TEST_PORT", 8060)
    try:
        port = int(port)
    except Exception:
        print_error("GODOT_WEB_TEST_PORT must be a valid integer")
        sys.exit(255)
    serve(env.Dir(env.GetTemplateZipPath()).abspath, port, "run" in COMMAND_LINE_TARGETS)
    sys.exit(0)

web_files = [
    "audio_driver_web.cpp",
    "webmidi_driver.cpp",
    "display_server_web.cpp",
    "http_client_web.cpp",
    "javascript_bridge_singleton.cpp",
    "web_main.cpp",
    "ip_web.cpp",
    "net_socket_web.cpp",
    "os_web.cpp",
]

if env["target"] == "editor":
    env.add_source_files(web_files, "editor/*.cpp")

sys_env = env.Clone()
sys_env.AddJSLibraries(
    [
        "js/libs/library_godot_audio.js",
        "js/libs/library_godot_display.js",
        "js/libs/library_godot_emscripten.js",
        "js/libs/library_godot_fetch.js",
        "js/libs/library_godot_webmidi.js",
        "js/libs/library_godot_os.js",
        "js/libs/library_godot_runtime.js",
        "js/libs/library_godot_input.js",
        "js/libs/library_godot_webgl2.js",
    ]
)
sys_env.AddJSExterns(
    [
        "js/libs/library_godot_webgl2.externs.js",
    ]
)

sys_env.AddJSPost(
    [
        "js/patches/patch_em_gl.js",
    ]
)

if env["javascript_eval"]:
    sys_env.AddJSLibraries(["js/libs/library_godot_javascript_singleton.js"])

for lib in sys_env["JS_LIBS"]:
    sys_env.Append(LINKFLAGS=["--js-library", lib.abspath])
for js in sys_env["JS_PRE"]:
    sys_env.Append(LINKFLAGS=["--pre-js", js.abspath])
for js in sys_env["JS_POST"]:
    sys_env.Append(LINKFLAGS=["--post-js", js.abspath])

# Add JS externs to Closure.
sys_env["ENV"]["EMCC_CLOSURE_ARGS"] = sys_env["ENV"].get("EMCC_CLOSURE_ARGS", "")
for ext in sys_env["JS_EXTERNS"]:
    sys_env["ENV"]["EMCC_CLOSURE_ARGS"] += " --externs " + ext.abspath
sys_env["ENV"]["EMCC_CLOSURE_ARGS"] = sys_env["ENV"]["EMCC_CLOSURE_ARGS"].strip()

if len(env["EXPORTED_FUNCTIONS"]):
    sys_env.Append(LINKFLAGS=["-sEXPORTED_FUNCTIONS=" + repr(sorted(list(set(env["EXPORTED_FUNCTIONS"]))))])
if len(env["EXPORTED_RUNTIME_METHODS"]):
    sys_env.Append(LINKFLAGS=["-sEXPORTED_RUNTIME_METHODS=" + repr(sorted(list(set(env["EXPORTED_RUNTIME_METHODS"]))))])

# We use IDBFS. Since Emscripten 1.39.1 it needs to be linked explicitly.
sys_env.Append(LIBS=["idbfs.js"])

# Actually build the program.
main_js_file = sys_env.File("#bin/godot${PROGSUFFIX}.js")
main_wasm_file = sys_env.File("#bin/godot${PROGSUFFIX}.wasm")
side_wasm_file = None
main_wasm_dwarf_file = None
main_wasm_dwarf_package_file = None
side_wasm_dwarf_file = None
side_wasm_dwarf_package_file = None

build = []
build_targets = [main_js_file, main_wasm_file]


def separate_debug_symbols(target_env, wasm_file):
    wasm_dwarf_file = target_env.File(f"{str(wasm_file).removesuffix('.wasm')}.dwarf.wasm")
    target_env.Append(LINKFLAGS=[f"-gseparate-dwarf={wasm_dwarf_file}"])
    target_env.Append(CCFLAGS=["-gsplit-dwarf"])
    target_env.Append(LINKFLAGS=["-gsplit-dwarf"])
    target_env.Append(LINKFLAGS=[f"-sSEPARATE_DWARF_URL=./{wasm_dwarf_file.name}"])
    wasm_dwarf_package_file = target_env.File(f"{wasm_dwarf_file}.dwp")
    target_env.Command(
        action=f"{env.Detect('emdwp')} -e {wasm_dwarf_file} -o {wasm_dwarf_package_file}",
        target=wasm_dwarf_package_file,
        source=wasm_dwarf_file,
    )
    return wasm_dwarf_file, wasm_dwarf_package_file


if env["debug_symbols"] and env["separate_debug_symbols"]:
    main_wasm_dwarf_file, main_wasm_dwarf_package_file = separate_debug_symbols(sys_env, main_wasm_file)
    build_targets.append(main_wasm_dwarf_file)

if env["dlink_enabled"]:
    # Reset libraries. The main runtime will only link emscripten libraries, not godot ones.
    sys_env["LIBS"] = []
    # Configure it as a main module (dynamic linking support).
    sys_env["CCFLAGS"].remove("-sSIDE_MODULE=2")
    sys_env["LINKFLAGS"].remove("-sSIDE_MODULE=2")
    sys_env.Append(CCFLAGS=["-s", "MAIN_MODULE=1"])
    sys_env.Append(LINKFLAGS=["-s", "MAIN_MODULE=1"])
    sys_env.Append(LINKFLAGS=["-s", "EXPORT_ALL=1"])
    sys_env.Append(LINKFLAGS=["-s", "WARN_ON_UNDEFINED_SYMBOLS=0"])
    sys_env["CCFLAGS"].remove("-fvisibility=hidden")
    sys_env["LINKFLAGS"].remove("-fvisibility=hidden")

    # The main emscripten runtime, with exported standard libraries.
    sys = sys_env.add_program(build_targets, ["web_runtime.cpp"])

    # The side library, containing all Godot code.
    side_wasm_file = env.File("#bin/godot.side${PROGSUFFIX}.wasm")
    side_wasm_build = [side_wasm_file]
    if env["debug_symbols"] and env["separate_debug_symbols"]:
        side_wasm_dwarf_file, side_wasm_dwarf_package_file = separate_debug_symbols(env, side_wasm_file)
        side_wasm_build.append(side_wasm_dwarf_file)
    wasm = env.add_program(side_wasm_build, web_files)
    build = sys + [wasm[0]]
else:
    build = sys_env.add_program(build_targets, web_files + ["web_runtime.cpp"])

sys_env.Depends(build[0], sys_env["JS_LIBS"])
sys_env.Depends(build[0], sys_env["JS_PRE"])
sys_env.Depends(build[0], sys_env["JS_POST"])
sys_env.Depends(build[0], sys_env["JS_EXTERNS"])

engine = [
    "js/engine/features.js",
    "js/engine/preloader.js",
    "js/engine/config.js",
    "js/engine/engine.js",
]
externs = [env.File("#platform/web/js/engine/engine.externs.js")]
js_engine = env.CreateEngineFile("#bin/godot${PROGSUFFIX}.engine.js", engine, externs, env["threads"])
env.Depends(js_engine, externs)

wrap_list = [
    build[0],
    js_engine,
]
js_wrapped = env.NoCache(
    env.Textfile("#bin/godot", [env.File(f) for f in wrap_list], TEXTFILESUFFIX="${PROGSUFFIX}.wrapped.js")
)

env.CreateTemplateZip(
    js=js_wrapped,
    main_wasm=main_wasm_file,
    side_wasm=side_wasm_file,
    main_wasm_dwarf=main_wasm_dwarf_file,
    main_wasm_dwarf_package=main_wasm_dwarf_package_file,
    side_wasm_dwarf=side_wasm_dwarf_file,
    side_wasm_dwarf_package=side_wasm_dwarf_package_file,
)
