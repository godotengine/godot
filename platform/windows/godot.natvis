<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="Vector&lt;*&gt;">
		<Expand>
			<Item Name="[size]">_cowdata._ptr ? (((const unsigned long long *)(_cowdata._ptr))[-1]) : 0</Item>
			<ArrayItems>
				<Size>_cowdata._ptr ? (((const unsigned long long *)(_cowdata._ptr))[-1]) : 0</Size>
				<ValuePointer>($T1 *) _cowdata._ptr</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="Array">
		<Expand>
			<Item Name="[size]">_p->array._cowdata._ptr ? (((const unsigned long long *)(_p->array._cowdata._ptr))[-1]) : 0</Item>
			<ArrayItems>
				<Size>_p->array._cowdata._ptr ? (((const unsigned long long *)(_p->array._cowdata._ptr))[-1]) : 0</Size>
				<ValuePointer>(Variant *) _p->array._cowdata._ptr</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="TypedArray&lt;*&gt;">
		<Expand>
			<Item Name="[size]"> _p->array._cowdata._ptr ? (((const unsigned long long *)(_p->array._cowdata._ptr))[-1]) : 0</Item>
			<ArrayItems>
				<Size>_p->array._cowdata._ptr ? (((const unsigned long long *)(_p->array._cowdata._ptr))[-1]) : 0</Size>
				<ValuePointer >(Variant *) _p->array._cowdata._ptr</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="Dictionary">
		<Expand>
			<Item Name="[size]">_p &amp;&amp; _p->variant_map.head_element ? _p->variant_map.num_elements : 0</Item>
			<LinkedListItems>
				<Size>_p &amp;&amp; _p->variant_map.head_element ? _p->variant_map.num_elements : 0</Size>
				<HeadPointer>_p ? _p->variant_map.head_element : nullptr</HeadPointer>
				<NextPointer>next</NextPointer>
				<ValueNode Name="[{data.key}]">(*this),view(MapHelper)</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<Type Name="LocalVector&lt;*&gt;">
		<Expand>
			<Item Name="[size]">count</Item>
			<ArrayItems>
				<Size>count</Size>
				<ValuePointer>data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="List&lt;*&gt;">
		<Expand>
			<Item Name="[size]">_data ? (_data->size_cache) : 0</Item>
			<LinkedListItems>
				<Size>_data ? (_data->size_cache) : 0</Size>
				<HeadPointer>_data->first</HeadPointer>
				<NextPointer>next_ptr</NextPointer>
				<ValueNode>value</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<Type Name="NodePath">
		<DisplayString Condition="!data">[empty]</DisplayString>
		<DisplayString Condition="!!data">{{[absolute] = {data->absolute} [path] = {data->path,view(NodePathHelper)} [subpath] = {data->subpath,view(NodePathHelper)}}}</DisplayString>
		<Expand>
			<Item Name="[path]">data->path,view(NodePathHelper)</Item>
			<Item Name="[subpath]">data->subpath,view(NodePathHelper)</Item>
			<Item Name="[absolute]">data->absolute</Item>
		</Expand>
	</Type>

	<Type Name="Vector&lt;StringName&gt;" IncludeView="NodePathHelper">
		<Expand>
			<ArrayItems>
				<Size>_cowdata._ptr ? (((const unsigned long long *)(_cowdata._ptr))[-1]) : 0</Size>
				<ValuePointer>((StringName *)_cowdata._ptr),view(NodePathHelper)</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="StringName" IncludeView="NodePathHelper">
		<DisplayString Condition="_data &amp;&amp; _data->cname">{_data->cname,s8b}</DisplayString>
		<DisplayString Condition="_data &amp;&amp; !_data->cname">{_data->name,s32b}</DisplayString>
		<DisplayString Condition="!_data">[empty]</DisplayString>
		<StringView Condition="_data &amp;&amp; _data->cname">_data->cname,s8b</StringView>
		<StringView Condition="_data &amp;&amp; !_data->cname">_data->name,s32b</StringView>
	</Type>

	<Type Name="HashMapElement&lt;*,*&gt;">
		<DisplayString>{{Key = {($T1 *) &amp;data.key}  Value = {($T2 *) &amp;data.value}}}</DisplayString>
		<Expand>
			<Item Name="[key]">($T1 *) &amp;data.key</Item>
			<Item Name="[value]">($T2 *) &amp;data.value</Item>
		</Expand>
	</Type>

	<!-- elements displayed by index -->
	<Type Name="HashMap&lt;*,*,*,*,*&gt;" Priority="Medium">
		<Expand>
			<Item Name="[size]">head_element ? num_elements : 0</Item>
			<LinkedListItems>
				<Size>head_element ? num_elements : 0</Size>
				<HeadPointer>head_element</HeadPointer>
				<NextPointer>next</NextPointer>
				<ValueNode>(*this)</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<!-- elements by key:value -->
	<!-- show elements by index by specifying "ShowElementsByIndex"-->
	<Type Name="HashMap&lt;*,*,*,*,*&gt;" ExcludeView="ShowElementsByIndex" Priority="MediumHigh">
		<Expand>
			<Item Name="[size]">head_element ? num_elements : 0</Item>
			<LinkedListItems>
				<Size>head_element ? num_elements : 0</Size>
				<HeadPointer>head_element</HeadPointer>
				<NextPointer>next</NextPointer>
				<ValueNode Name="[{data.key}]">(*this),view(MapHelper)</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<Type Name="KeyValue&lt;*,*&gt;" IncludeView="MapHelper">
		<DisplayString>{value}</DisplayString>
	</Type>

	<Type Name="HashMapElement&lt;*,*&gt;" IncludeView="MapHelper">
		<DisplayString>{data.value}</DisplayString>
		<Expand>
			<Item Name="[key]"  >($T1 *) &amp;data.key</Item>
			<Item Name="[value]">($T2 *) &amp;data.value</Item>
		</Expand>
	</Type>

	<Type Name="VMap&lt;*,*&gt;">
		<Expand>
			<Item Condition="_cowdata._ptr" Name="[size]">*(reinterpret_cast&lt;long long*&gt;(_cowdata._ptr) - 1)</Item>
			<ArrayItems Condition="_cowdata._ptr">
				<Size>*(reinterpret_cast&lt;long long*&gt;(_cowdata._ptr) - 1)</Size>
				<ValuePointer>reinterpret_cast&lt;VMap&lt;$T1,$T2&gt;::Pair*&gt;(_cowdata._ptr)</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="VMap&lt;Callable,*&gt;::Pair">
		<DisplayString Condition="dynamic_cast&lt;CallableCustomMethodPointerBase*&gt;(key.custom)">{dynamic_cast&lt;CallableCustomMethodPointerBase*&gt;(key.custom)->text}</DisplayString>
	</Type>


	<Type Name="Variant">
		<DisplayString Condition="type == Variant::NIL">nil</DisplayString>
		<DisplayString Condition="type == Variant::BOOL">{_data._bool}</DisplayString>
		<DisplayString Condition="type == Variant::INT">{_data._int}</DisplayString>
		<DisplayString Condition="type == Variant::FLOAT">{_data._float}</DisplayString>
		<DisplayString Condition="type == Variant::TRANSFORM2D">{_data._transform2d}</DisplayString>
		<DisplayString Condition="type == Variant::AABB">{_data._aabb}</DisplayString>
		<DisplayString Condition="type == Variant::BASIS">{_data._basis}</DisplayString>
		<DisplayString Condition="type == Variant::TRANSFORM3D">{_data._transform3d}</DisplayString>
		<DisplayString Condition="type == Variant::PROJECTION">{_data._projection}</DisplayString>
		<DisplayString Condition="type == Variant::STRING">{*(String *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::VECTOR2">{*(Vector2 *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::RECT2">{*(Rect2 *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::VECTOR3">{*(Vector3 *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::VECTOR4">{*(Vector4 *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PLANE">{*(Plane *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::QUATERNION">{*(Quaternion *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::COLOR">{*(Color *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::STRING_NAME">{*(StringName *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::NODE_PATH">{*(NodePath *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::RID">{*(::RID *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::OBJECT">{*(*reinterpret_cast&lt;ObjData*&gt;(&amp;_data._mem[0])).obj}</DisplayString>
		<DisplayString Condition="type == Variant::DICTIONARY">{*(Dictionary *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::ARRAY">{*(Array *)_data._mem}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_BYTE_ARRAY">{reinterpret_cast&lt;const Variant::PackedArrayRef&lt;unsigned char&gt;*&gt;(_data.packed_array)->array}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_INT32_ARRAY">{reinterpret_cast&lt;const Variant::PackedArrayRef&lt;int&gt;*&gt;(_data.packed_array)->array}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_INT64_ARRAY">{*reinterpret_cast&lt;PackedInt64Array *&gt;(&amp;_data.packed_array[1])}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_FLOAT32_ARRAY">{reinterpret_cast&lt;const Variant::PackedArrayRef&lt;float&gt;*&gt;(_data.packed_array)->array}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_FLOAT64_ARRAY">{reinterpret_cast&lt;const Variant::PackedArrayRef&lt;double&gt;*&gt;(_data.packed_array)->array}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_STRING_ARRAY">{reinterpret_cast&lt;const Variant::PackedArrayRef&lt;String&gt;*&gt;(_data.packed_array)->array}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_VECTOR2_ARRAY">{reinterpret_cast&lt;const Variant::PackedArrayRef&lt;Vector2&gt;*&gt;(_data.packed_array)->array}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_VECTOR3_ARRAY">{reinterpret_cast&lt;const Variant::PackedArrayRef&lt;Vector3&gt;*&gt;(_data.packed_array)->array}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_COLOR_ARRAY">{reinterpret_cast&lt;const Variant::PackedArrayRef&lt;Color&gt;*&gt;(_data.packed_array)->array}</DisplayString>
		<DisplayString Condition="type == Variant::PACKED_VECTOR4_ARRAY">{reinterpret_cast&lt;const Variant::PackedArrayRef&lt;Vector4&gt;*&gt;(_data.packed_array)->array}</DisplayString>
		<DisplayString Condition="type &lt; 0 || type >= Variant::VARIANT_MAX">[INVALID]</DisplayString>

		<StringView Condition="type == Variant::STRING &amp;&amp; ((String *)(_data._mem))->_cowdata._ptr">((String *)(_data._mem))->_cowdata._ptr,s32</StringView>

		<Expand>
			<Item Name="[value]" Condition="type == Variant::BOOL">_data._bool</Item>
			<Item Name="[value]" Condition="type == Variant::INT">_data._int</Item>
			<Item Name="[value]" Condition="type == Variant::FLOAT">_data._float</Item>
			<Item Name="[value]" Condition="type == Variant::TRANSFORM2D">_data._transform2d</Item>
			<Item Name="[value]" Condition="type == Variant::AABB">_data._aabb</Item>
			<Item Name="[value]" Condition="type == Variant::BASIS">_data._basis</Item>
			<Item Name="[value]" Condition="type == Variant::TRANSFORM3D">_data._transform3d</Item>
			<Item Name="[value]" Condition="type == Variant::STRING">*(String *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::VECTOR2">*(Vector2 *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::RECT2">*(Rect2 *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::VECTOR3">*(Vector3 *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PLANE">*(Plane *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::QUATERNION">*(Quaternion *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::COLOR">*(Color *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::STRING_NAME">*(StringName *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::NODE_PATH">*(NodePath *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::RID">*(::RID *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::OBJECT">*(*reinterpret_cast&lt;ObjData*&gt;(&amp;_data._mem[0])).obj</Item>
			<Item Name="[value]" Condition="type == Variant::DICTIONARY">*(Dictionary *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::ARRAY">*(Array *)_data._mem</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_BYTE_ARRAY">reinterpret_cast&lt;const Variant::PackedArrayRef&lt;unsigned char&gt;*&gt;(_data.packed_array)->array</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_INT32_ARRAY">reinterpret_cast&lt;const Variant::PackedArrayRef&lt;int&gt;*&gt;(_data.packed_array)->array</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_INT64_ARRAY">*reinterpret_cast&lt;PackedInt64Array *&gt;(&amp;_data.packed_array[1])</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_FLOAT32_ARRAY">reinterpret_cast&lt;const Variant::PackedArrayRef&lt;float&gt;*&gt;(_data.packed_array)->array</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_FLOAT64_ARRAY">reinterpret_cast&lt;const Variant::PackedArrayRef&lt;double&gt;*&gt;(_data.packed_array)->array</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_STRING_ARRAY">reinterpret_cast&lt;const Variant::PackedArrayRef&lt;String&gt;*&gt;(_data.packed_array)->array</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_VECTOR2_ARRAY">reinterpret_cast&lt;const Variant::PackedArrayRef&lt;Vector2&gt;*&gt;(_data.packed_array)->array</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_VECTOR3_ARRAY">reinterpret_cast&lt;const Variant::PackedArrayRef&lt;Vector3&gt;*&gt;(_data.packed_array)->array</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_COLOR_ARRAY">reinterpret_cast&lt;const Variant::PackedArrayRef&lt;Color&gt;*&gt;(_data.packed_array)->array</Item>
			<Item Name="[value]" Condition="type == Variant::PACKED_VECTOR4_ARRAY">reinterpret_cast&lt;const Variant::PackedArrayRef&lt;Vector4&gt;*&gt;(_data.packed_array)->array</Item>

		</Expand>
	</Type>

	<Type Name="String">
		<DisplayString Condition="_cowdata._ptr == 0">[empty]</DisplayString>
		<DisplayString Condition="_cowdata._ptr != 0">{_cowdata._ptr,s32}</DisplayString>
		<StringView Condition="_cowdata._ptr != 0">_cowdata._ptr,s32</StringView>
	</Type>

	<Type Name="godot::String">
		<DisplayString>{*reinterpret_cast&lt;void**&gt;(opaque),s32}</DisplayString>
		<Expand>
			<Item Name="opaque_ptr">*reinterpret_cast&lt;void**&gt;(opaque)</Item>
			<Item Name="string">*reinterpret_cast&lt;void**&gt;(opaque),s32</Item>
		</Expand>
	</Type>

	<Type Name="StringName">
		<DisplayString Condition="_data &amp;&amp; _data->cname">{_data->cname,na}</DisplayString>
		<DisplayString Condition="_data &amp;&amp; !_data->cname">{_data->name,s32}</DisplayString>
		<DisplayString Condition="!_data">[empty]</DisplayString>
		<StringView Condition="_data &amp;&amp; _data->cname">_data->cname,na</StringView>
		<StringView Condition="_data &amp;&amp; !_data->cname">_data->name,s32</StringView>
	</Type>

	<!-- can't cast the opaque to ::StringName because Natvis does not support global namespace specifier? -->
	<Type Name="godot::StringName">
		<DisplayString Condition="(*reinterpret_cast&lt;const char***&gt;(opaque))[1]">{(*reinterpret_cast&lt;const char***&gt;(opaque))[1],s8}</DisplayString>
		<DisplayString Condition="!(*reinterpret_cast&lt;const char***&gt;(opaque))[1]">{(*reinterpret_cast&lt;const char***&gt;(opaque))[2],s32}</DisplayString>
		<Expand>
			<Item Name="opaque_ptr">*reinterpret_cast&lt;void**&gt;(opaque)</Item>
			<Item Name="&amp;cname">(*reinterpret_cast&lt;const char***&gt;(opaque))+1</Item>
			<Item Name="cname">(*reinterpret_cast&lt;const char***&gt;(opaque))[1],s8</Item>
		</Expand>
	</Type>

	<Type Name="Object::SignalData">
		<DisplayString Condition="user.name._cowdata._ptr">"{user.name}" {slot_map}</DisplayString>
		<DisplayString Condition="!user.name._cowdata._ptr">"{slot_map}</DisplayString>
	</Type>

	<Type Name="Vector2">
		<DisplayString>{{{x},{y}}}</DisplayString>
		<Expand>
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
		</Expand>
	</Type>

	<Type Name="Vector3">
		<DisplayString>{{{x},{y},{z}}}</DisplayString>
		<Expand>
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
			<Item Name="z">z</Item>
		</Expand>
	</Type>

	<Type Name="Quaternion">
		<DisplayString>Quaternion {{{x},{y},{z},{w}}}</DisplayString>
		<Expand>
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
			<Item Name="z">z</Item>
			<Item Name="w">w</Item>
		</Expand>
	</Type>

	<Type Name="Color">
		<DisplayString>Color {{{r},{g},{b},{a}}}</DisplayString>
		<Expand>
			<Item Name="red">r</Item>
			<Item Name="green">g</Item>
			<Item Name="blue">b</Item>
			<Item Name="alpha">a</Item>
		</Expand>
	</Type>
</AutoVisualizer>
