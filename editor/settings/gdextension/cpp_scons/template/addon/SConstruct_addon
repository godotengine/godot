#!/usr/bin/env python

# This file is for building as a Godot GDExtension.
ARGUMENTS.setdefault("precision", "double")
env = SConscript("src/godot-cpp/SConstruct")

# Add source files.
env.Append(CPPPATH=["src/", "__UPDIR_DOTS__/"])
sources = Glob("src/*.cpp") + Glob("__UPDIR_DOTS__/*.cpp")

env.Append(CPPDEFINES=["GDEXTENSION"])

bin_path = "bin/"
extension_name = "__LIBRARY_NAME__"
debug_or_release = "release" if env["target"] == "template_release" else "debug"

if not "arch_suffix" in env:
    env["arch_suffix"] = env["arch"]

if env["target"] in ["editor", "template_debug"]:
    # GDExtension has editor classes available in debug templates, which allows editor code to compile.
    # If you don't want to compile editor stuff in templates, move these 2 lines to a separate "if" block.
    env.Append(CPPPATH=["__UPDIR_DOTS__/editor/"])
    sources += Glob("__UPDIR_DOTS__/editor/*.cpp")
    # Add documentation XML files as a generated cpp file. Only works in Godot 4.3+.
    doc_data = env.GodotCPPDocData("src/gen/doc_data.gen.cpp", source=Glob("doc_classes/*.xml"))
    sources.append(doc_data)

# Create the library target (e.g. lib__LIBRARY_NAME__.linux.debug.x86_64.so).
if env["platform"] == "macos":
    library = env.SharedLibrary(
        "{0}/lib{1}.{2}.{3}.framework/{1}.{2}.{3}".format(
            bin_path,
            extension_name,
            env["platform"],
            debug_or_release,
        ),
        source=sources,
    )
else:
    library = env.SharedLibrary(
        "{}/{}{}.{}.{}.{}{}".format(
            bin_path,
            env.subst('$SHLIBPREFIX'),
            extension_name,
            env["platform"],
            debug_or_release,
            env["arch_suffix"],
            env["SHLIBSUFFIX"],
        ),
        source=sources,
    )

Default(library)
