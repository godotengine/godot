<?xml version="1.0" encoding="UTF-8" ?>
<class name="PhysicsDirectBodyState3D" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Provides direct access to a physics body in the [PhysicsServer3D].
	</brief_description>
	<description>
		Provides direct access to a physics body in the [PhysicsServer3D], allowing safe changes to physics properties. This object is passed via the direct state callback of [RigidBody3D], and is intended for changing the direct state of that body. See [method RigidBody3D._integrate_forces].
	</description>
	<tutorials>
		<link title="Physics introduction">$DOCS_URL/tutorials/physics/physics_introduction.html</link>
		<link title="Ray-casting">$DOCS_URL/tutorials/physics/ray-casting.html</link>
	</tutorials>
	<methods>
		<method name="add_constant_central_force">
			<return type="void" />
			<param index="0" name="force" type="Vector3" default="Vector3(0, 0, 0)" />
			<description>
				Adds a constant directional force without affecting rotation that keeps being applied over time until cleared with [code]constant_force = Vector3(0, 0, 0)[/code].
				This is equivalent to using [method add_constant_force] at the body's center of mass.
			</description>
		</method>
		<method name="add_constant_force">
			<return type="void" />
			<param index="0" name="force" type="Vector3" />
			<param index="1" name="position" type="Vector3" default="Vector3(0, 0, 0)" />
			<description>
				Adds a constant positioned force to the body that keeps being applied over time until cleared with [code]constant_force = Vector3(0, 0, 0)[/code].
				[param position] is the offset from the body origin in global coordinates.
			</description>
		</method>
		<method name="add_constant_torque">
			<return type="void" />
			<param index="0" name="torque" type="Vector3" />
			<description>
				Adds a constant rotational force without affecting position that keeps being applied over time until cleared with [code]constant_torque = Vector3(0, 0, 0)[/code].
			</description>
		</method>
		<method name="apply_central_force">
			<return type="void" />
			<param index="0" name="force" type="Vector3" default="Vector3(0, 0, 0)" />
			<description>
				Applies a directional force without affecting rotation. A force is time dependent and meant to be applied every physics update.
				This is equivalent to using [method apply_force] at the body's center of mass.
			</description>
		</method>
		<method name="apply_central_impulse">
			<return type="void" />
			<param index="0" name="impulse" type="Vector3" default="Vector3(0, 0, 0)" />
			<description>
				Applies a directional impulse without affecting rotation.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				This is equivalent to using [method apply_impulse] at the body's center of mass.
			</description>
		</method>
		<method name="apply_force">
			<return type="void" />
			<param index="0" name="force" type="Vector3" />
			<param index="1" name="position" type="Vector3" default="Vector3(0, 0, 0)" />
			<description>
				Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update.
				[param position] is the offset from the body origin in global coordinates.
			</description>
		</method>
		<method name="apply_impulse">
			<return type="void" />
			<param index="0" name="impulse" type="Vector3" />
			<param index="1" name="position" type="Vector3" default="Vector3(0, 0, 0)" />
			<description>
				Applies a positioned impulse to the body.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				[param position] is the offset from the body origin in global coordinates.
			</description>
		</method>
		<method name="apply_torque">
			<return type="void" />
			<param index="0" name="torque" type="Vector3" />
			<description>
				Applies a rotational force without affecting position. A force is time dependent and meant to be applied every physics update.
				[b]Note:[/b] [member inverse_inertia] is required for this to work. To have [member inverse_inertia], an active [CollisionShape3D] must be a child of the node, or you can manually set [member inverse_inertia].
			</description>
		</method>
		<method name="apply_torque_impulse">
			<return type="void" />
			<param index="0" name="impulse" type="Vector3" />
			<description>
				Applies a rotational impulse to the body without affecting the position.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				[b]Note:[/b] [member inverse_inertia] is required for this to work. To have [member inverse_inertia], an active [CollisionShape3D] must be a child of the node, or you can manually set [member inverse_inertia].
			</description>
		</method>
		<method name="get_constant_force" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the body's total constant positional forces applied during each physics update.
				See [method add_constant_force] and [method add_constant_central_force].
			</description>
		</method>
		<method name="get_constant_torque" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the body's total constant rotational forces applied during each physics update.
				See [method add_constant_torque].
			</description>
		</method>
		<method name="get_contact_collider" qualifiers="const">
			<return type="RID" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Returns the collider's [RID].
			</description>
		</method>
		<method name="get_contact_collider_id" qualifiers="const">
			<return type="int" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Returns the collider's object id.
			</description>
		</method>
		<method name="get_contact_collider_object" qualifiers="const">
			<return type="Object" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Returns the collider object.
			</description>
		</method>
		<method name="get_contact_collider_position" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Returns the position of the contact point on the collider in the global coordinate system.
			</description>
		</method>
		<method name="get_contact_collider_shape" qualifiers="const">
			<return type="int" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Returns the collider's shape index.
			</description>
		</method>
		<method name="get_contact_collider_velocity_at_position" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Returns the linear velocity vector at the collider's contact point.
			</description>
		</method>
		<method name="get_contact_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of contacts this body has with other bodies.
				[b]Note:[/b] By default, this returns 0 unless bodies are configured to monitor contacts. See [member RigidBody3D.contact_monitor].
			</description>
		</method>
		<method name="get_contact_impulse" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Impulse created by the contact.
			</description>
		</method>
		<method name="get_contact_local_normal" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Returns the local normal at the contact point.
			</description>
		</method>
		<method name="get_contact_local_position" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Returns the position of the contact point on the body in the global coordinate system.
			</description>
		</method>
		<method name="get_contact_local_shape" qualifiers="const">
			<return type="int" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Returns the local shape index of the collision.
			</description>
		</method>
		<method name="get_contact_local_velocity_at_position" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="contact_idx" type="int" />
			<description>
				Returns the linear velocity vector at the body's contact point.
			</description>
		</method>
		<method name="get_space_state">
			<return type="PhysicsDirectSpaceState3D" />
			<description>
				Returns the current state of the space, useful for queries.
			</description>
		</method>
		<method name="get_velocity_at_local_position" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="local_position" type="Vector3" />
			<description>
				Returns the body's velocity at the given relative position, including both translation and rotation.
			</description>
		</method>
		<method name="integrate_forces">
			<return type="void" />
			<description>
				Updates the body's linear and angular velocity by applying gravity and damping for the equivalent of one physics tick.
			</description>
		</method>
		<method name="set_constant_force">
			<return type="void" />
			<param index="0" name="force" type="Vector3" />
			<description>
				Sets the body's total constant positional forces applied during each physics update.
				See [method add_constant_force] and [method add_constant_central_force].
			</description>
		</method>
		<method name="set_constant_torque">
			<return type="void" />
			<param index="0" name="torque" type="Vector3" />
			<description>
				Sets the body's total constant rotational forces applied during each physics update.
				See [method add_constant_torque].
			</description>
		</method>
	</methods>
	<members>
		<member name="angular_velocity" type="Vector3" setter="set_angular_velocity" getter="get_angular_velocity">
			The body's rotational velocity in [i]radians[/i] per second.
		</member>
		<member name="center_of_mass" type="Vector3" setter="" getter="get_center_of_mass">
			The body's center of mass position relative to the body's center in the global coordinate system.
		</member>
		<member name="center_of_mass_local" type="Vector3" setter="" getter="get_center_of_mass_local">
			The body's center of mass position in the body's local coordinate system.
		</member>
		<member name="inverse_inertia" type="Vector3" setter="" getter="get_inverse_inertia">
			The inverse of the inertia of the body.
		</member>
		<member name="inverse_inertia_tensor" type="Basis" setter="" getter="get_inverse_inertia_tensor">
			The inverse of the inertia tensor of the body.
		</member>
		<member name="inverse_mass" type="float" setter="" getter="get_inverse_mass">
			The inverse of the mass of the body.
		</member>
		<member name="linear_velocity" type="Vector3" setter="set_linear_velocity" getter="get_linear_velocity">
			The body's linear velocity in units per second.
		</member>
		<member name="principal_inertia_axes" type="Basis" setter="" getter="get_principal_inertia_axes">
		</member>
		<member name="sleeping" type="bool" setter="set_sleep_state" getter="is_sleeping">
			If [code]true[/code], this body is currently sleeping (not active).
		</member>
		<member name="step" type="float" setter="" getter="get_step">
			The timestep (delta) used for the simulation.
		</member>
		<member name="total_angular_damp" type="float" setter="" getter="get_total_angular_damp">
			The rate at which the body stops rotating, if there are not any other forces moving it.
		</member>
		<member name="total_gravity" type="Vector3" setter="" getter="get_total_gravity">
			The total gravity vector being currently applied to this body.
		</member>
		<member name="total_linear_damp" type="float" setter="" getter="get_total_linear_damp">
			The rate at which the body stops moving, if there are not any other forces moving it.
		</member>
		<member name="transform" type="Transform3D" setter="set_transform" getter="get_transform">
			The body's transformation matrix.
		</member>
	</members>
</class>
