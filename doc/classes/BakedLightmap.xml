<?xml version="1.0" encoding="UTF-8" ?>
<class name="BakedLightmap" inherits="VisualInstance" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Prerendered indirect light map for a scene.
	</brief_description>
	<description>
		Baked lightmaps are an alternative workflow for adding indirect (or baked) lighting to a scene. Unlike the [GIProbe] approach, baked lightmaps work fine on low-end PCs and mobile devices as they consume almost no resources in run-time.
		[b]Procedural generation:[/b] Lightmap baking functionality is only available in the editor. This means [BakedLightmap] is not suited to procedurally generated or user-built levels. For procedurally generated or user-built levels, use [GIProbe] instead.
		[b]Note:[/b] Due to how lightmaps work, most properties only have a visible effect once lightmaps are baked again.
		[b]Bake modes:[/b] In the editor, after selecting a [BakedLightmap] node, you can choose between performing a [b]Preview Bake[/b] or a "final" bake using the [b]Bake Lightmaps[/b] button. Preview bakes use lower quality settings but are significantly faster to bake (run-time performance is identical). Using preview bakes during development allows you to iterate on your 3D scene's lighting faster. You can change the preview bake quality settings by adjusting the [ProjectSettings]' [code]rendering/cpu_lightmapper/*[/code] properties.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/3d/baked_lightmaps.html</link>
	</tutorials>
	<methods>
		<method name="bake">
			<return type="int" enum="BakedLightmap.BakeError" />
			<argument index="0" name="from_node" type="Node" default="null" />
			<argument index="1" name="data_save_path" type="String" default="&quot;&quot;" />
			<argument index="2" name="preview" type="bool" default="false" />
			<description>
				Bakes the lightmap, scanning from the given [code]from_node[/code] root and saves the resulting [BakedLightmapData] in [code]data_save_path[/code]. If no root node is provided, parent of this node will be used as root instead. If no save path is provided, it will try to match the path from the current [member light_data].
				If [code]preview[/code] is [code]true[/code], performs a preview bake which uses low-quality settings defined in [ProjectSettings] but is faster to bake.
				[b]Note:[/b] Only effective when called from editor builds, as Godot doesn't support baking lightmaps at run-time.
			</description>
		</method>
	</methods>
	<members>
		<member name="atlas_generate" type="bool" setter="set_generate_atlas" getter="is_generate_atlas_enabled" default="true">
			If [code]true[/code], the lightmapper will merge the textures for all meshes into one or several large layered textures. If [code]false[/code], every mesh will get its own lightmap texture, which is less efficient.
			[b]Note:[/b] Atlas lightmap rendering is only supported in GLES3, [i]not[/i] GLES2. Non-atlas lightmap rendering is supported by both GLES3 and GLES2. If [member ProjectSettings.rendering/quality/driver/fallback_to_gles2] is [code]true[/code], consider baking lightmaps with [member atlas_generate] set to [code]false[/code] so that the resulting lightmap is visible in both GLES3 and GLES2.
		</member>
		<member name="atlas_max_size" type="int" setter="set_max_atlas_size" getter="get_max_atlas_size" default="4096">
			Maximum size of each lightmap layer, only used when [member atlas_generate] is enabled.
		</member>
		<member name="bias" type="float" setter="set_bias" getter="get_bias" default="0.005">
			Raycasting bias used during baking to avoid floating point precision issues.
		</member>
		<member name="bounce_indirect_energy" type="float" setter="set_bounce_indirect_energy" getter="get_bounce_indirect_energy" default="1.0">
			The energy multiplier for each bounce. Higher values will make indirect lighting brighter. A value of [code]1.0[/code] represents physically accurate behavior, but higher values can be used to make indirect lighting propagate more visibly when using a low number of bounces. This can be used to speed up bake times by lowering the number of [member bounces] then increasing [member bounce_indirect_energy]. Unlike [member BakedLightmapData.energy], this property does not affect direct lighting emitted by light nodes, emissive materials and the environment.
			[b]Note:[/b] [member bounce_indirect_energy] only has an effect if [member bounces] is set to a value greater than or equal to [code]1[/code].
		</member>
		<member name="bounces" type="int" setter="set_bounces" getter="get_bounces" default="3">
			Number of light bounces that are taken into account during baking. See also [member bounce_indirect_energy]. When using Preview Bake, this value will be overridden if [member ProjectSettings.rendering/cpu_lightmapper/preview_bake/max_bounces] is lower than [member bounces].
		</member>
		<member name="capture_cell_size" type="float" setter="set_capture_cell_size" getter="get_capture_cell_size" default="0.5">
			Grid size used for real-time capture information on dynamic objects.
		</member>
		<member name="capture_enabled" type="bool" setter="set_capture_enabled" getter="get_capture_enabled" default="true">
			If [code]true[/code], an octree containing the scene's lighting information will be computed. This octree will then be used to light dynamic objects in the scene. If [code]true[/code], when using Preview Bake, this value will be overridden by [member ProjectSettings.rendering/cpu_lightmapper/preview_bake/allow_capture].
		</member>
		<member name="capture_propagation" type="float" setter="set_capture_propagation" getter="get_capture_propagation" default="1.0">
			Bias value to reduce the amount of light propagation in the captured octree.
		</member>
		<member name="capture_quality" type="int" setter="set_capture_quality" getter="get_capture_quality" enum="BakedLightmap.BakeQuality" default="1">
			Bake quality of the capture data.
		</member>
		<member name="default_texels_per_unit" type="float" setter="set_default_texels_per_unit" getter="get_default_texels_per_unit" default="16.0">
			If a baked mesh doesn't have a UV2 size hint, this value will be used to roughly compute a suitable lightmap size.
		</member>
		<member name="environment_custom_color" type="Color" setter="set_environment_custom_color" getter="get_environment_custom_color">
			The environment color when [member environment_mode] is set to [constant ENVIRONMENT_MODE_CUSTOM_COLOR].
		</member>
		<member name="environment_custom_energy" type="float" setter="set_environment_custom_energy" getter="get_environment_custom_energy">
			The energy scaling factor when when [member environment_mode] is set to [constant ENVIRONMENT_MODE_CUSTOM_COLOR] or [constant ENVIRONMENT_MODE_CUSTOM_SKY].
		</member>
		<member name="environment_custom_sky" type="Sky" setter="set_environment_custom_sky" getter="get_environment_custom_sky">
			The [Sky] resource to use when [member environment_mode] is set o [constant ENVIRONMENT_MODE_CUSTOM_SKY].
		</member>
		<member name="environment_custom_sky_rotation_degrees" type="Vector3" setter="set_environment_custom_sky_rotation_degrees" getter="get_environment_custom_sky_rotation_degrees">
			The rotation of the baked custom sky.
		</member>
		<member name="environment_min_light" type="Color" setter="set_environment_min_light" getter="get_environment_min_light" default="Color( 0, 0, 0, 1 )">
			Minimum ambient light for all the lightmap texels. This doesn't take into account any occlusion from the scene's geometry, it simply ensures a minimum amount of light on all the lightmap texels. Can be used for artistic control on shadow color.
		</member>
		<member name="environment_mode" type="int" setter="set_environment_mode" getter="get_environment_mode" enum="BakedLightmap.EnvironmentMode" default="0">
			Decides which environment to use during baking.
		</member>
		<member name="extents" type="Vector3" setter="set_extents" getter="get_extents" default="Vector3( 10, 10, 10 )">
			Size of the baked lightmap. Only meshes inside this region will be included in the baked lightmap, also used as the bounds of the captured region for dynamic lighting.
		</member>
		<member name="image_path" type="String" setter="set_image_path" getter="get_image_path">
			[i]Deprecated.[/i] In previous versions, it determined the location where lightmaps were be saved.
		</member>
		<member name="light_data" type="BakedLightmapData" setter="set_light_data" getter="get_light_data">
			The calculated light data.
		</member>
		<member name="quality" type="int" setter="set_bake_quality" getter="get_bake_quality" enum="BakedLightmap.BakeQuality" default="1">
			Determines the amount of samples per texel used in indirect light baking. The amount of samples for each quality level can be configured in the project settings. When using Preview Bake, this value will be overridden by [member ProjectSettings.rendering/cpu_lightmapper/preview_bake/quality].
		</member>
		<member name="use_color" type="bool" setter="set_use_color" getter="is_using_color" default="true">
			Store full color values in the lightmap textures. When disabled, lightmap textures will store a single brightness channel. Can be disabled to reduce disk usage if the scene contains only white lights or you don't mind losing color information in indirect lighting.
		</member>
		<member name="use_denoiser" type="bool" setter="set_use_denoiser" getter="is_using_denoiser" default="true">
			When enabled, a lightmap denoiser will be used to reduce the noise inherent to Monte Carlo-based global illumination. This denoising is performed on the CPU after baking lightmaps, and will increase bake times when enabled.
		</member>
		<member name="use_hdr" type="bool" setter="set_use_hdr" getter="is_using_hdr" default="true">
			If [code]true[/code], stores the lightmap textures in a high dynamic range format (EXR). If [code]false[/code], stores the lightmap texture in a low dynamic range PNG image. This can be set to [code]false[/code] to reduce disk usage, but light values over 1.0 will be clamped and you may see banding caused by the reduced precision.
			[b]Note:[/b] Setting [member use_hdr] to [code]true[/code] will decrease lightmap banding even when using the GLES2 backend or if [member ProjectSettings.rendering/quality/depth/hdr] is [code]false[/code].
		</member>
	</members>
	<constants>
		<constant name="BAKE_QUALITY_LOW" value="0" enum="BakeQuality">
			The lowest bake quality mode (and the default when using Preview Bake). Fastest to calculate.
		</constant>
		<constant name="BAKE_QUALITY_MEDIUM" value="1" enum="BakeQuality">
			The default bake quality mode.
		</constant>
		<constant name="BAKE_QUALITY_HIGH" value="2" enum="BakeQuality">
			A higher bake quality mode. Takes longer to calculate.
		</constant>
		<constant name="BAKE_QUALITY_ULTRA" value="3" enum="BakeQuality">
			The highest bake quality mode. Takes the longest to calculate.
		</constant>
		<constant name="BAKE_ERROR_OK" value="0" enum="BakeError">
			Baking was successful.
		</constant>
		<constant name="BAKE_ERROR_NO_SAVE_PATH" value="1" enum="BakeError">
			Returns if no viable save path is found. This can happen where an [member image_path] is not specified or when the save location is invalid.
		</constant>
		<constant name="BAKE_ERROR_NO_MESHES" value="2" enum="BakeError">
			Currently unused.
		</constant>
		<constant name="BAKE_ERROR_CANT_CREATE_IMAGE" value="3" enum="BakeError">
			Returns when the baker cannot save per-mesh textures to file.
		</constant>
		<constant name="BAKE_ERROR_LIGHTMAP_SIZE" value="4" enum="BakeError">
			The size of the generated lightmaps is too large.
		</constant>
		<constant name="BAKE_ERROR_INVALID_MESH" value="5" enum="BakeError">
			Some mesh contains UV2 values outside the [code][0,1][/code] range.
		</constant>
		<constant name="BAKE_ERROR_USER_ABORTED" value="6" enum="BakeError">
			Returned if the user cancels baking.
		</constant>
		<constant name="BAKE_ERROR_NO_LIGHTMAPPER" value="7" enum="BakeError">
			Returns if lightmapper can't be created. Unless you are using a custom lightmapper, please report this as bug.
		</constant>
		<constant name="BAKE_ERROR_NO_ROOT" value="8" enum="BakeError">
			There is no root node to start baking from. Either provide [code]from_node[/code] argument or attach this node to a parent that should be used as root.
		</constant>
		<constant name="ENVIRONMENT_MODE_DISABLED" value="0" enum="EnvironmentMode">
			No environment is used during baking.
		</constant>
		<constant name="ENVIRONMENT_MODE_SCENE" value="1" enum="EnvironmentMode">
			The baked environment is automatically picked from the current scene.
		</constant>
		<constant name="ENVIRONMENT_MODE_CUSTOM_SKY" value="2" enum="EnvironmentMode">
			A custom sky is used as environment during baking.
		</constant>
		<constant name="ENVIRONMENT_MODE_CUSTOM_COLOR" value="3" enum="EnvironmentMode">
			A custom solid color is used as environment during baking.
		</constant>
	</constants>
</class>
