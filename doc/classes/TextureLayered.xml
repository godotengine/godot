<?xml version="1.0" encoding="UTF-8" ?>
<class name="TextureLayered" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Base class for 3D texture types.
	</brief_description>
	<description>
		Base class for [Texture3D] and [TextureArray]. Cannot be used directly, but contains all the functions necessary for accessing and using [Texture3D] and [TextureArray]. Data is set on a per-layer basis. For [Texture3D]s, the layer specifies the depth or Z-index, they can be treated as a bunch of 2D slices. Similarly, for [TextureArray]s, the layer specifies the array layer.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_depth" qualifiers="const">
			<return type="int" />
			<description>
				Returns the depth of the texture. Depth is the 3rd dimension (typically Z-axis).
			</description>
		</method>
		<method name="get_format" qualifiers="const">
			<return type="int" enum="Image.Format" />
			<description>
				Returns the current format being used by this texture. See [enum Image.Format] for details.
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="int" />
			<description>
				Returns the height of the texture. Height is typically represented by the Y-axis.
			</description>
		</method>
		<method name="get_layer_data" qualifiers="const">
			<return type="Image" />
			<argument index="0" name="layer" type="int" />
			<description>
				Returns an [Image] resource with the data from specified [code]layer[/code].
			</description>
		</method>
		<method name="get_width" qualifiers="const">
			<return type="int" />
			<description>
				Returns the width of the texture. Width is typically represented by the X-axis.
			</description>
		</method>
		<method name="set_data_partial">
			<return type="void" />
			<argument index="0" name="image" type="Image" />
			<argument index="1" name="x_offset" type="int" />
			<argument index="2" name="y_offset" type="int" />
			<argument index="3" name="layer" type="int" />
			<argument index="4" name="mipmap" type="int" default="0" />
			<description>
				Partially sets the data for a specified [code]layer[/code] by overwriting using the data of the specified [code]image[/code]. [code]x_offset[/code] and [code]y_offset[/code] determine where the [Image] is "stamped" over the texture. The [code]image[/code] must fit within the texture.
			</description>
		</method>
		<method name="set_layer_data">
			<return type="void" />
			<argument index="0" name="image" type="Image" />
			<argument index="1" name="layer" type="int" />
			<description>
				Sets the data for the specified layer. Data takes the form of a 2-dimensional [Image] resource.
			</description>
		</method>
		<method name="set_layer_data_raw">
			<return type="void" />
			<argument index="0" name="data" type="PoolByteArray" />
			<argument index="1" name="offset" type="int" />
			<argument index="2" name="layer" type="int" />
			<description>
				Sets the data for the specified layer from a byte array. The array's contents has to match the image format of the previously created texture.
				The offset parameter makes it possible to only use a part of the array to update the layer. This is useful if the content of multiple textures is available in a single array.
			</description>
		</method>
	</methods>
	<members>
		<member name="data" type="Dictionary" setter="_set_data" getter="_get_data" default="{&quot;depth&quot;: 0,&quot;flags&quot;: 7,&quot;format&quot;: 37,&quot;height&quot;: 0,&quot;layers&quot;: [  ],&quot;width&quot;: 0}">
			Returns a dictionary with all the data used by this texture.
		</member>
		<member name="flags" type="int" setter="set_flags" getter="get_flags" default="7">
			Specifies which [enum Flags] apply to this texture.
		</member>
	</members>
	<constants>
		<constant name="FLAGS_DEFAULT_TEXTURE_ARRAY" value="7" enum="Flags">
			Default flags for [TextureArray]. [constant FLAG_MIPMAPS], [constant FLAG_REPEAT] and [constant FLAG_FILTER] are enabled.
		</constant>
		<constant name="FLAGS_DEFAULT_TEXTURE_3D" value="4" enum="Flags">
			Default flags for [Texture3D]. [constant FLAG_FILTER] is enabled.
		</constant>
		<constant name="FLAG_MIPMAPS" value="1" enum="Flags">
			Texture will generate mipmaps on creation.
		</constant>
		<constant name="FLAG_REPEAT" value="2" enum="Flags">
			Texture will repeat when UV used is outside the 0-1 range.
		</constant>
		<constant name="FLAG_FILTER" value="4" enum="Flags">
			Use filtering when reading from texture. Filtering smooths out pixels. Turning filtering off is slightly faster and more appropriate when you need access to individual pixels.
		</constant>
		<constant name="FLAG_ANISOTROPIC_FILTER" value="8" enum="Flags">
			Uses anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.
			This results in better-looking textures when viewed from oblique angles.
		</constant>
	</constants>
</class>
