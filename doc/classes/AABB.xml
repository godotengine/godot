<?xml version="1.0" encoding="UTF-8" ?>
<class name="AABB" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A 3D axis-aligned bounding box.
	</brief_description>
	<description>
		[AABB] consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.
		It uses floating-point coordinates. The 2D counterpart to [AABB] is [Rect2].
		Negative values for [member size] are not supported and will not work for most methods. Use [method abs] to get an AABB with a positive size.
		[b]Note:[/b] Unlike [Rect2], [AABB] does not have a variant that uses integer coordinates.
	</description>
	<tutorials>
		<link title="Math documentation index">$DOCS_URL/tutorials/math/index.html</link>
		<link title="Vector math">$DOCS_URL/tutorials/math/vector_math.html</link>
		<link title="Advanced vector math">$DOCS_URL/tutorials/math/vectors_advanced.html</link>
	</tutorials>
	<constructors>
		<constructor name="AABB">
			<return type="AABB" />
			<description>
				Constructs a default-initialized [AABB] with default (zero) values of [member position] and [member size].
			</description>
		</constructor>
		<constructor name="AABB">
			<return type="AABB" />
			<param index="0" name="from" type="AABB" />
			<description>
				Constructs an [AABB] as a copy of the given [AABB].
			</description>
		</constructor>
		<constructor name="AABB">
			<return type="AABB" />
			<param index="0" name="position" type="Vector3" />
			<param index="1" name="size" type="Vector3" />
			<description>
				Constructs an [AABB] from a position and size.
			</description>
		</constructor>
	</constructors>
	<methods>
		<method name="abs" qualifiers="const">
			<return type="AABB" />
			<description>
				Returns an AABB with equivalent position and size, modified so that the most-negative corner is the origin and the size is positive.
			</description>
		</method>
		<method name="encloses" qualifiers="const">
			<return type="bool" />
			<param index="0" name="with" type="AABB" />
			<description>
				Returns [code]true[/code] if this [AABB] completely encloses another one.
			</description>
		</method>
		<method name="expand" qualifiers="const">
			<return type="AABB" />
			<param index="0" name="to_point" type="Vector3" />
			<description>
				Returns a copy of this [AABB] expanded to include a given point.
				[b]Example:[/b]
				[codeblocks]
				[gdscript]
				# position (-3, 2, 0), size (1, 1, 1)
				var box = AABB(Vector3(-3, 2, 0), Vector3(1, 1, 1))
				# position (-3, -1, 0), size (3, 4, 2), so we fit both the original AABB and Vector3(0, -1, 2)
				var box2 = box.expand(Vector3(0, -1, 2))
				[/gdscript]
				[csharp]
				// position (-3, 2, 0), size (1, 1, 1)
				var box = new Aabb(new Vector3(-3, 2, 0), new Vector3(1, 1, 1));
				// position (-3, -1, 0), size (3, 4, 2), so we fit both the original AABB and Vector3(0, -1, 2)
				var box2 = box.Expand(new Vector3(0, -1, 2));
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="get_center" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the center of the [AABB], which is equal to [member position] + ([member size] / 2).
			</description>
		</method>
		<method name="get_endpoint" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="idx" type="int" />
			<description>
				Gets the position of the 8 endpoints of the [AABB] in space.
			</description>
		</method>
		<method name="get_longest_axis" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the normalized longest axis of the [AABB].
			</description>
		</method>
		<method name="get_longest_axis_index" qualifiers="const">
			<return type="int" />
			<description>
				Returns the index of the longest axis of the [AABB] (according to [Vector3]'s [code]AXIS_*[/code] constants).
			</description>
		</method>
		<method name="get_longest_axis_size" qualifiers="const">
			<return type="float" />
			<description>
				Returns the scalar length of the longest axis of the [AABB].
			</description>
		</method>
		<method name="get_shortest_axis" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the normalized shortest axis of the [AABB].
			</description>
		</method>
		<method name="get_shortest_axis_index" qualifiers="const">
			<return type="int" />
			<description>
				Returns the index of the shortest axis of the [AABB] (according to [Vector3]::AXIS* enum).
			</description>
		</method>
		<method name="get_shortest_axis_size" qualifiers="const">
			<return type="float" />
			<description>
				Returns the scalar length of the shortest axis of the [AABB].
			</description>
		</method>
		<method name="get_support" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="dir" type="Vector3" />
			<description>
				Returns the vertex of the AABB that's the farthest in a given direction. This point is commonly known as the support point in collision detection algorithms.
			</description>
		</method>
		<method name="get_volume" qualifiers="const">
			<return type="float" />
			<description>
				Returns the volume of the [AABB].
			</description>
		</method>
		<method name="grow" qualifiers="const">
			<return type="AABB" />
			<param index="0" name="by" type="float" />
			<description>
				Returns a copy of the [AABB] grown a given number of units towards all the sides.
			</description>
		</method>
		<method name="has_point" qualifiers="const">
			<return type="bool" />
			<param index="0" name="point" type="Vector3" />
			<description>
				Returns [code]true[/code] if the [AABB] contains a point. Points on the faces of the AABB are considered included, though float-point precision errors may impact the accuracy of such checks.
				[b]Note:[/b] This method is not reliable for [AABB] with a [i]negative size[/i]. Use [method abs] to get a positive sized equivalent [AABB] to check for contained points.
			</description>
		</method>
		<method name="has_surface" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the [AABB] has a surface or a length, and [code]false[/code] if the [AABB] is empty (all components of [member size] are zero or negative).
			</description>
		</method>
		<method name="has_volume" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the [AABB] has a volume, and [code]false[/code] if the [AABB] is flat, empty, or has a negative [member size].
			</description>
		</method>
		<method name="intersection" qualifiers="const">
			<return type="AABB" />
			<param index="0" name="with" type="AABB" />
			<description>
				Returns the intersection between two [AABB]. An empty AABB (size [code](0, 0, 0)[/code]) is returned on failure.
			</description>
		</method>
		<method name="intersects" qualifiers="const">
			<return type="bool" />
			<param index="0" name="with" type="AABB" />
			<description>
				Returns [code]true[/code] if the [AABB] overlaps with another.
			</description>
		</method>
		<method name="intersects_plane" qualifiers="const">
			<return type="bool" />
			<param index="0" name="plane" type="Plane" />
			<description>
				Returns [code]true[/code] if the [AABB] is on both sides of a plane.
			</description>
		</method>
		<method name="intersects_ray" qualifiers="const">
			<return type="Variant" />
			<param index="0" name="from" type="Vector3" />
			<param index="1" name="dir" type="Vector3" />
			<description>
				Returns the point of intersection of the given ray with this [AABB] or [code]null[/code] if there is no intersection. Ray length is infinite.
			</description>
		</method>
		<method name="intersects_segment" qualifiers="const">
			<return type="Variant" />
			<param index="0" name="from" type="Vector3" />
			<param index="1" name="to" type="Vector3" />
			<description>
				Returns the point of intersection between [param from] and [param to] with this [AABB] or [code]null[/code] if there is no intersection.
			</description>
		</method>
		<method name="is_equal_approx" qualifiers="const">
			<return type="bool" />
			<param index="0" name="aabb" type="AABB" />
			<description>
				Returns [code]true[/code] if this [AABB] and [param aabb] are approximately equal, by calling [method @GlobalScope.is_equal_approx] on each component.
			</description>
		</method>
		<method name="is_finite" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if this [AABB] is finite, by calling [method @GlobalScope.is_finite] on each component.
			</description>
		</method>
		<method name="merge" qualifiers="const">
			<return type="AABB" />
			<param index="0" name="with" type="AABB" />
			<description>
				Returns a larger [AABB] that contains both this [AABB] and [param with].
			</description>
		</method>
	</methods>
	<members>
		<member name="end" type="Vector3" setter="" getter="" default="Vector3(0, 0, 0)">
			Ending corner. This is calculated as [code]position + size[/code]. Setting this value will change the size.
		</member>
		<member name="position" type="Vector3" setter="" getter="" default="Vector3(0, 0, 0)">
			Beginning corner. Typically has values lower than [member end].
		</member>
		<member name="size" type="Vector3" setter="" getter="" default="Vector3(0, 0, 0)">
			Size from [member position] to [member end]. Typically, all components are positive.
			If the size is negative, you can use [method abs] to fix it.
		</member>
	</members>
	<operators>
		<operator name="operator !=">
			<return type="bool" />
			<param index="0" name="right" type="AABB" />
			<description>
				Returns [code]true[/code] if the AABBs are not equal.
				[b]Note:[/b] Due to floating-point precision errors, consider using [method is_equal_approx] instead, which is more reliable.
			</description>
		</operator>
		<operator name="operator *">
			<return type="AABB" />
			<param index="0" name="right" type="Transform3D" />
			<description>
				Inversely transforms (multiplies) the [AABB] by the given [Transform3D] transformation matrix, under the assumption that the transformation basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not).
				[code]aabb * transform[/code] is equivalent to [code]transform.inverse() * aabb[/code]. See [method Transform3D.inverse].
				For transforming by inverse of an affine transformation (e.g. with scaling) [code]transform.affine_inverse() * aabb[/code] can be used instead. See [method Transform3D.affine_inverse].
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<param index="0" name="right" type="AABB" />
			<description>
				Returns [code]true[/code] if the AABBs are exactly equal.
				[b]Note:[/b] Due to floating-point precision errors, consider using [method is_equal_approx] instead, which is more reliable.
			</description>
		</operator>
	</operators>
</class>
