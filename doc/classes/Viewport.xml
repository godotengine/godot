<?xml version="1.0" encoding="UTF-8" ?>
<class name="Viewport" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Creates a sub-view into the screen.
	</brief_description>
	<description>
		A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.
		Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.
		If a viewport is a child of a [ViewportContainer], the viewport will automatically take up the container's size, otherwise it must be set manually.
		Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.
		Also, viewports can be assigned to different screens in case the devices have multiple screens.
		Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.
		[b]Note:[/b] By default, a newly created Viewport in Godot 3.x will appear to be upside down. Enabling [member render_target_v_flip] will display the Viewport with the correct orientation.
	</description>
	<tutorials>
		<link title="Viewport and canvas transforms">$DOCS_URL/tutorials/2d/2d_transforms.html</link>
		<link title="Viewports tutorial index">$DOCS_URL/tutorials/rendering/index.html</link>
		<link title="GUI in 3D Demo">https://godotengine.org/asset-library/asset/127</link>
		<link title="3D in 2D Demo">https://godotengine.org/asset-library/asset/128</link>
		<link title="2D in 3D Demo">https://godotengine.org/asset-library/asset/129</link>
		<link title="Screen Capture Demo">https://godotengine.org/asset-library/asset/130</link>
		<link title="Dynamic Split Screen Demo">https://godotengine.org/asset-library/asset/541</link>
		<link title="3D Viewport Scaling Demo">https://godotengine.org/asset-library/asset/586</link>
	</tutorials>
	<methods>
		<method name="find_world" qualifiers="const">
			<return type="World" />
			<description>
				Returns the first valid [World] for this viewport, searching the [member world] property of itself and any Viewport ancestor.
			</description>
		</method>
		<method name="find_world_2d" qualifiers="const">
			<return type="World2D" />
			<description>
				Returns the first valid [World2D] for this viewport, searching the [member world_2d] property of itself and any Viewport ancestor.
			</description>
		</method>
		<method name="get_camera" qualifiers="const">
			<return type="Camera" />
			<description>
				Returns the active 3D camera.
			</description>
		</method>
		<method name="get_final_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the total transform of the viewport.
			</description>
		</method>
		<method name="get_modal_stack_top" qualifiers="const">
			<return type="Control" />
			<description>
				Returns the topmost modal in the stack.
			</description>
		</method>
		<method name="get_mouse_position" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the mouse's position in this [Viewport] using the coordinate system of this [Viewport].
			</description>
		</method>
		<method name="get_render_info">
			<return type="int" />
			<argument index="0" name="info" type="int" enum="Viewport.RenderInfo" />
			<description>
				Returns information about the viewport from the rendering pipeline.
			</description>
		</method>
		<method name="get_shadow_atlas_quadrant_subdiv" qualifiers="const">
			<return type="int" enum="Viewport.ShadowAtlasQuadrantSubdiv" />
			<argument index="0" name="quadrant" type="int" />
			<description>
				Returns the [enum ShadowAtlasQuadrantSubdiv] of the specified quadrant.
			</description>
		</method>
		<method name="get_size_override" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the size override set with [method set_size_override].
			</description>
		</method>
		<method name="get_texture" qualifiers="const">
			<return type="ViewportTexture" />
			<description>
				Returns the viewport's texture.
				[b]Note:[/b] Due to the way OpenGL works, the resulting [ViewportTexture] is flipped vertically. You can use [method Image.flip_y] on the result of [method Texture.get_data] to flip it back, for example:
				[codeblock]
				var img = get_viewport().get_texture().get_data()
				img.flip_y()
				[/codeblock]
			</description>
		</method>
		<method name="get_viewport_rid" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the viewport's RID from the [VisualServer].
			</description>
		</method>
		<method name="get_visible_rect" qualifiers="const">
			<return type="Rect2" />
			<description>
				Returns the visible rectangle in global screen coordinates.
			</description>
		</method>
		<method name="gui_get_drag_data" qualifiers="const">
			<return type="Variant" />
			<description>
				Returns the drag data from the GUI, that was previously returned by [method Control.get_drag_data].
			</description>
		</method>
		<method name="gui_has_modal_stack" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if there are visible modals on-screen.
			</description>
		</method>
		<method name="gui_is_drag_successful" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the drag operation is successful.
			</description>
		</method>
		<method name="gui_is_dragging" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the viewport is currently performing a drag operation.
				Alternative to [constant Node.NOTIFICATION_DRAG_BEGIN] and [constant Node.NOTIFICATION_DRAG_END] when you prefer polling the value.
			</description>
		</method>
		<method name="input">
			<return type="void" />
			<argument index="0" name="local_event" type="InputEvent" />
			<description>
			</description>
		</method>
		<method name="is_input_handled" qualifiers="const">
			<return type="bool" />
			<description>
			</description>
		</method>
		<method name="is_size_override_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the size override is enabled. See [method set_size_override].
			</description>
		</method>
		<method name="set_attach_to_screen_rect">
			<return type="void" />
			<argument index="0" name="rect" type="Rect2" />
			<description>
				Attaches this [Viewport] to the root [Viewport] with the specified rectangle. This bypasses the need for another node to display this [Viewport] but makes you responsible for updating the position of this [Viewport] manually.
			</description>
		</method>
		<method name="set_input_as_handled">
			<return type="void" />
			<description>
				Stops the input from propagating further down the [SceneTree].
			</description>
		</method>
		<method name="set_shadow_atlas_quadrant_subdiv">
			<return type="void" />
			<argument index="0" name="quadrant" type="int" />
			<argument index="1" name="subdiv" type="int" enum="Viewport.ShadowAtlasQuadrantSubdiv" />
			<description>
				Sets the number of subdivisions to use in the specified quadrant. A higher number of subdivisions allows you to have more shadows in the scene at once, but reduces the quality of the shadows. A good practice is to have quadrants with a varying number of subdivisions and to have as few subdivisions as possible.
			</description>
		</method>
		<method name="set_size_override">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<argument index="1" name="size" type="Vector2" default="Vector2( -1, -1 )" />
			<argument index="2" name="margin" type="Vector2" default="Vector2( 0, 0 )" />
			<description>
				Sets the size override of the viewport. If the [code]enable[/code] parameter is [code]true[/code] the override is used, otherwise it uses the default size. If the size parameter is [code](-1, -1)[/code], it won't update the size.
			</description>
		</method>
		<method name="unhandled_input">
			<return type="void" />
			<argument index="0" name="local_event" type="InputEvent" />
			<description>
			</description>
		</method>
		<method name="update_worlds">
			<return type="void" />
			<description>
				Forces update of the 2D and 3D worlds.
			</description>
		</method>
		<method name="warp_mouse">
			<return type="void" />
			<argument index="0" name="to_position" type="Vector2" />
			<description>
				Moves the mouse pointer to the specified position in this [Viewport] using the coordinate system of this [Viewport].
			</description>
		</method>
	</methods>
	<members>
		<member name="arvr" type="bool" setter="set_use_arvr" getter="use_arvr" default="false">
			If [code]true[/code], the viewport will be used in AR/VR process.
		</member>
		<member name="audio_listener_enable_2d" type="bool" setter="set_as_audio_listener_2d" getter="is_audio_listener_2d" default="false">
			If [code]true[/code], the viewport will process 2D audio streams.
		</member>
		<member name="audio_listener_enable_3d" type="bool" setter="set_as_audio_listener" getter="is_audio_listener" default="false">
			If [code]true[/code], the viewport will process 3D audio streams.
		</member>
		<member name="canvas_transform" type="Transform2D" setter="set_canvas_transform" getter="get_canvas_transform">
			The canvas transform of the viewport, useful for changing the on-screen positions of all child [CanvasItem]s. This is relative to the global canvas transform of the viewport.
		</member>
		<member name="debanding" type="bool" setter="set_use_debanding" getter="get_use_debanding" default="false">
			If [code]true[/code], uses a fast post-processing filter to make banding significantly less visible in 3D. 2D rendering is [i]not[/i] affected by debanding unless the [member Environment.background_mode] is [constant Environment.BG_CANVAS]. In this case, [member usage] must also be set to [constant USAGE_3D]. See also [member ProjectSettings.rendering/quality/filters/use_debanding].
			In some cases, debanding may introduce a slightly noticeable dithering pattern. It's recommended to enable debanding only when actually needed since the dithering pattern will make lossless-compressed screenshots larger.
			[b]Note:[/b] Only available on the GLES3 backend. [member hdr] must also be [code]true[/code] for debanding to be effective.
		</member>
		<member name="debug_draw" type="int" setter="set_debug_draw" getter="get_debug_draw" enum="Viewport.DebugDraw" default="0">
			The overlay mode for test rendered geometry in debug purposes.
		</member>
		<member name="disable_3d" type="bool" setter="set_disable_3d" getter="is_3d_disabled" default="false">
			If [code]true[/code], the viewport will disable 3D rendering. To actually disable allocation of 3D buffers, set [member usage] instead.
		</member>
		<member name="fxaa" type="bool" setter="set_use_fxaa" getter="get_use_fxaa" default="false">
			Enables fast approximate antialiasing. FXAA is a popular screen-space antialiasing method, which is fast but will make the image look blurry, especially at lower resolutions. It can still work relatively well at large resolutions such as 1440p and 4K. Some of the lost sharpness can be recovered by enabling contrast-adaptive sharpening (see [member sharpen_intensity]).
		</member>
		<member name="global_canvas_transform" type="Transform2D" setter="set_global_canvas_transform" getter="get_global_canvas_transform">
			The global canvas transform of the viewport. The canvas transform is relative to this.
		</member>
		<member name="gui_disable_input" type="bool" setter="set_disable_input" getter="is_input_disabled" default="false">
			If [code]true[/code], the viewport will not receive input events.
		</member>
		<member name="gui_snap_controls_to_pixels" type="bool" setter="set_snap_controls_to_pixels" getter="is_snap_controls_to_pixels_enabled" default="true">
			If [code]true[/code], the GUI controls on the viewport will lay pixel perfectly.
		</member>
		<member name="handle_input_locally" type="bool" setter="set_handle_input_locally" getter="is_handling_input_locally" default="true">
		</member>
		<member name="hdr" type="bool" setter="set_hdr" getter="get_hdr" default="true">
			If [code]true[/code], the viewport rendering will receive benefits from High Dynamic Range algorithm. High Dynamic Range allows the viewport to receive values that are outside the 0-1 range. In Godot, HDR uses half floating-point precision (16-bit) by default. To use full floating-point precision (32-bit), enable [member use_32_bpc_depth].
			[b]Note:[/b] Requires [member usage] to be set to [constant USAGE_3D] or [constant USAGE_3D_NO_EFFECTS], since HDR is not supported for 2D.
			[b]Note:[/b] Only available on the GLES3 backend.
		</member>
		<member name="keep_3d_linear" type="bool" setter="set_keep_3d_linear" getter="get_keep_3d_linear" default="false">
			If [code]true[/code], the result after 3D rendering will not have a linear to sRGB color conversion applied. This is important when the viewport is used as a render target where the result is used as a texture on a 3D object rendered in another viewport. It is also important if the viewport is used to create data that is not color based (noise, heightmaps, pickmaps, etc.). Do not enable this when the viewport is used as a texture on a 2D object or if the viewport is your final output. For the GLES2 driver this will convert the sRGB output to linear, this should only be used for VR plugins that require input in linear color space!
		</member>
		<member name="msaa" type="int" setter="set_msaa" getter="get_msaa" enum="Viewport.MSAA" default="0">
			The multisample anti-aliasing mode. A higher number results in smoother edges at the cost of significantly worse performance. A value of 4 is best unless targeting very high-end systems.
		</member>
		<member name="own_world" type="bool" setter="set_use_own_world" getter="is_using_own_world" default="false">
			If [code]true[/code], the viewport will use a unique copy of the [World] defined in [member world].
		</member>
		<member name="physics_interpolation_mode" type="int" setter="set_physics_interpolation_mode" getter="get_physics_interpolation_mode" overrides="Node" enum="Node.PhysicsInterpolationMode" default="2" />
		<member name="physics_object_picking" type="bool" setter="set_physics_object_picking" getter="get_physics_object_picking" default="false">
			If [code]true[/code], the objects rendered by viewport become subjects of mouse picking process.
		</member>
		<member name="render_direct_to_screen" type="bool" setter="set_use_render_direct_to_screen" getter="is_using_render_direct_to_screen" default="false">
			If [code]true[/code], renders the Viewport directly to the screen instead of to the root viewport. Only available in GLES2. This is a low-level optimization and should not be used in most cases. If used, reading from the Viewport or from [code]SCREEN_TEXTURE[/code] becomes unavailable. For more information see [method VisualServer.viewport_set_render_direct_to_screen].
		</member>
		<member name="render_target_clear_mode" type="int" setter="set_clear_mode" getter="get_clear_mode" enum="Viewport.ClearMode" default="0">
			The clear mode when viewport used as a render target.
			[b]Note:[/b] This property is intended for 2D usage.
		</member>
		<member name="render_target_update_mode" type="int" setter="set_update_mode" getter="get_update_mode" enum="Viewport.UpdateMode" default="2">
			The update mode when viewport used as a render target.
		</member>
		<member name="render_target_v_flip" type="bool" setter="set_vflip" getter="get_vflip" default="false">
			If [code]true[/code], the result of rendering will be flipped vertically. Since Viewports in Godot 3.x render upside-down, it's recommended to set this to [code]true[/code] in most situations.
		</member>
		<member name="resolution_scale_factor" type="float" setter="set_resolution_scale_factor" getter="get_resolution_scale_factor" default="1.0">
			Sets a resolution scale factor for the viewport. This makes it possible to render 3d content at a fraction of the original resolution.
		</member>
		<member name="resolution_scale_filter" type="int" setter="set_resolution_scale_filter" getter="get_resolution_scale_filter" enum="Viewport.ResolutionScaleFilter" default="0">
			This changes how the rendered image is filtered when it is upscaled. This defaults to whatever has been configured in the project settings.
		</member>
		<member name="resolution_scale_mix" type="bool" setter="set_resolution_scale_mix" getter="get_resolution_scale_mix" default="true">
			If this is enabled the viewport specific scale factor is multiplied with the global scale factor that has been set in the project settings. If this is disabled the viewport scale overrides the global one for this viewport.
		</member>
		<member name="shadow_atlas_quad_0" type="int" setter="set_shadow_atlas_quadrant_subdiv" getter="get_shadow_atlas_quadrant_subdiv" enum="Viewport.ShadowAtlasQuadrantSubdiv" default="2">
			The subdivision amount of the first quadrant on the shadow atlas.
		</member>
		<member name="shadow_atlas_quad_1" type="int" setter="set_shadow_atlas_quadrant_subdiv" getter="get_shadow_atlas_quadrant_subdiv" enum="Viewport.ShadowAtlasQuadrantSubdiv" default="2">
			The subdivision amount of the second quadrant on the shadow atlas.
		</member>
		<member name="shadow_atlas_quad_2" type="int" setter="set_shadow_atlas_quadrant_subdiv" getter="get_shadow_atlas_quadrant_subdiv" enum="Viewport.ShadowAtlasQuadrantSubdiv" default="3">
			The subdivision amount of the third quadrant on the shadow atlas.
		</member>
		<member name="shadow_atlas_quad_3" type="int" setter="set_shadow_atlas_quadrant_subdiv" getter="get_shadow_atlas_quadrant_subdiv" enum="Viewport.ShadowAtlasQuadrantSubdiv" default="4">
			The subdivision amount of the fourth quadrant on the shadow atlas.
		</member>
		<member name="shadow_atlas_size" type="int" setter="set_shadow_atlas_size" getter="get_shadow_atlas_size" default="0">
			The shadow atlas' resolution (used for omni and spot lights). The value will be rounded up to the nearest power of 2.
			[b]Note:[/b] If this is set to [code]0[/code], both point [i]and[/i] directional shadows won't be visible. Since user-created viewports default to a value of [code]0[/code], this value must be set above [code]0[/code] manually (typically at least [code]256[/code]).
		</member>
		<member name="sharpen_intensity" type="float" setter="set_sharpen_intensity" getter="get_sharpen_intensity" default="0.0">
			If set to a value greater than [code]0.0[/code], contrast-adaptive sharpening will be applied to the 3D viewport. This has a low performance cost and can be used to recover some of the sharpness lost from using FXAA. Values around [code]0.5[/code] generally give the best results. See also [member fxaa].
		</member>
		<member name="size" type="Vector2" setter="set_size" getter="get_size" default="Vector2( 0, 0 )">
			The width and height of viewport. Must be set to a value greater than or equal to 2 pixels on both dimensions. Otherwise, nothing will be displayed.
		</member>
		<member name="size_override_stretch" type="bool" setter="set_size_override_stretch" getter="is_size_override_stretch_enabled" default="false">
			If [code]true[/code], the size override affects stretch as well.
		</member>
		<member name="transparent_bg" type="bool" setter="set_transparent_background" getter="has_transparent_background" default="false">
			If [code]true[/code], the viewport should render its background as transparent.
		</member>
		<member name="usage" type="int" setter="set_usage" getter="get_usage" enum="Viewport.Usage" default="2">
			The viewport's rendering mode. This controls which buffers are allocated for the viewport (2D only, or 2D + 3D). 2D-only options can reduce memory usage and improve performance slightly, especially on low-end devices.
			[b]Note:[/b] If set to [constant USAGE_2D] or [constant USAGE_2D_NO_SAMPLING], [member hdr] will have no effect when enabled since HDR is not supported for 2D.
		</member>
		<member name="use_32_bpc_depth" type="bool" setter="set_use_32_bpc_depth" getter="get_use_32_bpc_depth" default="false">
			If [code]true[/code], allocates the viewport's framebuffer with full floating-point precision (32-bit) instead of half floating-point precision (16-bit). Only effective when [member hdr] is also enabled.
			[b]Note:[/b] Enabling this setting does not improve rendering quality. Using full floating-point precision is slower, and is generally only needed for advanced shaders that require a high level of precision. To reduce banding, enable [member debanding] instead.
			[b]Note:[/b] Only available on the GLES3 backend.
		</member>
		<member name="world" type="World" setter="set_world" getter="get_world">
			The custom [World] which can be used as 3D environment source.
		</member>
		<member name="world_2d" type="World2D" setter="set_world_2d" getter="get_world_2d">
			The custom [World2D] which can be used as 2D environment source.
		</member>
	</members>
	<signals>
		<signal name="gui_focus_changed">
			<argument index="0" name="node" type="Control" />
			<description>
				Emitted when a Control node grabs keyboard focus.
			</description>
		</signal>
		<signal name="size_changed">
			<description>
				Emitted when the size of the viewport is changed, whether by [method set_size_override], resize of window, or some other means.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="UPDATE_DISABLED" value="0" enum="UpdateMode">
			Do not update the render target.
		</constant>
		<constant name="UPDATE_ONCE" value="1" enum="UpdateMode">
			Update the render target once, then switch to [constant UPDATE_DISABLED].
		</constant>
		<constant name="UPDATE_WHEN_VISIBLE" value="2" enum="UpdateMode">
			Update the render target only when it is visible. This is the default value.
		</constant>
		<constant name="UPDATE_ALWAYS" value="3" enum="UpdateMode">
			Always update the render target.
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED" value="0" enum="ShadowAtlasQuadrantSubdiv">
			This quadrant will not be used.
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_1" value="1" enum="ShadowAtlasQuadrantSubdiv">
			This quadrant will only be used by one shadow map.
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_4" value="2" enum="ShadowAtlasQuadrantSubdiv">
			This quadrant will be split in 4 and used by up to 4 shadow maps.
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_16" value="3" enum="ShadowAtlasQuadrantSubdiv">
			This quadrant will be split 16 ways and used by up to 16 shadow maps.
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_64" value="4" enum="ShadowAtlasQuadrantSubdiv">
			This quadrant will be split 64 ways and used by up to 64 shadow maps.
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_256" value="5" enum="ShadowAtlasQuadrantSubdiv">
			This quadrant will be split 256 ways and used by up to 256 shadow maps. Unless the [member shadow_atlas_size] is very high, the shadows in this quadrant will be very low resolution.
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_1024" value="6" enum="ShadowAtlasQuadrantSubdiv">
			This quadrant will be split 1024 ways and used by up to 1024 shadow maps. Unless the [member shadow_atlas_size] is very high, the shadows in this quadrant will be very low resolution.
		</constant>
		<constant name="SHADOW_ATLAS_QUADRANT_SUBDIV_MAX" value="7" enum="ShadowAtlasQuadrantSubdiv">
			Represents the size of the [enum ShadowAtlasQuadrantSubdiv] enum.
		</constant>
		<constant name="RENDER_INFO_OBJECTS_IN_FRAME" value="0" enum="RenderInfo">
			Amount of objects in frame.
		</constant>
		<constant name="RENDER_INFO_VERTICES_IN_FRAME" value="1" enum="RenderInfo">
			Amount of vertices in frame.
		</constant>
		<constant name="RENDER_INFO_MATERIAL_CHANGES_IN_FRAME" value="2" enum="RenderInfo">
			Amount of material changes in frame.
		</constant>
		<constant name="RENDER_INFO_SHADER_CHANGES_IN_FRAME" value="3" enum="RenderInfo">
			Amount of shader changes in frame.
		</constant>
		<constant name="RENDER_INFO_SURFACE_CHANGES_IN_FRAME" value="4" enum="RenderInfo">
			Amount of surface changes in frame.
		</constant>
		<constant name="RENDER_INFO_DRAW_CALLS_IN_FRAME" value="5" enum="RenderInfo">
			Amount of draw calls in frame.
		</constant>
		<constant name="RENDER_INFO_2D_ITEMS_IN_FRAME" value="6" enum="RenderInfo">
			Amount of items or joined items in frame.
		</constant>
		<constant name="RENDER_INFO_2D_DRAW_CALLS_IN_FRAME" value="7" enum="RenderInfo">
			Amount of draw calls in frame.
		</constant>
		<constant name="RENDER_INFO_MAX" value="8" enum="RenderInfo">
			Represents the size of the [enum RenderInfo] enum.
		</constant>
		<constant name="DEBUG_DRAW_DISABLED" value="0" enum="DebugDraw">
			Objects are displayed normally.
		</constant>
		<constant name="DEBUG_DRAW_UNSHADED" value="1" enum="DebugDraw">
			Objects are displayed without light information.
		</constant>
		<constant name="DEBUG_DRAW_OVERDRAW" value="2" enum="DebugDraw">
			Objected are displayed semi-transparent with additive blending so you can see where they intersect.
		</constant>
		<constant name="DEBUG_DRAW_WIREFRAME" value="3" enum="DebugDraw">
			Objects are displayed in wireframe style.
		</constant>
		<constant name="MSAA_DISABLED" value="0" enum="MSAA">
			Multisample anti-aliasing mode disabled. This is the default value.
		</constant>
		<constant name="MSAA_2X" value="1" enum="MSAA">
			Use 2x Multisample Antialiasing.
		</constant>
		<constant name="MSAA_4X" value="2" enum="MSAA">
			Use 4x Multisample Antialiasing.
		</constant>
		<constant name="MSAA_8X" value="3" enum="MSAA">
			Use 8x Multisample Antialiasing. Likely unsupported on low-end and older hardware.
		</constant>
		<constant name="MSAA_16X" value="4" enum="MSAA">
			Use 16x Multisample Antialiasing. Likely unsupported on medium and low-end hardware.
		</constant>
		<constant name="USAGE_2D" value="0" enum="Usage">
			Allocates all buffers needed for drawing 2D scenes. This takes less VRAM than the 3D usage modes. Note that 3D rendering effects such as glow and HDR are not available when using this mode.
		</constant>
		<constant name="USAGE_2D_NO_SAMPLING" value="1" enum="Usage">
			Allocates buffers needed for 2D scenes without allocating a buffer for screen copy. Accordingly, you cannot read from the screen. Of the [enum Usage] types, this requires the least VRAM. Note that 3D rendering effects such as glow and HDR are not available when using this mode.
		</constant>
		<constant name="USAGE_3D" value="2" enum="Usage">
			Allocates full buffers for drawing 3D scenes and all 3D effects including buffers needed for 2D scenes and effects.
		</constant>
		<constant name="USAGE_3D_NO_EFFECTS" value="3" enum="Usage">
			Allocates buffers needed for drawing 3D scenes. But does not allocate buffers needed for reading from the screen and post-processing effects. Saves some VRAM.
		</constant>
		<constant name="CLEAR_MODE_ALWAYS" value="0" enum="ClearMode">
			Always clear the render target before drawing.
		</constant>
		<constant name="CLEAR_MODE_NEVER" value="1" enum="ClearMode">
			Never clear the render target.
		</constant>
		<constant name="CLEAR_MODE_ONLY_NEXT_FRAME" value="2" enum="ClearMode">
			Clear the render target next frame, then switch to [constant CLEAR_MODE_NEVER].
		</constant>
		<constant name="RESOLUTION_SCALE_FILTER_DEFAULT" value="0" enum="ResolutionScaleFilter">
		</constant>
		<constant name="RESOLUTION_SCALE_FILTER_LINEAR" value="1" enum="ResolutionScaleFilter">
		</constant>
		<constant name="RESOLUTION_SCALE_FILTER_NEAREST" value="2" enum="ResolutionScaleFilter">
		</constant>
	</constants>
</class>
