<?xml version="1.0" encoding="UTF-8" ?>
<class name="PhysicsDirectSpaceState2D" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Provides direct access to a physics space in the [PhysicsServer2D].
	</brief_description>
	<description>
		Provides direct access to a physics space in the [PhysicsServer2D]. It's used mainly to do queries against objects and areas residing in a given space.
	</description>
	<tutorials>
		<link title="Physics introduction">$DOCS_URL/tutorials/physics/physics_introduction.html</link>
		<link title="Ray-casting">$DOCS_URL/tutorials/physics/ray-casting.html</link>
	</tutorials>
	<methods>
		<method name="cast_motion">
			<return type="PackedFloat32Array" />
			<param index="0" name="parameters" type="PhysicsShapeQueryParameters2D" />
			<description>
				Checks how far a [Shape2D] can move without colliding. All the parameters for the query, including the shape and the motion, are supplied through a [PhysicsShapeQueryParameters2D] object.
				Returns an array with the safe and unsafe proportions (between 0 and 1) of the motion. The safe proportion is the maximum fraction of the motion that can be made without a collision. The unsafe proportion is the minimum fraction of the distance that must be moved for a collision. If no collision is detected a result of [code][1.0, 1.0][/code] will be returned.
				[b]Note:[/b] Any [Shape2D]s that the shape is already colliding with e.g. inside of, will be ignored. Use [method collide_shape] to determine the [Shape2D]s that the shape is already colliding with.
			</description>
		</method>
		<method name="collide_shape">
			<return type="Vector2[]" />
			<param index="0" name="parameters" type="PhysicsShapeQueryParameters2D" />
			<param index="1" name="max_results" type="int" default="32" />
			<description>
				Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters2D] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time.
				Returned points are a list of pairs of contact points. For each pair the first one is in the shape passed in [PhysicsShapeQueryParameters2D] object, second one is in the collided shape from the physics space.
			</description>
		</method>
		<method name="get_rest_info">
			<return type="Dictionary" />
			<param index="0" name="parameters" type="PhysicsShapeQueryParameters2D" />
			<description>
				Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters2D] object, against the space. If it collides with more than one shape, the nearest one is selected. If the shape did not intersect anything, then an empty dictionary is returned instead.
				[b]Note:[/b] This method does not take into account the [code]motion[/code] property of the object. The returned object is a dictionary containing the following fields:
				[code]collider_id[/code]: The colliding object's ID.
				[code]linear_velocity[/code]: The colliding object's velocity [Vector2]. If the object is an [Area2D], the result is [code](0, 0)[/code].
				[code]normal[/code]: The object's surface normal at the intersection point.
				[code]point[/code]: The intersection point.
				[code]rid[/code]: The intersecting object's [RID].
				[code]shape[/code]: The shape index of the colliding shape.
			</description>
		</method>
		<method name="intersect_point">
			<return type="Dictionary[]" />
			<param index="0" name="parameters" type="PhysicsPointQueryParameters2D" />
			<param index="1" name="max_results" type="int" default="32" />
			<description>
				Checks whether a point is inside any solid shape. Position and other parameters are defined through [PhysicsPointQueryParameters2D]. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:
				[code]collider[/code]: The colliding object.
				[code]collider_id[/code]: The colliding object's ID.
				[code]rid[/code]: The intersecting object's [RID].
				[code]shape[/code]: The shape index of the colliding shape.
				The number of intersections can be limited with the [param max_results] parameter, to reduce the processing time.
				[b]Note:[/b] [ConcavePolygonShape2D]s and [CollisionPolygon2D]s in [code]Segments[/code] build mode are not solid shapes. Therefore, they will not be detected.
			</description>
		</method>
		<method name="intersect_ray">
			<return type="Dictionary" />
			<param index="0" name="parameters" type="PhysicsRayQueryParameters2D" />
			<description>
				Intersects a ray in a given space. Ray position and other parameters are defined through [PhysicsRayQueryParameters2D]. The returned object is a dictionary with the following fields:
				[code]collider[/code]: The colliding object.
				[code]collider_id[/code]: The colliding object's ID.
				[code]normal[/code]: The object's surface normal at the intersection point, or [code]Vector2(0, 0)[/code] if the ray starts inside the shape and [member PhysicsRayQueryParameters2D.hit_from_inside] is [code]true[/code].
				[code]position[/code]: The intersection point.
				[code]rid[/code]: The intersecting object's [RID].
				[code]shape[/code]: The shape index of the colliding shape.
				If the ray did not intersect anything, then an empty dictionary is returned instead.
			</description>
		</method>
		<method name="intersect_shape">
			<return type="Dictionary[]" />
			<param index="0" name="parameters" type="PhysicsShapeQueryParameters2D" />
			<param index="1" name="max_results" type="int" default="32" />
			<description>
				Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters2D] object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:
				[code]collider[/code]: The colliding object.
				[code]collider_id[/code]: The colliding object's ID.
				[code]rid[/code]: The intersecting object's [RID].
				[code]shape[/code]: The shape index of the colliding shape.
				The number of intersections can be limited with the [param max_results] parameter, to reduce the processing time.
			</description>
		</method>
	</methods>
</class>
