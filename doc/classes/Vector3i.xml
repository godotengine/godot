<?xml version="1.0" encoding="UTF-8" ?>
<class name="Vector3i" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A 3D vector using integer coordinates.
	</brief_description>
	<description>
		A 3-element structure that can be used to represent 3D grid coordinates or any other triplet of integers.
		It uses integer coordinates and is therefore preferable to [Vector3] when exact precision is required. Note that the values are limited to 32 bits, and unlike [Vector3] this cannot be configured with an engine build option. Use [int] or [PackedInt64Array] if 64-bit values are needed.
		[b]Note:[/b] In a boolean context, a Vector3i will evaluate to [code]false[/code] if it's equal to [code]Vector3i(0, 0, 0)[/code]. Otherwise, a Vector3i will always evaluate to [code]true[/code].
	</description>
	<tutorials>
		<link title="Math documentation index">$DOCS_URL/tutorials/math/index.html</link>
		<link title="Vector math">$DOCS_URL/tutorials/math/vector_math.html</link>
		<link title="3Blue1Brown Essence of Linear Algebra">https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab</link>
	</tutorials>
	<constructors>
		<constructor name="Vector3i">
			<return type="Vector3i" />
			<description>
				Constructs a default-initialized [Vector3i] with all components set to [code]0[/code].
			</description>
		</constructor>
		<constructor name="Vector3i">
			<return type="Vector3i" />
			<param index="0" name="from" type="Vector3i" />
			<description>
				Constructs a [Vector3i] as a copy of the given [Vector3i].
			</description>
		</constructor>
		<constructor name="Vector3i">
			<return type="Vector3i" />
			<param index="0" name="from" type="Vector3" />
			<description>
				Constructs a new [Vector3i] from the given [Vector3] by truncating components' fractional parts (rounding towards zero). For a different behavior consider passing the result of [method Vector3.ceil], [method Vector3.floor] or [method Vector3.round] to this constructor instead.
			</description>
		</constructor>
		<constructor name="Vector3i">
			<return type="Vector3i" />
			<param index="0" name="x" type="int" />
			<param index="1" name="y" type="int" />
			<param index="2" name="z" type="int" />
			<description>
				Returns a [Vector3i] with the given components.
			</description>
		</constructor>
	</constructors>
	<methods>
		<method name="abs" qualifiers="const">
			<return type="Vector3i" />
			<description>
				Returns a new vector with all components in absolute values (i.e. positive).
			</description>
		</method>
		<method name="clamp" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="min" type="Vector3i" />
			<param index="1" name="max" type="Vector3i" />
			<description>
				Returns a new vector with all components clamped between the components of [param min] and [param max], by running [method @GlobalScope.clamp] on each component.
			</description>
		</method>
		<method name="clampi" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="min" type="int" />
			<param index="1" name="max" type="int" />
			<description>
				Returns a new vector with all components clamped between [param min] and [param max], by running [method @GlobalScope.clamp] on each component.
			</description>
		</method>
		<method name="distance_squared_to" qualifiers="const">
			<return type="int" />
			<param index="0" name="to" type="Vector3i" />
			<description>
				Returns the squared distance between this vector and [param to].
				This method runs faster than [method distance_to], so prefer it if you need to compare vectors or need the squared distance for some formula.
			</description>
		</method>
		<method name="distance_to" qualifiers="const">
			<return type="float" />
			<param index="0" name="to" type="Vector3i" />
			<description>
				Returns the distance between this vector and [param to].
			</description>
		</method>
		<method name="length" qualifiers="const" keywords="size">
			<return type="float" />
			<description>
				Returns the length (magnitude) of this vector.
			</description>
		</method>
		<method name="length_squared" qualifiers="const">
			<return type="int" />
			<description>
				Returns the squared length (squared magnitude) of this vector.
				This method runs faster than [method length], so prefer it if you need to compare vectors or need the squared distance for some formula.
			</description>
		</method>
		<method name="max" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="with" type="Vector3i" />
			<description>
				Returns the component-wise maximum of this and [param with], equivalent to [code]Vector3i(maxi(x, with.x), maxi(y, with.y), maxi(z, with.z))[/code].
			</description>
		</method>
		<method name="max_axis_index" qualifiers="const">
			<return type="int" />
			<description>
				Returns the axis of the vector's highest value. See [code]AXIS_*[/code] constants. If all components are equal, this method returns [constant AXIS_X].
			</description>
		</method>
		<method name="maxi" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="with" type="int" />
			<description>
				Returns the component-wise maximum of this and [param with], equivalent to [code]Vector3i(maxi(x, with), maxi(y, with), maxi(z, with))[/code].
			</description>
		</method>
		<method name="min" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="with" type="Vector3i" />
			<description>
				Returns the component-wise minimum of this and [param with], equivalent to [code]Vector3i(mini(x, with.x), mini(y, with.y), mini(z, with.z))[/code].
			</description>
		</method>
		<method name="min_axis_index" qualifiers="const">
			<return type="int" />
			<description>
				Returns the axis of the vector's lowest value. See [code]AXIS_*[/code] constants. If all components are equal, this method returns [constant AXIS_Z].
			</description>
		</method>
		<method name="mini" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="with" type="int" />
			<description>
				Returns the component-wise minimum of this and [param with], equivalent to [code]Vector3i(mini(x, with), mini(y, with), mini(z, with))[/code].
			</description>
		</method>
		<method name="sign" qualifiers="const">
			<return type="Vector3i" />
			<description>
				Returns a new vector with each component set to [code]1[/code] if it's positive, [code]-1[/code] if it's negative, and [code]0[/code] if it's zero. The result is identical to calling [method @GlobalScope.sign] on each component.
			</description>
		</method>
		<method name="snapped" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="step" type="Vector3i" />
			<description>
				Returns a new vector with each component snapped to the closest multiple of the corresponding component in [param step].
			</description>
		</method>
		<method name="snappedi" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="step" type="int" />
			<description>
				Returns a new vector with each component snapped to the closest multiple of [param step].
			</description>
		</method>
	</methods>
	<members>
		<member name="x" type="int" setter="" getter="" default="0">
			The vector's X component. Also accessible by using the index position [code][0][/code].
		</member>
		<member name="y" type="int" setter="" getter="" default="0">
			The vector's Y component. Also accessible by using the index position [code][1][/code].
		</member>
		<member name="z" type="int" setter="" getter="" default="0">
			The vector's Z component. Also accessible by using the index position [code][2][/code].
		</member>
	</members>
	<constants>
		<constant name="AXIS_X" value="0">
			Enumerated value for the X axis. Returned by [method max_axis_index] and [method min_axis_index].
		</constant>
		<constant name="AXIS_Y" value="1">
			Enumerated value for the Y axis. Returned by [method max_axis_index] and [method min_axis_index].
		</constant>
		<constant name="AXIS_Z" value="2">
			Enumerated value for the Z axis. Returned by [method max_axis_index] and [method min_axis_index].
		</constant>
		<constant name="ZERO" value="Vector3i(0, 0, 0)">
			Zero vector, a vector with all components set to [code]0[/code].
		</constant>
		<constant name="ONE" value="Vector3i(1, 1, 1)">
			One vector, a vector with all components set to [code]1[/code].
		</constant>
		<constant name="MIN" value="Vector3i(-2147483648, -2147483648, -2147483648)">
			Min vector, a vector with all components equal to [code]INT32_MIN[/code]. Can be used as a negative integer equivalent of [constant Vector3.INF].
		</constant>
		<constant name="MAX" value="Vector3i(2147483647, 2147483647, 2147483647)">
			Max vector, a vector with all components equal to [code]INT32_MAX[/code]. Can be used as an integer equivalent of [constant Vector3.INF].
		</constant>
		<constant name="LEFT" value="Vector3i(-1, 0, 0)">
			Left unit vector. Represents the local direction of left, and the global direction of west.
		</constant>
		<constant name="RIGHT" value="Vector3i(1, 0, 0)">
			Right unit vector. Represents the local direction of right, and the global direction of east.
		</constant>
		<constant name="UP" value="Vector3i(0, 1, 0)">
			Up unit vector.
		</constant>
		<constant name="DOWN" value="Vector3i(0, -1, 0)">
			Down unit vector.
		</constant>
		<constant name="FORWARD" value="Vector3i(0, 0, -1)">
			Forward unit vector. Represents the local direction of forward, and the global direction of north.
		</constant>
		<constant name="BACK" value="Vector3i(0, 0, 1)">
			Back unit vector. Represents the local direction of back, and the global direction of south.
		</constant>
	</constants>
	<operators>
		<operator name="operator !=">
			<return type="bool" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Returns [code]true[/code] if the vectors are not equal.
			</description>
		</operator>
		<operator name="operator %">
			<return type="Vector3i" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Gets the remainder of each component of the [Vector3i] with the components of the given [Vector3i]. This operation uses truncated division, which is often not desired as it does not work well with negative numbers. Consider using [method @GlobalScope.posmod] instead if you want to handle negative numbers.
				[codeblock]
				print(Vector3i(10, -20, 30) % Vector3i(7, 8, 9)) # Prints "(3, -4, 3)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator %">
			<return type="Vector3i" />
			<param index="0" name="right" type="int" />
			<description>
				Gets the remainder of each component of the [Vector3i] with the given [int]. This operation uses truncated division, which is often not desired as it does not work well with negative numbers. Consider using [method @GlobalScope.posmod] instead if you want to handle negative numbers.
				[codeblock]
				print(Vector3i(10, -20, 30) % 7) # Prints "(3, -6, 2)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator *">
			<return type="Vector3i" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Multiplies each component of the [Vector3i] by the components of the given [Vector3i].
				[codeblock]
				print(Vector3i(10, 20, 30) * Vector3i(3, 4, 5)) # Prints "(30, 80, 150)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator *">
			<return type="Vector3" />
			<param index="0" name="right" type="float" />
			<description>
				Multiplies each component of the [Vector3i] by the given [float]. Returns a [Vector3].
				[codeblock]
				print(Vector3i(10, 15, 20) * 0.9) # Prints "(9, 13.5, 18)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator *">
			<return type="Vector3i" />
			<param index="0" name="right" type="int" />
			<description>
				Multiplies each component of the [Vector3i] by the given [int].
			</description>
		</operator>
		<operator name="operator +">
			<return type="Vector3i" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Adds each component of the [Vector3i] by the components of the given [Vector3i].
				[codeblock]
				print(Vector3i(10, 20, 30) + Vector3i(3, 4, 5)) # Prints "(13, 24, 35)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator -">
			<return type="Vector3i" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Subtracts each component of the [Vector3i] by the components of the given [Vector3i].
				[codeblock]
				print(Vector3i(10, 20, 30) - Vector3i(3, 4, 5)) # Prints "(7, 16, 25)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator /">
			<return type="Vector3i" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Divides each component of the [Vector3i] by the components of the given [Vector3i].
				[codeblock]
				print(Vector3i(10, 20, 30) / Vector3i(2, 5, 3)) # Prints "(5, 4, 10)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator /">
			<return type="Vector3" />
			<param index="0" name="right" type="float" />
			<description>
				Divides each component of the [Vector3i] by the given [float]. Returns a [Vector3].
				[codeblock]
				print(Vector3i(10, 20, 30) / 2.9) # Prints "(5, 10, 15)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator /">
			<return type="Vector3i" />
			<param index="0" name="right" type="int" />
			<description>
				Divides each component of the [Vector3i] by the given [int].
			</description>
		</operator>
		<operator name="operator &lt;">
			<return type="bool" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Compares two [Vector3i] vectors by first checking if the X value of the left vector is less than the X value of the [param right] vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors, and then with the Z values. This operator is useful for sorting vectors.
			</description>
		</operator>
		<operator name="operator &lt;=">
			<return type="bool" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Compares two [Vector3i] vectors by first checking if the X value of the left vector is less than or equal to the X value of the [param right] vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors, and then with the Z values. This operator is useful for sorting vectors.
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Returns [code]true[/code] if the vectors are equal.
			</description>
		</operator>
		<operator name="operator &gt;">
			<return type="bool" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Compares two [Vector3i] vectors by first checking if the X value of the left vector is greater than the X value of the [param right] vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors, and then with the Z values. This operator is useful for sorting vectors.
			</description>
		</operator>
		<operator name="operator &gt;=">
			<return type="bool" />
			<param index="0" name="right" type="Vector3i" />
			<description>
				Compares two [Vector3i] vectors by first checking if the X value of the left vector is greater than or equal to the X value of the [param right] vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors, and then with the Z values. This operator is useful for sorting vectors.
			</description>
		</operator>
		<operator name="operator []">
			<return type="int" />
			<param index="0" name="index" type="int" />
			<description>
				Access vector components using their [param index]. [code]v[0][/code] is equivalent to [code]v.x[/code], [code]v[1][/code] is equivalent to [code]v.y[/code], and [code]v[2][/code] is equivalent to [code]v.z[/code].
			</description>
		</operator>
		<operator name="operator unary+">
			<return type="Vector3i" />
			<description>
				Returns the same value as if the [code]+[/code] was not there. Unary [code]+[/code] does nothing, but sometimes it can make your code more readable.
			</description>
		</operator>
		<operator name="operator unary-">
			<return type="Vector3i" />
			<description>
				Returns the negative value of the [Vector3i]. This is the same as writing [code]Vector3i(-v.x, -v.y, -v.z)[/code]. This operation flips the direction of the vector while keeping the same magnitude.
			</description>
		</operator>
	</operators>
</class>
