<?xml version="1.0" encoding="UTF-8" ?>
<class name="Image" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Image datatype.
	</brief_description>
	<description>
		Native image datatype. Contains image data which can be converted to an [ImageTexture] and provides commonly used [i]image processing[/i] methods. The maximum width and height for an [Image] are [constant MAX_WIDTH] and [constant MAX_HEIGHT].
		An [Image] cannot be assigned to a [code]texture[/code] property of an object directly (such as [Sprite]), and has to be converted manually to an [ImageTexture] first.
		[b]Note:[/b] The maximum image size is 16384Ã—16384 pixels due to graphics hardware limitations. Larger images may fail to import.
	</description>
	<tutorials>
		<link title="Importing images">$DOCS_URL/tutorials/assets_pipeline/importing_images.html</link>
	</tutorials>
	<methods>
		<method name="blend_rect">
			<return type="void" />
			<argument index="0" name="src" type="Image" />
			<argument index="1" name="src_rect" type="Rect2" />
			<argument index="2" name="dst" type="Vector2" />
			<description>
				Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dest[/code], clipped accordingly to both image bounds. This image and [code]src[/code] image [b]must[/b] have the same format. [code]src_rect[/code] with not positive size is treated as empty.
			</description>
		</method>
		<method name="blend_rect_mask">
			<return type="void" />
			<argument index="0" name="src" type="Image" />
			<argument index="1" name="mask" type="Image" />
			<argument index="2" name="src_rect" type="Rect2" />
			<argument index="3" name="dst" type="Vector2" />
			<description>
				Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image using [code]mask[/code] image at coordinates [code]dst[/code], clipped accordingly to both image bounds. Alpha channels are required for both [code]src[/code] and [code]mask[/code]. [code]dst[/code] pixels and [code]src[/code] pixels will blend if the corresponding mask pixel's alpha value is not 0. This image and [code]src[/code] image [b]must[/b] have the same format. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats. [code]src_rect[/code] with not positive size is treated as empty.
			</description>
		</method>
		<method name="blit_rect">
			<return type="void" />
			<argument index="0" name="src" type="Image" />
			<argument index="1" name="src_rect" type="Rect2" />
			<argument index="2" name="dst" type="Vector2" />
			<description>
				Copies [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dst[/code], clipped accordingly to both image bounds. This image and [code]src[/code] image [b]must[/b] have the same format. [code]src_rect[/code] with not positive size is treated as empty.
			</description>
		</method>
		<method name="blit_rect_mask">
			<return type="void" />
			<argument index="0" name="src" type="Image" />
			<argument index="1" name="mask" type="Image" />
			<argument index="2" name="src_rect" type="Rect2" />
			<argument index="3" name="dst" type="Vector2" />
			<description>
				Blits [code]src_rect[/code] area from [code]src[/code] image to this image at the coordinates given by [code]dst[/code], clipped accordingly to both image bounds. [code]src[/code] pixel is copied onto [code]dst[/code] if the corresponding [code]mask[/code] pixel's alpha value is not 0. This image and [code]src[/code] image [b]must[/b] have the same format. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats. [code]src_rect[/code] with not positive size is treated as empty.
			</description>
		</method>
		<method name="bumpmap_to_normalmap">
			<return type="void" />
			<argument index="0" name="bump_scale" type="float" default="1.0" />
			<description>
				Converts a bumpmap to a normalmap. A bumpmap provides a height offset per-pixel, while a normalmap provides a normal direction per pixel.
			</description>
		</method>
		<method name="clear_mipmaps">
			<return type="void" />
			<description>
				Removes the image's mipmaps.
			</description>
		</method>
		<method name="compress">
			<return type="int" enum="Error" />
			<argument index="0" name="mode" type="int" enum="Image.CompressMode" />
			<argument index="1" name="source" type="int" enum="Image.CompressSource" />
			<argument index="2" name="lossy_quality" type="float" />
			<description>
				Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. See [enum CompressMode] and [enum CompressSource] constants.
			</description>
		</method>
		<method name="convert">
			<return type="void" />
			<argument index="0" name="format" type="int" enum="Image.Format" />
			<description>
				Converts the image's format. See [enum Format] constants.
			</description>
		</method>
		<method name="copy_from">
			<return type="void" />
			<argument index="0" name="src" type="Image" />
			<description>
				Copies [code]src[/code] image to this image.
			</description>
		</method>
		<method name="create">
			<return type="void" />
			<argument index="0" name="width" type="int" />
			<argument index="1" name="height" type="int" />
			<argument index="2" name="use_mipmaps" type="bool" />
			<argument index="3" name="format" type="int" enum="Image.Format" />
			<description>
				Creates an empty image of given size and format. See [enum Format] constants. If [code]use_mipmaps[/code] is [code]true[/code] then generate mipmaps for this image. See the [method generate_mipmaps].
			</description>
		</method>
		<method name="create_from_data">
			<return type="void" />
			<argument index="0" name="width" type="int" />
			<argument index="1" name="height" type="int" />
			<argument index="2" name="use_mipmaps" type="bool" />
			<argument index="3" name="format" type="int" enum="Image.Format" />
			<argument index="4" name="data" type="PoolByteArray" />
			<description>
				Creates a new image of given size and format. See [enum Format] constants. Fills the image with the given raw data. If [code]use_mipmaps[/code] is [code]true[/code] then loads mipmaps for this image from [code]data[/code]. See [method generate_mipmaps].
			</description>
		</method>
		<method name="crop">
			<return type="void" />
			<argument index="0" name="width" type="int" />
			<argument index="1" name="height" type="int" />
			<description>
				Crops the image to the given [code]width[/code] and [code]height[/code]. If the specified size is larger than the current size, the extra area is filled with black pixels.
			</description>
		</method>
		<method name="decompress">
			<return type="int" enum="Error" />
			<description>
				Decompresses the image if it is compressed. Returns an error if decompress function is not available.
			</description>
		</method>
		<method name="detect_alpha" qualifiers="const">
			<return type="int" enum="Image.AlphaMode" />
			<description>
				Returns [constant ALPHA_BLEND] if the image has data for alpha values. Returns [constant ALPHA_BIT] if all the alpha values are stored in a single bit. Returns [constant ALPHA_NONE] if no data for alpha values is found.
			</description>
		</method>
		<method name="expand_x2_hq2x">
			<return type="void" />
			<description>
				Stretches the image and enlarges it by a factor of 2. No interpolation is done.
			</description>
		</method>
		<method name="fill">
			<return type="void" />
			<argument index="0" name="color" type="Color" />
			<description>
				Fills the image with [code]color[/code].
			</description>
		</method>
		<method name="fill_rect">
			<return type="void" />
			<argument index="0" name="rect" type="Rect2" />
			<argument index="1" name="color" type="Color" />
			<description>
				Fills [code]rect[/code] with [code]color[/code].
			</description>
		</method>
		<method name="fix_alpha_edges">
			<return type="void" />
			<description>
				Blends low-alpha pixels with nearby pixels.
			</description>
		</method>
		<method name="flip_x">
			<return type="void" />
			<description>
				Flips the image horizontally.
			</description>
		</method>
		<method name="flip_y">
			<return type="void" />
			<description>
				Flips the image vertically.
			</description>
		</method>
		<method name="generate_mipmaps">
			<return type="int" enum="Error" />
			<argument index="0" name="renormalize" type="bool" default="false" />
			<description>
				Generates mipmaps for the image. Mipmaps are precalculated lower-resolution copies of the image that are automatically used if the image needs to be scaled down when rendered. They help improve image quality and performance when rendering. This method returns an error if the image is compressed, in a custom format, or if the image's width/height is [code]0[/code].
				[b]Note:[/b] Mipmap generation is done on the CPU, is single-threaded and is [i]always[/i] done on the main thread. This means generating mipmaps will result in noticeable stuttering during gameplay, even if [method generate_mipmaps] is called from a [Thread].
			</description>
		</method>
		<method name="get_data" qualifiers="const">
			<return type="PoolByteArray" />
			<description>
				Returns a copy of the image's raw data.
			</description>
		</method>
		<method name="get_format" qualifiers="const">
			<return type="int" enum="Image.Format" />
			<description>
				Returns the image's format. See [enum Format] constants.
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="int" />
			<description>
				Returns the image's height.
			</description>
		</method>
		<method name="get_mipmap_offset" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mipmap" type="int" />
			<description>
				Returns the offset where the image's mipmap with index [code]mipmap[/code] is stored in the [code]data[/code] dictionary.
			</description>
		</method>
		<method name="get_pixel" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="y" type="int" />
			<description>
				Returns the color of the pixel at [code](x, y)[/code] if the image is locked. If the image is unlocked, it always returns a [Color] with the value [code](0, 0, 0, 1.0)[/code]. This is the same as [method get_pixelv], but two integer arguments instead of a Vector2 argument.
			</description>
		</method>
		<method name="get_pixelv" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="src" type="Vector2" />
			<description>
				Returns the color of the pixel at [code]src[/code] if the image is locked. If the image is unlocked, it always returns a [Color] with the value [code](0, 0, 0, 1.0)[/code]. This is the same as [method get_pixel], but with a Vector2 argument instead of two integer arguments.
			</description>
		</method>
		<method name="get_rect" qualifiers="const">
			<return type="Image" />
			<argument index="0" name="rect" type="Rect2" />
			<description>
				Returns a new image that is a copy of the image's area specified with [code]rect[/code].
			</description>
		</method>
		<method name="get_size" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the image's size (width and height).
			</description>
		</method>
		<method name="get_used_rect" qualifiers="const">
			<return type="Rect2" />
			<description>
				Returns a [Rect2] enclosing the visible portion of the image, considering each pixel with a non-zero alpha channel as visible.
			</description>
		</method>
		<method name="get_width" qualifiers="const">
			<return type="int" />
			<description>
				Returns the image's width.
			</description>
		</method>
		<method name="has_mipmaps" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the image has generated mipmaps.
			</description>
		</method>
		<method name="is_compressed" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the image is compressed.
			</description>
		</method>
		<method name="is_empty" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the image has no data.
			</description>
		</method>
		<method name="is_invisible" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if all the image's pixels have an alpha value of 0. Returns [code]false[/code] if any pixel has an alpha value higher than 0.
			</description>
		</method>
		<method name="load">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Loads an image from file [code]path[/code]. See [url=$DOCS_URL/tutorials/assets_pipeline/importing_images.html#supported-image-formats]Supported image formats[/url] for a list of supported image formats and limitations.
				[b]Warning:[/b] This method should only be used in the editor or in cases when you need to load external images at run-time, such as images located at the [code]user://[/code] directory, and may not work in exported projects.
				See also [ImageTexture] description for usage examples.
			</description>
		</method>
		<method name="load_bmp_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Loads an image from the binary contents of a BMP file.
				[b]Note:[/b] Godot's BMP module doesn't support 16-bit per pixel images. Only 1-bit, 4-bit, 8-bit, 24-bit, and 32-bit per pixel images are supported.
			</description>
		</method>
		<method name="load_jpg_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Loads an image from the binary contents of a JPEG file.
			</description>
		</method>
		<method name="load_png_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Loads an image from the binary contents of a PNG file.
			</description>
		</method>
		<method name="load_tga_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Loads an image from the binary contents of a TGA file.
			</description>
		</method>
		<method name="load_webp_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Loads an image from the binary contents of a WebP file.
			</description>
		</method>
		<method name="lock">
			<return type="void" />
			<description>
				Locks the data for reading and writing access. Sends an error to the console if the image is not locked when reading or writing a pixel.
			</description>
		</method>
		<method name="normalmap_to_xy">
			<return type="void" />
			<description>
				Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normalmap. A normalmap can add lots of detail to a 3D surface without increasing the polygon count.
			</description>
		</method>
		<method name="premultiply_alpha">
			<return type="void" />
			<description>
				Multiplies color values with alpha values. Resulting color values for a pixel are [code](color * alpha)/256[/code].
			</description>
		</method>
		<method name="resize">
			<return type="void" />
			<argument index="0" name="width" type="int" />
			<argument index="1" name="height" type="int" />
			<argument index="2" name="interpolation" type="int" enum="Image.Interpolation" default="1" />
			<description>
				Resizes the image to the given [code]width[/code] and [code]height[/code]. New pixels are calculated using the [code]interpolation[/code] mode defined via [enum Interpolation] constants.
			</description>
		</method>
		<method name="resize_to_po2">
			<return type="void" />
			<argument index="0" name="square" type="bool" default="false" />
			<argument index="1" name="interpolation" type="int" enum="Image.Interpolation" default="1" />
			<description>
				Resizes the image to the nearest power of 2 for the width and height. If [code]square[/code] is [code]true[/code] then set width and height to be the same. New pixels are calculated using the [code]interpolation[/code] mode defined via [enum Interpolation] constants.
			</description>
		</method>
		<method name="rgbe_to_srgb">
			<return type="Image" />
			<description>
				Converts a standard RGBE (Red Green Blue Exponent) image to an sRGB image.
			</description>
		</method>
		<method name="save_exr" qualifiers="const">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="grayscale" type="bool" default="false" />
			<description>
				Saves the image as an EXR file to [code]path[/code]. If [code]grayscale[/code] is [code]true[/code] and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return [constant ERR_UNAVAILABLE] if Godot was compiled without the TinyEXR module.
				[b]Note:[/b] The TinyEXR module is disabled in non-editor builds, which means [method save_exr] will return [constant ERR_UNAVAILABLE] when it is called from an exported project.
			</description>
		</method>
		<method name="save_jpg" qualifiers="const">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="quality" type="float" default="0.75" />
			<description>
				Saves the image as a JPG file to [code]path[/code]. Compression level (from 0.01 to 1.0 -- highest quality) can be set with [code]quality[/code].
			</description>
		</method>
		<method name="save_jpg_to_buffer" qualifiers="const">
			<return type="PoolByteArray" />
			<argument index="0" name="quality" type="float" default="0.75" />
			<description>
			</description>
		</method>
		<method name="save_png" qualifiers="const">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Saves the image as a PNG file to [code]path[/code].
			</description>
		</method>
		<method name="save_png_to_buffer" qualifiers="const">
			<return type="PoolByteArray" />
			<description>
			</description>
		</method>
		<method name="set_pixel">
			<return type="void" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="y" type="int" />
			<argument index="2" name="color" type="Color" />
			<description>
				Sets the [Color] of the pixel at [code](x, y)[/code] if the image is locked. Example:
				[codeblock]
				var img = Image.new()
				img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
				img.lock()
				img.set_pixel(x, y, color) # Works
				img.unlock()
				img.set_pixel(x, y, color) # Does not have an effect
				[/codeblock]
				[b]Note:[/b] Some image methods can leave the image unlocked, making subsequent [method set_pixel] calls fail unless the image is locked again. Methods potentially unlocking the image: [method blend_rect], [method blend_rect_mask], [method blit_rect_mask], [method convert], [method fill], [method fill_rect], [method get_used_rect], and [method rgbe_to_srgb].
				[codeblock]
				img.lock()
				img.set_pixel(x, y, color) # Works
				img.fill(color) # Unlocks the image
				img.set_pixel(x, y, color) # Does not have an effect
				[/codeblock]
			</description>
		</method>
		<method name="set_pixelv">
			<return type="void" />
			<argument index="0" name="dst" type="Vector2" />
			<argument index="1" name="color" type="Color" />
			<description>
				Sets the [Color] of the pixel at [code](dst.x, dst.y)[/code] if the image is locked. Note that the [code]dst[/code] values must be integers. Example:
				[codeblock]
				var img = Image.new()
				img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
				img.lock()
				img.set_pixelv(Vector2(x, y), color) # Works
				img.unlock()
				img.set_pixelv(Vector2(x, y), color) # Does not have an effect
				[/codeblock]
				[b]Note:[/b] Some image methods can leave the image unlocked, making subsequent [method set_pixelv] calls fail unless the image is locked again. Methods potentially unlocking the image: [method blend_rect], [method blend_rect_mask], [method blit_rect_mask], [method convert], [method fill], [method fill_rect], [method get_used_rect], and [method rgbe_to_srgb].
				[codeblock]
				img.lock()
				img.set_pixelv(Vector2(x, y), color) # Works
				img.fill(dcolor) # Unlocks the image
				img.set_pixelv(Vector2(x, y), color) # Does not have an effect
				[/codeblock]
			</description>
		</method>
		<method name="shrink_x2">
			<return type="void" />
			<description>
				Shrinks the image by a factor of 2.
			</description>
		</method>
		<method name="srgb_to_linear">
			<return type="void" />
			<description>
				Converts the raw data from the sRGB colorspace to a linear scale.
			</description>
		</method>
		<method name="unlock">
			<return type="void" />
			<description>
				Unlocks the data and prevents changes.
			</description>
		</method>
	</methods>
	<members>
		<member name="data" type="Dictionary" setter="_set_data" getter="_get_data" default="{&quot;data&quot;: PoolByteArray(  ),&quot;format&quot;: &quot;Lum8&quot;,&quot;height&quot;: 0,&quot;mipmaps&quot;: false,&quot;width&quot;: 0}">
			Holds all the image's color data in a given format. See [enum Format] constants.
		</member>
	</members>
	<constants>
		<constant name="MAX_WIDTH" value="16384">
			The maximal width allowed for [Image] resources.
		</constant>
		<constant name="MAX_HEIGHT" value="16384">
			The maximal height allowed for [Image] resources.
		</constant>
		<constant name="FORMAT_L8" value="0" enum="Format">
			Texture format with a single 8-bit depth representing luminance.
		</constant>
		<constant name="FORMAT_LA8" value="1" enum="Format">
			OpenGL texture format with two values, luminance and alpha each stored with 8 bits.
		</constant>
		<constant name="FORMAT_R8" value="2" enum="Format">
			OpenGL texture format [code]RED[/code] with a single component and a bitdepth of 8.
			[b]Note:[/b] When using the GLES2 backend, this uses the alpha channel instead of the red channel for storage.
		</constant>
		<constant name="FORMAT_RG8" value="3" enum="Format">
			OpenGL texture format [code]RG[/code] with two components and a bitdepth of 8 for each.
		</constant>
		<constant name="FORMAT_RGB8" value="4" enum="Format">
			OpenGL texture format [code]RGB[/code] with three components, each with a bitdepth of 8.
			[b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_RGBA8" value="5" enum="Format">
			OpenGL texture format [code]RGBA[/code] with four components, each with a bitdepth of 8.
			[b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_RGBA4444" value="6" enum="Format">
			OpenGL texture format [code]RGBA[/code] with four components, each with a bitdepth of 4.
		</constant>
		<constant name="FORMAT_RGBA5551" value="7" enum="Format">
			OpenGL texture format [code]GL_RGB5_A1[/code] where 5 bits of depth for each component of RGB and one bit for alpha.
		</constant>
		<constant name="FORMAT_RF" value="8" enum="Format">
			OpenGL texture format [code]GL_R32F[/code] where there's one component, a 32-bit floating-point value.
		</constant>
		<constant name="FORMAT_RGF" value="9" enum="Format">
			OpenGL texture format [code]GL_RG32F[/code] where there are two components, each a 32-bit floating-point values.
		</constant>
		<constant name="FORMAT_RGBF" value="10" enum="Format">
			OpenGL texture format [code]GL_RGB32F[/code] where there are three components, each a 32-bit floating-point values.
		</constant>
		<constant name="FORMAT_RGBAF" value="11" enum="Format">
			OpenGL texture format [code]GL_RGBA32F[/code] where there are four components, each a 32-bit floating-point values.
		</constant>
		<constant name="FORMAT_RH" value="12" enum="Format">
			OpenGL texture format [code]GL_R32F[/code] where there's one component, a 16-bit "half-precision" floating-point value.
		</constant>
		<constant name="FORMAT_RGH" value="13" enum="Format">
			OpenGL texture format [code]GL_RG32F[/code] where there are two components, each a 16-bit "half-precision" floating-point value.
		</constant>
		<constant name="FORMAT_RGBH" value="14" enum="Format">
			OpenGL texture format [code]GL_RGB32F[/code] where there are three components, each a 16-bit "half-precision" floating-point value.
		</constant>
		<constant name="FORMAT_RGBAH" value="15" enum="Format">
			OpenGL texture format [code]GL_RGBA32F[/code] where there are four components, each a 16-bit "half-precision" floating-point value.
		</constant>
		<constant name="FORMAT_RGBE9995" value="16" enum="Format">
			A special OpenGL texture format where the three color components have 9 bits of precision and all three share a single 5-bit exponent.
		</constant>
		<constant name="FORMAT_DXT1" value="17" enum="Format">
			The [url=https://en.wikipedia.org/wiki/S3_Texture_Compression]S3TC[/url] texture format that uses Block Compression 1, and is the smallest variation of S3TC, only providing 1 bit of alpha and color data being premultiplied with alpha.
			[b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_DXT3" value="18" enum="Format">
			The [url=https://en.wikipedia.org/wiki/S3_Texture_Compression]S3TC[/url] texture format that uses Block Compression 2, and color data is interpreted as not having been premultiplied by alpha. Well suited for images with sharp alpha transitions between translucent and opaque areas.
			[b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_DXT5" value="19" enum="Format">
			The [url=https://en.wikipedia.org/wiki/S3_Texture_Compression]S3TC[/url] texture format also known as Block Compression 3 or BC3 that contains 64 bits of alpha channel data followed by 64 bits of DXT1-encoded color data. Color data is not premultiplied by alpha, same as DXT3. DXT5 generally produces superior results for transparent gradients compared to DXT3.
			[b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_RGTC_R" value="20" enum="Format">
			Texture format that uses [url=https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression]Red Green Texture Compression[/url], normalizing the red channel data using the same compression algorithm that DXT5 uses for the alpha channel.
		</constant>
		<constant name="FORMAT_RGTC_RG" value="21" enum="Format">
			Texture format that uses [url=https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression]Red Green Texture Compression[/url], normalizing the red and green channel data using the same compression algorithm that DXT5 uses for the alpha channel.
		</constant>
		<constant name="FORMAT_BPTC_RGBA" value="22" enum="Format">
			Texture format that uses [url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression]BPTC[/url] compression with unsigned normalized RGBA components.
			[b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_BPTC_RGBF" value="23" enum="Format">
			Texture format that uses [url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression]BPTC[/url] compression with signed floating-point RGB components.
		</constant>
		<constant name="FORMAT_BPTC_RGBFU" value="24" enum="Format">
			Texture format that uses [url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression]BPTC[/url] compression with unsigned floating-point RGB components.
		</constant>
		<constant name="FORMAT_PVRTC2" value="25" enum="Format">
			Texture format used on PowerVR-supported mobile platforms, uses 2-bit color depth with no alpha. More information can be found [url=https://en.wikipedia.org/wiki/PVRTC]here[/url].
			[b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_PVRTC2A" value="26" enum="Format">
			Same as [url=https://en.wikipedia.org/wiki/PVRTC]PVRTC2[/url], but with an alpha component.
		</constant>
		<constant name="FORMAT_PVRTC4" value="27" enum="Format">
			Similar to [url=https://en.wikipedia.org/wiki/PVRTC]PVRTC2[/url], but with 4-bit color depth and no alpha.
		</constant>
		<constant name="FORMAT_PVRTC4A" value="28" enum="Format">
			Same as [url=https://en.wikipedia.org/wiki/PVRTC]PVRTC4[/url], but with an alpha component.
		</constant>
		<constant name="FORMAT_ETC" value="29" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1]Ericsson Texture Compression format 1[/url], also referred to as "ETC1", and is part of the OpenGL ES graphics standard. This format cannot store an alpha channel.
		</constant>
		<constant name="FORMAT_ETC2_R11" value="30" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]R11_EAC[/code] variant), which provides one channel of unsigned data.
		</constant>
		<constant name="FORMAT_ETC2_R11S" value="31" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]SIGNED_R11_EAC[/code] variant), which provides one channel of signed data.
		</constant>
		<constant name="FORMAT_ETC2_RG11" value="32" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RG11_EAC[/code] variant), which provides two channels of unsigned data.
		</constant>
		<constant name="FORMAT_ETC2_RG11S" value="33" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]SIGNED_RG11_EAC[/code] variant), which provides two channels of signed data.
		</constant>
		<constant name="FORMAT_ETC2_RGB8" value="34" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RGB8[/code] variant), which is a follow-up of ETC1 and compresses RGB888 data.
			[b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_ETC2_RGBA8" value="35" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RGBA8[/code]variant), which compresses RGBA8888 data with full alpha support.
			[b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_ETC2_RGB8A1" value="36" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RGB8_PUNCHTHROUGH_ALPHA1[/code] variant), which compresses RGBA data to make alpha either fully transparent or fully opaque.
			[b]Note:[/b] When creating an [ImageTexture], an sRGB to linear color space conversion is performed.
		</constant>
		<constant name="FORMAT_MAX" value="37" enum="Format">
			Represents the size of the [enum Format] enum.
		</constant>
		<constant name="INTERPOLATE_NEAREST" value="0" enum="Interpolation">
			Performs nearest-neighbor interpolation. If the image is resized, it will be pixelated.
		</constant>
		<constant name="INTERPOLATE_BILINEAR" value="1" enum="Interpolation">
			Performs bilinear interpolation. If the image is resized, it will be blurry. This mode is faster than [constant INTERPOLATE_CUBIC], but it results in lower quality.
		</constant>
		<constant name="INTERPOLATE_CUBIC" value="2" enum="Interpolation">
			Performs cubic interpolation. If the image is resized, it will be blurry. This mode often gives better results compared to [constant INTERPOLATE_BILINEAR], at the cost of being slower.
		</constant>
		<constant name="INTERPOLATE_TRILINEAR" value="3" enum="Interpolation">
			Performs bilinear separately on the two most-suited mipmap levels, then linearly interpolates between them.
			It's slower than [constant INTERPOLATE_BILINEAR], but produces higher-quality results with far fewer aliasing artifacts.
			If the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image.
			[b]Note:[/b] If you intend to scale multiple copies of the original image, it's better to call [method generate_mipmaps]] on it in advance, to avoid wasting processing power in generating them again and again.
			On the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image.
		</constant>
		<constant name="INTERPOLATE_LANCZOS" value="4" enum="Interpolation">
			Performs Lanczos interpolation. This is the slowest image resizing mode, but it typically gives the best results, especially when downscalng images.
		</constant>
		<constant name="ALPHA_NONE" value="0" enum="AlphaMode">
			Image does not have alpha.
		</constant>
		<constant name="ALPHA_BIT" value="1" enum="AlphaMode">
			Image stores alpha in a single bit.
		</constant>
		<constant name="ALPHA_BLEND" value="2" enum="AlphaMode">
			Image uses alpha.
		</constant>
		<constant name="COMPRESS_S3TC" value="0" enum="CompressMode">
			Use S3TC compression.
		</constant>
		<constant name="COMPRESS_PVRTC2" value="1" enum="CompressMode">
			Use PVRTC2 compression.
		</constant>
		<constant name="COMPRESS_PVRTC4" value="2" enum="CompressMode">
			Use PVRTC4 compression.
		</constant>
		<constant name="COMPRESS_ETC" value="3" enum="CompressMode">
			Use ETC compression.
		</constant>
		<constant name="COMPRESS_ETC2" value="4" enum="CompressMode">
			Use ETC2 compression.
		</constant>
		<constant name="COMPRESS_BPTC" value="5" enum="CompressMode">
			Use BPTC compression.
		</constant>
		<constant name="COMPRESS_MAX" value="6" enum="CompressMode">
			Represents the size of the [enum CompressMode] enum.
		</constant>
		<constant name="COMPRESS_SOURCE_GENERIC" value="0" enum="CompressSource">
			Source texture (before compression) is a regular texture. Default for all textures.
		</constant>
		<constant name="COMPRESS_SOURCE_SRGB" value="1" enum="CompressSource">
			Source texture (before compression) is in sRGB space.
		</constant>
		<constant name="COMPRESS_SOURCE_NORMAL" value="2" enum="CompressSource">
			Source texture (before compression) is a normal texture (e.g. it can be compressed into two channels).
		</constant>
		<constant name="COMPRESS_SOURCE_LAYERED" value="3" enum="CompressSource">
			Source texture (before compression) is a [TextureLayered].
		</constant>
	</constants>
</class>
