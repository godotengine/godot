<?xml version="1.0" encoding="UTF-8" ?>
<class name="Variant" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		The most fundamental data type in Godot.
	</brief_description>
	<description>
		In computer programming, a [Variant] class is designed to store a variety of other types. Dynamic programming languages like PHP, Lua, JavaScript, and GDScript tend to use them to store the data of variables internally.

		Godot tracks all scripting API variables within variants. When a particular language enforces its own rules for keeping data typed, that language is applying its own custom logic over the base Variant scripting API:
		- GDScript automatically wraps values in them. It keeps all data in plain variants by default and then optionally enforces custom static typing rules on variable types.
		- C# is statically typed, but uses its own implementation of Variant when it needs to represent a dynamic value. A Variant can be assigned any compatible type implicitly, but converting requires an explicit cast.

		?? This allows Variants to facilitate communication between all of Godot's systems. These systems are all made more accessible in Godot.
		?? Using variants
		?? Their dynamic nature allows Variant types to simplify communication between all of Godot's systems.

		A [Variant] in Godot can store almost any data type inside of it. Those can be roughly categorized as:
		- The [code]null[/code] type. It represents no value, or nothing assigned, and is the default type. In Godot, all [code]void[/code] functions return [code]null[/code].
		- [b]Atomic[/b] types, the most basic data types in Godot: [bool], [int], [float], [String].
		- [b]Complex[/b] types, which consist of atomic types. They represent common structures like vectors and colors, and allow you to easily work with them: [Color], [Vector2], [Transform3D], etc.
		- [b]Container[/b] types, which can store multiple other variants, including other containers: [Dictionary], [Array]. This also includes packed arrays, which are like an [Array] that can only hold one type of data and handle it very efficiently: [PackedColorArray], [PackedInt32Array], etc.
		- The [Object] type, inherited by every object in Godot, such as [Node], [Resource], [Engine], etc.
		- Miscellaneous types that do not belong in a specific category: [Callable], [Signal], [RID], etc.
		In GDScript, to check the type of a variant, you can use the [code]is[/code] operator or [method @GlobalScope.typeof], which will return one of the [enum Variant.Type] constants.
		[codeblocks]
		[gdscript]
		var my_variant = 2
		if my_variant is int:
		    print("my_variant is an integer.")
		elif my_variant is Object:
		    print("my_variant is an object.)

		match typeof(my_variant):
		    TYPE_NIL:
		        print("my_variant is null.")
		    TYPE_INT:
		        print("my_variant is an integer.")
		    TYPE_OBJECT:
		        print("my_variant is a(n) %s." % my_variant.get_class())

		[/gdscript]
		[csharp]
		Variant my_variant = 2;
		switch (my_variant.VariantType)
		{
		    case Variant.Type.Nil:
		        GD.Print("my_variant is null");
		        break;
		    case Variant.Type.Int:
		        GD.Print("my_variant is an integer");
		        break;
		    case Variant.Type.Object:
				GD.Print("my_variant is an object");
		        break;
		}
		[/csharp]
		[/codeblocks]
		[b]Note:[/b] To get the name of the underlying Object type, see [method get_class()]. In C#, you can convert a [Variant] to a [code]GodotObject[/code] and use reflection to get its name.
		[codeblocks]
		[gdscript]
		print("obj is a(n) %s." % obj.get_class())
		[/gdscript]
		[csharp]
		GD.Print($"obj is a(n) {obj.AsGodotObject().GetType().Name}");
		[/csharp]
		[/codeblocks]

		Variants allow properties to change their type freely.
		[codeblocks]
		[gdscript]
		var my_variant = 2 # my_variant is dynamically an integer.
		my_variant = "Now my_variant is a string!"
		my_variant = RefCounted.new() # my_variant is now an Object.

		var number: int = 2 # bar is a statically typed integer.
		# number = "Uh oh! I can't change the type of statically typed variables!"
		[/gdscript]
		[csharp]
		// C# is statically typed. Once a variable has a type it cannot be changed.
		// You can use the `var` keyword to let the compiler infer the type automatically.
		var number = 2; // number is a 32-bit integer (int).
		// number = "number will always be an integer. It cannot be turned into a string!";
		var message = "boo is a string!";
		var ref = new RefCounted(); // var is especially useful when used together with a constructor.

		// Godot also provides a Variant type that works like a union of all the Variant-compatible types.
		Variant myVar = 2; // myVar is dynamically an integer (stored as a `long` in the Variant type).
		myVar = "Now myVar is a string!";
		myVar = new RefCounted(); // myVar is now a GodotObject.
		[/csharp]
		[/codeblocks]

		[b]Value VS. Reference[/b]
		Most variants are passed by [b]value[/b]: When assigned or passed in a function, an independent copy is created which does not affect the original.
		[codeblock]
		var first_number = 6
		var other_number = first_number

		first_number += 4

		print(first_number) # Prints 10
		print(other_number) # Prints 6
		[/codeblock]
		All container types and [Object]-inheriting types are passed by [b]reference[/b]: When assigned or passed in a function, the same reference is passed. Any changes applied to the new variable will also affect the original variable, as they both point to the same reference.
		[codeblock]
		var first_array = [2, 5, 0, 8]
		var other_array = first_array

		my_array.erase(0)

		print(first_array) # Prints [2, 5, 8]
		print(other_array) # Prints [2, 5, 8]
		[/codeblock]
		If necessary, most of these types also provide methods to create independent copies, such as [method Array.duplicate] and [method Node.duplicate]. To check if two references are the same, use [method @GlobalScope.is_same] or, for [Object] types, the equality ([code]==[/code]) operator.
	</description>
	<tutorials>
		<link title="Variant class introduction">$DOCS_URL/contributing/development/core_and_modules/variant_class.html</link>
	</tutorials>
</class>
