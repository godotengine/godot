<?xml version="1.0" encoding="UTF-8" ?>
<class name="Transform2D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A 2×3 matrix representing a 2D transformation.
	</brief_description>
	<description>
		A 2×3 matrix (2 rows, 3 columns) used for 2D linear transformations. It can represent transformations such as translation, rotation, and scaling. It consists of three [Vector2] values: [member x], [member y], and the [member origin].
		For more information, read the "Matrices and transforms" documentation article.
	</description>
	<tutorials>
		<link title="Math documentation index">$DOCS_URL/tutorials/math/index.html</link>
		<link title="Matrices and transforms">$DOCS_URL/tutorials/math/matrices_and_transforms.html</link>
		<link title="Matrix Transform Demo">https://godotengine.org/asset-library/asset/584</link>
		<link title="2.5D Demo">https://godotengine.org/asset-library/asset/583</link>
	</tutorials>
	<constructors>
		<constructor name="Transform2D">
			<return type="Transform2D" />
			<description>
				Constructs a default-initialized [Transform2D] set to [constant IDENTITY].
			</description>
		</constructor>
		<constructor name="Transform2D">
			<return type="Transform2D" />
			<param index="0" name="from" type="Transform2D" />
			<description>
				Constructs a [Transform2D] as a copy of the given [Transform2D].
			</description>
		</constructor>
		<constructor name="Transform2D">
			<return type="Transform2D" />
			<param index="0" name="rotation" type="float" />
			<param index="1" name="position" type="Vector2" />
			<description>
				Constructs the transform from a given angle (in radians) and position.
			</description>
		</constructor>
		<constructor name="Transform2D">
			<return type="Transform2D" />
			<param index="0" name="rotation" type="float" />
			<param index="1" name="scale" type="Vector2" />
			<param index="2" name="skew" type="float" />
			<param index="3" name="position" type="Vector2" />
			<description>
				Constructs the transform from a given angle (in radians), scale, skew (in radians) and position.
			</description>
		</constructor>
		<constructor name="Transform2D">
			<return type="Transform2D" />
			<param index="0" name="x_axis" type="Vector2" />
			<param index="1" name="y_axis" type="Vector2" />
			<param index="2" name="origin" type="Vector2" />
			<description>
				Constructs the transform from 3 [Vector2] values representing [member x], [member y], and the [member origin] (the three column vectors).
			</description>
		</constructor>
	</constructors>
	<methods>
		<method name="affine_inverse" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the inverse of the transform, under the assumption that the basis is invertible (must have non-zero determinant).
			</description>
		</method>
		<method name="basis_xform" qualifiers="const">
			<return type="Vector2" />
			<param index="0" name="v" type="Vector2" />
			<description>
				Returns a vector transformed (multiplied) by the basis matrix.
				This method does not account for translation (the [member origin] vector).
			</description>
		</method>
		<method name="basis_xform_inv" qualifiers="const">
			<return type="Vector2" />
			<param index="0" name="v" type="Vector2" />
			<description>
				Returns a vector transformed (multiplied) by the inverse basis matrix, under the assumption that the basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not).
				This method does not account for translation (the [member origin] vector).
				[code]transform.basis_xform_inv(vector)[/code] is equivalent to [code]transform.inverse().basis_xform(vector)[/code]. See [method inverse].
				For non-orthonormal transforms (e.g. with scaling) [code]transform.affine_inverse().basis_xform(vector)[/code] can be used instead. See [method affine_inverse].
			</description>
		</method>
		<method name="determinant" qualifiers="const">
			<return type="float" />
			<description>
				Returns the determinant of the basis matrix. If the basis is uniformly scaled, then its determinant equals the square of the scale factor.
				A negative determinant means the basis was flipped, so one part of the scale is negative. A zero determinant means the basis isn't invertible, and is usually considered invalid.
			</description>
		</method>
		<method name="get_origin" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the transform's origin (translation).
			</description>
		</method>
		<method name="get_rotation" qualifiers="const">
			<return type="float" />
			<description>
				Returns the transform's rotation (in radians).
			</description>
		</method>
		<method name="get_scale" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the scale.
			</description>
		</method>
		<method name="get_skew" qualifiers="const">
			<return type="float" />
			<description>
				Returns the transform's skew (in radians).
			</description>
		</method>
		<method name="interpolate_with" qualifiers="const">
			<return type="Transform2D" />
			<param index="0" name="xform" type="Transform2D" />
			<param index="1" name="weight" type="float" />
			<description>
				Returns a transform interpolated between this transform and another by a given [param weight] (on the range of 0.0 to 1.0).
			</description>
		</method>
		<method name="inverse" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the inverse of the transform, under the assumption that the transformation basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not). Use [method affine_inverse] for non-orthonormal transforms (e.g. with scaling).
			</description>
		</method>
		<method name="is_conformal" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the transform's basis is conformal, meaning it preserves angles and distance ratios, and may only be composed of rotation and uniform scale. Returns [code]false[/code] if the transform's basis has non-uniform scale or shear/skew. This can be used to validate if the transform is non-distorted, which is important for physics and other use cases.
			</description>
		</method>
		<method name="is_equal_approx" qualifiers="const">
			<return type="bool" />
			<param index="0" name="xform" type="Transform2D" />
			<description>
				Returns [code]true[/code] if this transform and [param xform] are approximately equal, by running [method @GlobalScope.is_equal_approx] on each component.
			</description>
		</method>
		<method name="is_finite" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if this transform is finite, by calling [method @GlobalScope.is_finite] on each component.
			</description>
		</method>
		<method name="looking_at" qualifiers="const">
			<return type="Transform2D" />
			<param index="0" name="target" type="Vector2" default="Vector2(0, 0)" />
			<description>
				Returns a copy of the transform rotated such that the rotated X-axis points towards the [param target] position.
				Operations take place in global space.
			</description>
		</method>
		<method name="orthonormalized" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors (scale of 1 or -1).
			</description>
		</method>
		<method name="rotated" qualifiers="const">
			<return type="Transform2D" />
			<param index="0" name="angle" type="float" />
			<description>
				Returns a copy of the transform rotated by the given [param angle] (in radians).
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding rotation transform [code]R[/code] from the left, i.e., [code]R * X[/code].
				This can be seen as transforming with respect to the global/parent frame.
			</description>
		</method>
		<method name="rotated_local" qualifiers="const">
			<return type="Transform2D" />
			<param index="0" name="angle" type="float" />
			<description>
				Returns a copy of the transform rotated by the given [param angle] (in radians).
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding rotation transform [code]R[/code] from the right, i.e., [code]X * R[/code].
				This can be seen as transforming with respect to the local frame.
			</description>
		</method>
		<method name="scaled" qualifiers="const">
			<return type="Transform2D" />
			<param index="0" name="scale" type="Vector2" />
			<description>
				Returns a copy of the transform scaled by the given [param scale] factor.
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding scaling transform [code]S[/code] from the left, i.e., [code]S * X[/code].
				This can be seen as transforming with respect to the global/parent frame.
			</description>
		</method>
		<method name="scaled_local" qualifiers="const">
			<return type="Transform2D" />
			<param index="0" name="scale" type="Vector2" />
			<description>
				Returns a copy of the transform scaled by the given [param scale] factor.
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding scaling transform [code]S[/code] from the right, i.e., [code]X * S[/code].
				This can be seen as transforming with respect to the local frame.
			</description>
		</method>
		<method name="translated" qualifiers="const">
			<return type="Transform2D" />
			<param index="0" name="offset" type="Vector2" />
			<description>
				Returns a copy of the transform translated by the given [param offset].
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding translation transform [code]T[/code] from the left, i.e., [code]T * X[/code].
				This can be seen as transforming with respect to the global/parent frame.
			</description>
		</method>
		<method name="translated_local" qualifiers="const">
			<return type="Transform2D" />
			<param index="0" name="offset" type="Vector2" />
			<description>
				Returns a copy of the transform translated by the given [param offset].
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding translation transform [code]T[/code] from the right, i.e., [code]X * T[/code].
				This can be seen as transforming with respect to the local frame.
			</description>
		</method>
	</methods>
	<members>
		<member name="origin" type="Vector2" setter="" getter="" default="Vector2(0, 0)">
			The origin vector (column 2, the third column). Equivalent to array index [code]2[/code]. The origin vector represents translation.
		</member>
		<member name="x" type="Vector2" setter="" getter="" default="Vector2(1, 0)">
			The basis matrix's X vector (column 0). Equivalent to array index [code]0[/code].
		</member>
		<member name="y" type="Vector2" setter="" getter="" default="Vector2(0, 1)">
			The basis matrix's Y vector (column 1). Equivalent to array index [code]1[/code].
		</member>
	</members>
	<constants>
		<constant name="IDENTITY" value="Transform2D(1, 0, 0, 1, 0, 0)">
			The identity [Transform2D] with no translation, rotation or scaling applied. When applied to other data structures, [constant IDENTITY] performs no transformation.
		</constant>
		<constant name="FLIP_X" value="Transform2D(-1, 0, 0, 1, 0, 0)">
			The [Transform2D] that will flip something along the X axis.
		</constant>
		<constant name="FLIP_Y" value="Transform2D(1, 0, 0, -1, 0, 0)">
			The [Transform2D] that will flip something along the Y axis.
		</constant>
	</constants>
	<operators>
		<operator name="operator !=">
			<return type="bool" />
			<param index="0" name="right" type="Transform2D" />
			<description>
				Returns [code]true[/code] if the transforms are not equal.
				[b]Note:[/b] Due to floating-point precision errors, consider using [method is_equal_approx] instead, which is more reliable.
			</description>
		</operator>
		<operator name="operator *">
			<return type="PackedVector2Array" />
			<param index="0" name="right" type="PackedVector2Array" />
			<description>
				Transforms (multiplies) each element of the [Vector2] array by the given [Transform2D] matrix.
			</description>
		</operator>
		<operator name="operator *">
			<return type="Rect2" />
			<param index="0" name="right" type="Rect2" />
			<description>
				Transforms (multiplies) the [Rect2] by the given [Transform2D] matrix.
			</description>
		</operator>
		<operator name="operator *">
			<return type="Transform2D" />
			<param index="0" name="right" type="Transform2D" />
			<description>
				Composes these two transformation matrices by multiplying them together. This has the effect of transforming the second transform (the child) by the first transform (the parent).
			</description>
		</operator>
		<operator name="operator *">
			<return type="Vector2" />
			<param index="0" name="right" type="Vector2" />
			<description>
				Transforms (multiplies) the [Vector2] by the given [Transform2D] matrix.
			</description>
		</operator>
		<operator name="operator *">
			<return type="Transform2D" />
			<param index="0" name="right" type="float" />
			<description>
				This operator multiplies all components of the [Transform2D], including the [member origin] vector, which scales it uniformly.
			</description>
		</operator>
		<operator name="operator *">
			<return type="Transform2D" />
			<param index="0" name="right" type="int" />
			<description>
				This operator multiplies all components of the [Transform2D], including the [member origin] vector, which scales it uniformly.
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<param index="0" name="right" type="Transform2D" />
			<description>
				Returns [code]true[/code] if the transforms are exactly equal.
				[b]Note:[/b] Due to floating-point precision errors, consider using [method is_equal_approx] instead, which is more reliable.
			</description>
		</operator>
		<operator name="operator []">
			<return type="Vector2" />
			<param index="0" name="index" type="int" />
			<description>
				Access transform components using their index. [code]t[0][/code] is equivalent to [code]t.x[/code], [code]t[1][/code] is equivalent to [code]t.y[/code], and [code]t[2][/code] is equivalent to [code]t.origin[/code].
			</description>
		</operator>
	</operators>
</class>
