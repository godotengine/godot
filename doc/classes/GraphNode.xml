<?xml version="1.0" encoding="UTF-8" ?>
<class name="GraphNode" inherits="GraphElement" experimental="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A [GraphElement] with attached [GraphPort]s.
	</brief_description>
	<description>
		[GraphNode] is an element for a [GraphEdit] graph with customizable content based on its child controls. [GraphNode] is derived from [Container] and it is responsible for placing its children on screen. This works similar to [VBoxContainer].
		Child controls marked with the "GraphNodeIgnored" meta tag will be ignored for layout purposes, and must be positioned manually.
		[b]Warning:[/b] This node expects its parent to be a [GraphEdit] node. If this is not the case, connections and some other behavior may not work as expected. Methods expected to fail are noted below.
		[b]Note:[/b] Prior to Godot 4.6, [GraphNode] behaved similarly to [GraphNodeIndexed].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_connection">
			<return type="void" />
			<param index="0" name="connection" type="GraphConnection" />
			<description>
				Adds a [param connection] to the [GraphEdit] associated with this node.
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node, or if neither [GraphPort] used by the [param connection] is attached to this node.
			</description>
		</method>
		<method name="add_connections">
			<return type="void" />
			<param index="0" name="connections" type="GraphConnection[]" />
			<description>
				Adds a list of [param connections] to the [GraphEdit] associated with this node.
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="add_node_to_titlebar">
			<return type="void" />
			<param index="0" name="node" type="Control" />
			<description>
				Adds a custom [param node] to the titlebar hbox.
				See also [method remove_node_from_titlebar] and [method clear_titlebar_nodes].
			</description>
		</method>
		<method name="add_port">
			<return type="void" />
			<param index="0" name="port" type="GraphPort" />
			<description>
				Adds or "attaches" a [param port] to this node. This [GraphNode] should be an ancestor of the [param port], or unexpected behavior may occur.
			</description>
		</method>
		<method name="clear_connections">
			<return type="void" />
			<description>
				Removes all connections to [GraphPort]s attached to this node.
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="clear_filtered_connections">
			<return type="void" />
			<param index="0" name="filter_direction" type="int" enum="GraphPort.PortDirection" />
			<description>
				Remove all connections to [GraphPort]s attached to this node that match the [param filter_direction].
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="clear_input_connections">
			<return type="void" />
			<description>
				Remove all connections to input [GraphPort]s attached to this node. Shorthand for [code]clear_filtered_connections(GraphPort.INPUT)[/code].
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="clear_output_connections">
			<return type="void" />
			<description>
				Remove all connections to output [GraphPort]s attached to this node. Shorthand for [code]clear_filtered_connections(GraphPort.OUTPUT)[/code].
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="clear_titlebar_nodes">
			<return type="void" />
			<description>
				Removes all custom nodes from the title bar.
				See also [method add_node_to_titlebar] and [method remove_node_from_titlebar].
			</description>
		</method>
		<method name="enabled_index_to_port_index" qualifiers="const">
			<return type="int" />
			<param index="0" name="enabled_port_index" type="int" />
			<description>
				Gets the attached [GraphPort] at [param enabled_port_index] indexing only enabled ports, then returns its index.
				Equivalent to calling [code]index_of_port(get_port(port_index, false))[/code].
			</description>
		</method>
		<method name="filtered_index_of_port" qualifiers="const">
			<return type="int" />
			<param index="0" name="port" type="GraphPort" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Returns the index of an attached [param port], indexing only ports that match its direction. Fails if the port is not part of this [GraphNode].
				If [param include_disabled] is [code]false[/code], indexes only *enabled* ports that match.
			</description>
		</method>
		<method name="get_connected_nodes" qualifiers="const">
			<return type="GraphNode[]" />
			<description>
				Returns an [Array] of all [GraphNode]s with connections to [GraphPort]s attached to this node.
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="get_connections" qualifiers="const">
			<return type="GraphConnection[]" />
			<description>
				Returns an [Array] of all [GraphConnection]s to [GraphPort]s attached to this node.
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="get_filtered_connected_nodes" qualifiers="const">
			<return type="GraphNode[]" />
			<param index="0" name="filter_direction" type="int" enum="GraphPort.PortDirection" />
			<description>
				Returns an [Array] of all [GraphNode]s with connections to [GraphPort]s attached to this node that match the [param filter_direction].
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="get_filtered_connections" qualifiers="const">
			<return type="GraphConnection[]" />
			<param index="0" name="filter_direction" type="int" enum="GraphPort.PortDirection" />
			<description>
				Returns an [Array] of all [GraphConnection]s to [GraphPort]s attached to this node that match the [param filter_direction].
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="get_filtered_port" qualifiers="const">
			<return type="GraphPort" />
			<param index="0" name="port_index" type="int" />
			<param index="1" name="filter_direction" type="int" enum="GraphPort.PortDirection" />
			<param index="2" name="include_disabled" type="bool" default="true" />
			<description>
				Returns the attached [GraphPort] at [param port_index], indexing only ports that match the [param filter_direction].
				If [param include_disabled] is [code]false[/code], indexes only *enabled* ports that match.
			</description>
		</method>
		<method name="get_filtered_port_count" qualifiers="const">
			<return type="int" />
			<param index="0" name="filter_direction" type="int" enum="GraphPort.PortDirection" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Returns the number of attached [GraphPort]s that match the [param filter_direction].
				If [param include_disabled] is [code]false[/code], counts only enabled ports.
			</description>
		</method>
		<method name="get_filtered_ports" qualifiers="const">
			<return type="GraphPort[]" />
			<param index="0" name="filter_direction" type="int" enum="GraphPort.PortDirection" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Returns an array of all attached [GraphPort]s that match the [param filter_direction].
				If [param include_disabled] is [code]false[/code], returns only enabled ports.
			</description>
		</method>
		<method name="get_input_connected_nodes" qualifiers="const">
			<return type="GraphNode[]" />
			<description>
				Returns an [Array] of all [GraphNode]s with connections to input [GraphPort]s attached to this node. Shorthand for [code]get_filtered_connected_nodes(GraphPort.INPUT)[/code].
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="get_input_connections" qualifiers="const">
			<return type="GraphConnection[]" />
			<description>
				Returns an [Array] of all [GraphConnection]s to input [GraphPort]s attached to this node. Shorthand for [code]get_filtered_connections(GraphPort.INPUT)[/code].
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="get_input_port" qualifiers="const">
			<return type="GraphPort" />
			<param index="0" name="port_index" type="int" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Returns the input [GraphPort] at [param port_index]. Shorthand for [code]get_filtered_port(GraphPort.INPUT, include_disabled)[/code].
			</description>
		</method>
		<method name="get_input_port_count" qualifiers="const">
			<return type="int" />
			<param index="0" name="include_disabled" type="bool" default="true" />
			<description>
				Returns the number of input [GraphPort]s attached to this node. Shorthand for [code]get_filtered_port_count(GraphPort.INPUT, include_disabled)[/code].
			</description>
		</method>
		<method name="get_input_ports" qualifiers="const">
			<return type="GraphPort[]" />
			<param index="0" name="include_disabled" type="bool" default="true" />
			<description>
				Returns an [Array] of all input [GraphPort]s attached to this node. Shorthand for [code]get_filtered_ports(GraphPort.INPUT, include_disabled)[/code].
			</description>
		</method>
		<method name="get_next_matching_port" qualifiers="const">
			<return type="GraphPort" />
			<param index="0" name="port" type="GraphPort" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Given a [param port] attached to this node, returns the next [GraphPort] with the same direction, if one exists.
				If [param include_disabled] is [code]false[/code], returns the next enabled [GraphPort] with the same direction.
				See also [method get_previous_matching_port].
			</description>
		</method>
		<method name="get_next_port" qualifiers="const">
			<return type="GraphPort" />
			<param index="0" name="port" type="GraphPort" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Given a [param port] attached to this node, returns the next [GraphPort], if one exists.
				If [param include_disabled] is [code]false[/code], returns the next enabled [GraphPort].
				See also [method get_previous_port] and [method get_next_matching_port].
			</description>
		</method>
		<method name="get_output_connected_nodes" qualifiers="const">
			<return type="GraphNode[]" />
			<description>
				Returns an [Array] of all [GraphNode]s with connections to output [GraphPort]s attached to this node. Shorthand for [code]get_filtered_connected_nodes(GraphPort.OUTPUT)[/code].
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="get_output_connections" qualifiers="const">
			<return type="GraphConnection[]" />
			<description>
				Returns an [Array] of all [GraphConnection]s to output [GraphPort]s attached to this node. Shorthand for [code]get_filtered_connections(GraphPort.OUTPUT)[/code].
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node.
			</description>
		</method>
		<method name="get_output_port" qualifiers="const">
			<return type="GraphPort" />
			<param index="0" name="port_index" type="int" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Returns the output [GraphPort] at [param port_index]. Shorthand for [code]get_filtered_port(GraphPort.OUTPUT, include_disabled)[/code]
			</description>
		</method>
		<method name="get_output_port_count" qualifiers="const">
			<return type="int" />
			<param index="0" name="include_disabled" type="bool" default="true" />
			<description>
				Returns the number of output [GraphPort]s attached to this node. Shorthand for [code]get_filtered_port_count(GraphPort.OUTPUT, include_disabled)[/code].
			</description>
		</method>
		<method name="get_output_ports" qualifiers="const">
			<return type="GraphPort[]" />
			<param index="0" name="include_disabled" type="bool" default="true" />
			<description>
				Returns an [Array] of all output [GraphPort]s attached to this node. Shorthand for [code]get_filtered_ports(GraphPort.OUTPUT, include_disabled)[/code].
			</description>
		</method>
		<method name="get_port" qualifiers="const">
			<return type="GraphPort" />
			<param index="0" name="port_index" type="int" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Returns the attached [GraphPort] at [param port_index].
				If [param include_disabled] is [code]false[/code], indexes only enabled ports.
			</description>
		</method>
		<method name="get_port_count" qualifiers="const">
			<return type="int" />
			<param index="0" name="include_disabled" type="bool" default="true" />
			<description>
				Returns the number of [GraphPort]s attached to this node.
				If [param include_disabled] is [code]false[/code], returns the number of enabled [GraphPort]s.
			</description>
		</method>
		<method name="get_port_navigation" qualifiers="const">
			<return type="GraphPort" />
			<param index="0" name="side" type="int" enum="Side" />
			<param index="1" name="port" type="GraphPort" />
			<description>
				Given a [param port] attached to this node, returns the port a user would navigate to on the given [param side] using keyboard navigation.
				If no appropriate port exists, returns [code]null[/code]. Returned ports will always be enabled.
			</description>
		</method>
		<method name="get_previous_matching_port" qualifiers="const">
			<return type="GraphPort" />
			<param index="0" name="port" type="GraphPort" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Given a [param port] attached to this node, returns the previous [GraphPort] with the same direction, if one exists.
				If [param include_disabled] is [code]false[/code], returns the previous enabled [GraphPort] with the same direction.
				See also [method get_next_matching_port].
			</description>
		</method>
		<method name="get_previous_port" qualifiers="const">
			<return type="GraphPort" />
			<param index="0" name="port" type="GraphPort" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Given a [param port] attached to this node, returns the previous [GraphPort], if one exists.
				If [param include_disabled] is [code]false[/code], returns the previous enabled [GraphPort].
				See also [method get_next_port] and [method get_previous_matching_port].
			</description>
		</method>
		<method name="get_titlebar_hbox" qualifiers="const">
			<return type="HBoxContainer" />
			<description>
				Returns the [HBoxContainer] used for the title bar, only containing a [Label] for displaying the title by default. This can be used to add custom controls to the title bar such as option or close buttons.
			</description>
		</method>
		<method name="has_connection" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if any attached [GraphPort] has a connection in the graph.
			</description>
		</method>
		<method name="index_of_port" qualifiers="const">
			<return type="int" />
			<param index="0" name="port" type="GraphPort" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Returns the index of an attached [param port]. Fails if the port is not part of this [GraphNode].
				If [param include_disabled] is [code]false[/code], indexes only enabled ports.
			</description>
		</method>
		<method name="insert_port">
			<return type="void" />
			<param index="0" name="port_index" type="int" />
			<param index="1" name="port" type="GraphPort" />
			<param index="2" name="include_disabled" type="bool" default="true" />
			<description>
				Adds a [param port] at the given [param port_index].
				If [param include_disabled] is [code]false[/code], indexes only enabled ports.
			</description>
		</method>
		<method name="is_connected_to" qualifiers="const">
			<return type="bool" />
			<param index="0" name="node" type="GraphNode" />
			<description>
				Returns [code]true[/code] if any attached [GraphPort] has a connection in the graph to any other [GraphPort] on the given [param node].
			</description>
		</method>
		<method name="port_index_to_enabled_index" qualifiers="const">
			<return type="int" />
			<param index="0" name="port_index" type="int" />
			<description>
				Gets the attached [GraphPort] at [param port_index], then returns its index among only enabled [GraphPort]s.
				Equivalent to calling [code]index_of_port(get_port(port_index), false)[/code].
			</description>
		</method>
		<method name="remove_all_ports">
			<return type="void" />
			<description>
				Detaches all [GraphPort]s.
			</description>
		</method>
		<method name="remove_connection">
			<return type="void" />
			<param index="0" name="connection" type="GraphConnection" />
			<description>
				Removes a [param connection] from the node.
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node, or if neither [GraphPort] used by the [param connection] is attached to this node.
			</description>
		</method>
		<method name="remove_node_from_titlebar">
			<return type="void" />
			<param index="0" name="node" type="Control" />
			<description>
				Removes a custom [param node] from the titlebar hbox.
				See also [method add_node_to_titlebar] and [method clear_titlebar_nodes].
			</description>
		</method>
		<method name="remove_port">
			<return type="GraphPort" />
			<param index="0" name="port_index" type="int" />
			<param index="1" name="include_disabled" type="bool" default="true" />
			<description>
				Removes the attached [GraphPort] at [param port_index].
				If [param include_disabled] is [code]false[/code], indexes only enabled ports.
			</description>
		</method>
		<method name="set_connections">
			<return type="void" />
			<param index="0" name="connections" type="GraphConnection[]" />
			<description>
				Removes all existing connections from each [GraphPort] attached to this node, then adds all [param connections] to the graph.
				[b]Note:[/b] Fails if this [GraphNode] is not the child of a [GraphEdit] node. Each connection in [param connections] fails to be added if neither of its referenced [GraphPort]s are attached to this node.
			</description>
		</method>
		<method name="set_port">
			<return type="GraphPort" />
			<param index="0" name="port_index" type="int" />
			<param index="1" name="port" type="GraphPort" />
			<param index="2" name="include_disabled" type="bool" default="true" />
			<description>
				Replaces the attached [GraphPort] at index [param port_index] with [param port].
				If [param include_disabled] is [code]false[/code], indexes only enabled ports.
			</description>
		</method>
	</methods>
	<members>
		<member name="focus_mode" type="int" setter="set_focus_mode" getter="get_focus_mode" overrides="Control" enum="Control.FocusMode" default="3" />
		<member name="hide_title" type="bool" setter="set_hide_title" getter="is_title_hidden" default="false">
			If [code]true[/code], the GraphNode's title bar will not be drawn and will be ignored in layout calculations.
		</member>
		<member name="ignore_invalid_connection_type" type="bool" setter="set_ignore_invalid_connection_type" getter="is_ignoring_valid_connection_type" default="false">
			If [code]true[/code], you can connect ports with different types, even if the connection was not explicitly allowed in the parent [GraphEdit].
		</member>
		<member name="mouse_filter" type="int" setter="set_mouse_filter" getter="get_mouse_filter" overrides="Control" enum="Control.MouseFilter" default="0" />
		<member name="ports" type="GraphPort[]" setter="set_ports" getter="get_ports" default="[]">
			The [Array] of [GraphPort]s attached to this node.
		</member>
		<member name="title" type="String" setter="set_title" getter="get_title" default="&quot;&quot;">
			The text displayed in the GraphNode's title bar.
		</member>
	</members>
	<signals>
		<signal name="connected">
			<param index="0" name="connection" type="GraphConnection" />
			<description>
				Emitted when [param connection] is connected to an attached [GraphPort].
			</description>
		</signal>
		<signal name="disconnected">
			<param index="0" name="connection" type="GraphConnection" />
			<description>
				Emitted when [param connection] is disconnected from an attached [GraphPort].
			</description>
		</signal>
		<signal name="ports_updated">
			<param index="0" name="node" type="GraphNode" />
			<description>
				Emitted when the list of attached [GraphPort]s changes, or when a property on any attached port is changed.
			</description>
		</signal>
	</signals>
	<theme_items>
		<theme_item name="resizer_color" data_type="color" type="Color" default="Color(0.875, 0.875, 0.875, 1)">
			The color modulation applied to the resizer icon.
		</theme_item>
		<theme_item name="port_h_offset" data_type="constant" type="int" default="0">
			Horizontal offset for the ports.
		</theme_item>
		<theme_item name="separation" data_type="constant" type="int" default="2">
			The vertical distance between ports.
		</theme_item>
		<theme_item name="panel" data_type="style" type="StyleBox">
			The default background for the slot area of the [GraphNode].
		</theme_item>
		<theme_item name="panel_focus" data_type="style" type="StyleBox">
			[StyleBox] used when the [GraphNode] is focused (when used with assistive apps).
		</theme_item>
		<theme_item name="panel_selected" data_type="style" type="StyleBox">
			The [StyleBox] used for the slot area when selected.
		</theme_item>
		<theme_item name="titlebar" data_type="style" type="StyleBox">
			The [StyleBox] used for the title bar of the [GraphNode].
		</theme_item>
		<theme_item name="titlebar_selected" data_type="style" type="StyleBox">
			The [StyleBox] used for the title bar of the [GraphNode] when it is selected.
		</theme_item>
	</theme_items>
</class>
