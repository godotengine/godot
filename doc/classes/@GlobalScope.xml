<?xml version="1.0" encoding="UTF-8" ?>
<class name="@GlobalScope" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Global scope constants and variables.
	</brief_description>
	<description>
		Global scope constants and variables. This is all that resides in the globals, constants regarding error codes, scancodes, property hints, etc.
		Singletons are also documented here, since they can be accessed from anywhere.
	</description>
	<tutorials>
	</tutorials>
	<methods>
	</methods>
	<members>
		<member name="ARVRServer" type="ARVRServer" setter="" getter="">
			The [ARVRServer] singleton.
		</member>
		<member name="AudioServer" type="AudioServer" setter="" getter="">
			The [AudioServer] singleton.
		</member>
		<member name="CameraServer" type="CameraServer" setter="" getter="">
			The [CameraServer] singleton.
		</member>
		<member name="ClassDB" type="ClassDB" setter="" getter="">
			The [ClassDB] singleton.
		</member>
		<member name="Engine" type="Engine" setter="" getter="">
			The [Engine] singleton.
		</member>
		<member name="Geometry" type="Geometry" setter="" getter="">
			The [Geometry] singleton.
		</member>
		<member name="IP" type="IP" setter="" getter="">
			The [IP] singleton.
		</member>
		<member name="Input" type="Input" setter="" getter="">
			The [Input] singleton.
		</member>
		<member name="InputMap" type="InputMap" setter="" getter="">
			The [InputMap] singleton.
		</member>
		<member name="JSON" type="JSON" setter="" getter="">
			The [JSON] singleton.
		</member>
		<member name="JavaClassWrapper" type="JavaClassWrapper" setter="" getter="">
			The [JavaClassWrapper] singleton.
			[b]Note:[/b] Only implemented on Android.
		</member>
		<member name="JavaScript" type="JavaScript" setter="" getter="">
			The [JavaScript] singleton.
			[b]Note:[/b] Only implemented on HTML5.
		</member>
		<member name="Marshalls" type="Marshalls" setter="" getter="">
			The [Marshalls] singleton.
		</member>
		<member name="Navigation2DServer" type="Navigation2DServer" setter="" getter="">
			The [Navigation2DServer] singleton.
		</member>
		<member name="NavigationMeshGenerator" type="NavigationMeshGenerator" setter="" getter="">
			The [NavigationMeshGenerator] singleton.
		</member>
		<member name="NavigationServer" type="NavigationServer" setter="" getter="">
			The [NavigationServer] singleton.
		</member>
		<member name="OS" type="OS" setter="" getter="">
			The [OS] singleton.
		</member>
		<member name="Performance" type="Performance" setter="" getter="">
			The [Performance] singleton.
		</member>
		<member name="Physics2DServer" type="Physics2DServer" setter="" getter="">
			The [Physics2DServer] singleton.
		</member>
		<member name="PhysicsServer" type="PhysicsServer" setter="" getter="">
			The [PhysicsServer] singleton.
		</member>
		<member name="ProjectSettings" type="ProjectSettings" setter="" getter="">
			The [ProjectSettings] singleton.
		</member>
		<member name="ResourceLoader" type="ResourceLoader" setter="" getter="">
			The [ResourceLoader] singleton.
		</member>
		<member name="ResourceSaver" type="ResourceSaver" setter="" getter="">
			The [ResourceSaver] singleton.
		</member>
		<member name="Time" type="Time" setter="" getter="">
			The [Time] singleton.
		</member>
		<member name="TranslationServer" type="TranslationServer" setter="" getter="">
			The [TranslationServer] singleton.
		</member>
		<member name="VisualScriptEditor" type="VisualScriptEditor" setter="" getter="">
			The [VisualScriptEditor] singleton.
		</member>
		<member name="VisualServer" type="VisualServer" setter="" getter="">
			The [VisualServer] singleton.
		</member>
	</members>
	<constants>
		<constant name="MARGIN_LEFT" value="0" enum="Margin">
			Left margin, usually used for [Control] or [StyleBox]-derived classes.
		</constant>
		<constant name="MARGIN_TOP" value="1" enum="Margin">
			Top margin, usually used for [Control] or [StyleBox]-derived classes.
		</constant>
		<constant name="MARGIN_RIGHT" value="2" enum="Margin">
			Right margin, usually used for [Control] or [StyleBox]-derived classes.
		</constant>
		<constant name="MARGIN_BOTTOM" value="3" enum="Margin">
			Bottom margin, usually used for [Control] or [StyleBox]-derived classes.
		</constant>
		<constant name="CORNER_TOP_LEFT" value="0" enum="Corner">
			Top-left corner.
		</constant>
		<constant name="CORNER_TOP_RIGHT" value="1" enum="Corner">
			Top-right corner.
		</constant>
		<constant name="CORNER_BOTTOM_RIGHT" value="2" enum="Corner">
			Bottom-right corner.
		</constant>
		<constant name="CORNER_BOTTOM_LEFT" value="3" enum="Corner">
			Bottom-left corner.
		</constant>
		<constant name="VERTICAL" value="1" enum="Orientation">
			General vertical alignment, usually used for [Separator], [ScrollBar], [Slider], etc.
		</constant>
		<constant name="HORIZONTAL" value="0" enum="Orientation">
			General horizontal alignment, usually used for [Separator], [ScrollBar], [Slider], etc.
		</constant>
		<constant name="HALIGN_LEFT" value="0" enum="HAlign">
			Horizontal left alignment, usually for text-derived classes.
		</constant>
		<constant name="HALIGN_CENTER" value="1" enum="HAlign">
			Horizontal center alignment, usually for text-derived classes.
		</constant>
		<constant name="HALIGN_RIGHT" value="2" enum="HAlign">
			Horizontal right alignment, usually for text-derived classes.
		</constant>
		<constant name="VALIGN_TOP" value="0" enum="VAlign">
			Vertical top alignment, usually for text-derived classes.
		</constant>
		<constant name="VALIGN_CENTER" value="1" enum="VAlign">
			Vertical center alignment, usually for text-derived classes.
		</constant>
		<constant name="VALIGN_BOTTOM" value="2" enum="VAlign">
			Vertical bottom alignment, usually for text-derived classes.
		</constant>
		<constant name="SPKEY" value="16777216">
			Scancodes with this bit applied are non-printable.
		</constant>
		<constant name="KEY_ESCAPE" value="16777217" enum="KeyList">
			Escape key.
		</constant>
		<constant name="KEY_TAB" value="16777218" enum="KeyList">
			Tab key.
		</constant>
		<constant name="KEY_BACKTAB" value="16777219" enum="KeyList">
			Shift + Tab key.
		</constant>
		<constant name="KEY_BACKSPACE" value="16777220" enum="KeyList">
			Backspace key.
		</constant>
		<constant name="KEY_ENTER" value="16777221" enum="KeyList">
			Return key (on the main keyboard).
		</constant>
		<constant name="KEY_KP_ENTER" value="16777222" enum="KeyList">
			Enter key on the numeric keypad.
		</constant>
		<constant name="KEY_INSERT" value="16777223" enum="KeyList">
			Insert key.
		</constant>
		<constant name="KEY_DELETE" value="16777224" enum="KeyList">
			Delete key.
		</constant>
		<constant name="KEY_PAUSE" value="16777225" enum="KeyList">
			Pause key.
		</constant>
		<constant name="KEY_PRINT" value="16777226" enum="KeyList">
			Print Screen key.
		</constant>
		<constant name="KEY_SYSREQ" value="16777227" enum="KeyList">
			System Request key.
		</constant>
		<constant name="KEY_CLEAR" value="16777228" enum="KeyList">
			Clear key.
		</constant>
		<constant name="KEY_HOME" value="16777229" enum="KeyList">
			Home key.
		</constant>
		<constant name="KEY_END" value="16777230" enum="KeyList">
			End key.
		</constant>
		<constant name="KEY_LEFT" value="16777231" enum="KeyList">
			Left arrow key.
		</constant>
		<constant name="KEY_UP" value="16777232" enum="KeyList">
			Up arrow key.
		</constant>
		<constant name="KEY_RIGHT" value="16777233" enum="KeyList">
			Right arrow key.
		</constant>
		<constant name="KEY_DOWN" value="16777234" enum="KeyList">
			Down arrow key.
		</constant>
		<constant name="KEY_PAGEUP" value="16777235" enum="KeyList">
			Page Up key.
		</constant>
		<constant name="KEY_PAGEDOWN" value="16777236" enum="KeyList">
			Page Down key.
		</constant>
		<constant name="KEY_SHIFT" value="16777237" enum="KeyList">
			Shift key.
		</constant>
		<constant name="KEY_CONTROL" value="16777238" enum="KeyList">
			Control key.
		</constant>
		<constant name="KEY_META" value="16777239" enum="KeyList">
			Meta key.
		</constant>
		<constant name="KEY_ALT" value="16777240" enum="KeyList">
			Alt key.
		</constant>
		<constant name="KEY_CAPSLOCK" value="16777241" enum="KeyList">
			Caps Lock key.
		</constant>
		<constant name="KEY_NUMLOCK" value="16777242" enum="KeyList">
			Num Lock key.
		</constant>
		<constant name="KEY_SCROLLLOCK" value="16777243" enum="KeyList">
			Scroll Lock key.
		</constant>
		<constant name="KEY_F1" value="16777244" enum="KeyList">
			F1 key.
		</constant>
		<constant name="KEY_F2" value="16777245" enum="KeyList">
			F2 key.
		</constant>
		<constant name="KEY_F3" value="16777246" enum="KeyList">
			F3 key.
		</constant>
		<constant name="KEY_F4" value="16777247" enum="KeyList">
			F4 key.
		</constant>
		<constant name="KEY_F5" value="16777248" enum="KeyList">
			F5 key.
		</constant>
		<constant name="KEY_F6" value="16777249" enum="KeyList">
			F6 key.
		</constant>
		<constant name="KEY_F7" value="16777250" enum="KeyList">
			F7 key.
		</constant>
		<constant name="KEY_F8" value="16777251" enum="KeyList">
			F8 key.
		</constant>
		<constant name="KEY_F9" value="16777252" enum="KeyList">
			F9 key.
		</constant>
		<constant name="KEY_F10" value="16777253" enum="KeyList">
			F10 key.
		</constant>
		<constant name="KEY_F11" value="16777254" enum="KeyList">
			F11 key.
		</constant>
		<constant name="KEY_F12" value="16777255" enum="KeyList">
			F12 key.
		</constant>
		<constant name="KEY_F13" value="16777256" enum="KeyList">
			F13 key.
		</constant>
		<constant name="KEY_F14" value="16777257" enum="KeyList">
			F14 key.
		</constant>
		<constant name="KEY_F15" value="16777258" enum="KeyList">
			F15 key.
		</constant>
		<constant name="KEY_F16" value="16777259" enum="KeyList">
			F16 key.
		</constant>
		<constant name="KEY_KP_MULTIPLY" value="16777345" enum="KeyList">
			Multiply (*) key on the numeric keypad.
		</constant>
		<constant name="KEY_KP_DIVIDE" value="16777346" enum="KeyList">
			Divide (/) key on the numeric keypad.
		</constant>
		<constant name="KEY_KP_SUBTRACT" value="16777347" enum="KeyList">
			Subtract (-) key on the numeric keypad.
		</constant>
		<constant name="KEY_KP_PERIOD" value="16777348" enum="KeyList">
			Period (.) key on the numeric keypad.
		</constant>
		<constant name="KEY_KP_ADD" value="16777349" enum="KeyList">
			Add (+) key on the numeric keypad.
		</constant>
		<constant name="KEY_KP_0" value="16777350" enum="KeyList">
			Number 0 on the numeric keypad.
		</constant>
		<constant name="KEY_KP_1" value="16777351" enum="KeyList">
			Number 1 on the numeric keypad.
		</constant>
		<constant name="KEY_KP_2" value="16777352" enum="KeyList">
			Number 2 on the numeric keypad.
		</constant>
		<constant name="KEY_KP_3" value="16777353" enum="KeyList">
			Number 3 on the numeric keypad.
		</constant>
		<constant name="KEY_KP_4" value="16777354" enum="KeyList">
			Number 4 on the numeric keypad.
		</constant>
		<constant name="KEY_KP_5" value="16777355" enum="KeyList">
			Number 5 on the numeric keypad.
		</constant>
		<constant name="KEY_KP_6" value="16777356" enum="KeyList">
			Number 6 on the numeric keypad.
		</constant>
		<constant name="KEY_KP_7" value="16777357" enum="KeyList">
			Number 7 on the numeric keypad.
		</constant>
		<constant name="KEY_KP_8" value="16777358" enum="KeyList">
			Number 8 on the numeric keypad.
		</constant>
		<constant name="KEY_KP_9" value="16777359" enum="KeyList">
			Number 9 on the numeric keypad.
		</constant>
		<constant name="KEY_SUPER_L" value="16777260" enum="KeyList">
			Left Super key (Windows key).
		</constant>
		<constant name="KEY_SUPER_R" value="16777261" enum="KeyList">
			Right Super key (Windows key).
		</constant>
		<constant name="KEY_MENU" value="16777262" enum="KeyList">
			Context menu key.
		</constant>
		<constant name="KEY_HYPER_L" value="16777263" enum="KeyList">
			Left Hyper key.
		</constant>
		<constant name="KEY_HYPER_R" value="16777264" enum="KeyList">
			Right Hyper key.
		</constant>
		<constant name="KEY_HELP" value="16777265" enum="KeyList">
			Help key.
		</constant>
		<constant name="KEY_DIRECTION_L" value="16777266" enum="KeyList">
			Left Direction key.
		</constant>
		<constant name="KEY_DIRECTION_R" value="16777267" enum="KeyList">
			Right Direction key.
		</constant>
		<constant name="KEY_BACK" value="16777280" enum="KeyList">
			Media back key. Not to be confused with the Back button on an Android device.
		</constant>
		<constant name="KEY_FORWARD" value="16777281" enum="KeyList">
			Media forward key.
		</constant>
		<constant name="KEY_STOP" value="16777282" enum="KeyList">
			Media stop key.
		</constant>
		<constant name="KEY_REFRESH" value="16777283" enum="KeyList">
			Media refresh key.
		</constant>
		<constant name="KEY_VOLUMEDOWN" value="16777284" enum="KeyList">
			Volume down key.
		</constant>
		<constant name="KEY_VOLUMEMUTE" value="16777285" enum="KeyList">
			Mute volume key.
		</constant>
		<constant name="KEY_VOLUMEUP" value="16777286" enum="KeyList">
			Volume up key.
		</constant>
		<constant name="KEY_BASSBOOST" value="16777287" enum="KeyList">
			Bass Boost key.
		</constant>
		<constant name="KEY_BASSUP" value="16777288" enum="KeyList">
			Bass up key.
		</constant>
		<constant name="KEY_BASSDOWN" value="16777289" enum="KeyList">
			Bass down key.
		</constant>
		<constant name="KEY_TREBLEUP" value="16777290" enum="KeyList">
			Treble up key.
		</constant>
		<constant name="KEY_TREBLEDOWN" value="16777291" enum="KeyList">
			Treble down key.
		</constant>
		<constant name="KEY_MEDIAPLAY" value="16777292" enum="KeyList">
			Media play key.
		</constant>
		<constant name="KEY_MEDIASTOP" value="16777293" enum="KeyList">
			Media stop key.
		</constant>
		<constant name="KEY_MEDIAPREVIOUS" value="16777294" enum="KeyList">
			Previous song key.
		</constant>
		<constant name="KEY_MEDIANEXT" value="16777295" enum="KeyList">
			Next song key.
		</constant>
		<constant name="KEY_MEDIARECORD" value="16777296" enum="KeyList">
			Media record key.
		</constant>
		<constant name="KEY_HOMEPAGE" value="16777297" enum="KeyList">
			Home page key.
		</constant>
		<constant name="KEY_FAVORITES" value="16777298" enum="KeyList">
			Favorites key.
		</constant>
		<constant name="KEY_SEARCH" value="16777299" enum="KeyList">
			Search key.
		</constant>
		<constant name="KEY_STANDBY" value="16777300" enum="KeyList">
			Standby key.
		</constant>
		<constant name="KEY_OPENURL" value="16777301" enum="KeyList">
			Open URL / Launch Browser key.
		</constant>
		<constant name="KEY_LAUNCHMAIL" value="16777302" enum="KeyList">
			Launch Mail key.
		</constant>
		<constant name="KEY_LAUNCHMEDIA" value="16777303" enum="KeyList">
			Launch Media key.
		</constant>
		<constant name="KEY_LAUNCH0" value="16777304" enum="KeyList">
			Launch Shortcut 0 key.
		</constant>
		<constant name="KEY_LAUNCH1" value="16777305" enum="KeyList">
			Launch Shortcut 1 key.
		</constant>
		<constant name="KEY_LAUNCH2" value="16777306" enum="KeyList">
			Launch Shortcut 2 key.
		</constant>
		<constant name="KEY_LAUNCH3" value="16777307" enum="KeyList">
			Launch Shortcut 3 key.
		</constant>
		<constant name="KEY_LAUNCH4" value="16777308" enum="KeyList">
			Launch Shortcut 4 key.
		</constant>
		<constant name="KEY_LAUNCH5" value="16777309" enum="KeyList">
			Launch Shortcut 5 key.
		</constant>
		<constant name="KEY_LAUNCH6" value="16777310" enum="KeyList">
			Launch Shortcut 6 key.
		</constant>
		<constant name="KEY_LAUNCH7" value="16777311" enum="KeyList">
			Launch Shortcut 7 key.
		</constant>
		<constant name="KEY_LAUNCH8" value="16777312" enum="KeyList">
			Launch Shortcut 8 key.
		</constant>
		<constant name="KEY_LAUNCH9" value="16777313" enum="KeyList">
			Launch Shortcut 9 key.
		</constant>
		<constant name="KEY_LAUNCHA" value="16777314" enum="KeyList">
			Launch Shortcut A key.
		</constant>
		<constant name="KEY_LAUNCHB" value="16777315" enum="KeyList">
			Launch Shortcut B key.
		</constant>
		<constant name="KEY_LAUNCHC" value="16777316" enum="KeyList">
			Launch Shortcut C key.
		</constant>
		<constant name="KEY_LAUNCHD" value="16777317" enum="KeyList">
			Launch Shortcut D key.
		</constant>
		<constant name="KEY_LAUNCHE" value="16777318" enum="KeyList">
			Launch Shortcut E key.
		</constant>
		<constant name="KEY_LAUNCHF" value="16777319" enum="KeyList">
			Launch Shortcut F key.
		</constant>
		<constant name="KEY_UNKNOWN" value="33554431" enum="KeyList">
			Unknown key.
		</constant>
		<constant name="KEY_SPACE" value="32" enum="KeyList">
			Space key.
		</constant>
		<constant name="KEY_EXCLAM" value="33" enum="KeyList">
			! key.
		</constant>
		<constant name="KEY_QUOTEDBL" value="34" enum="KeyList">
			" key.
		</constant>
		<constant name="KEY_NUMBERSIGN" value="35" enum="KeyList">
			# key.
		</constant>
		<constant name="KEY_DOLLAR" value="36" enum="KeyList">
			$ key.
		</constant>
		<constant name="KEY_PERCENT" value="37" enum="KeyList">
			% key.
		</constant>
		<constant name="KEY_AMPERSAND" value="38" enum="KeyList">
			&amp; key.
		</constant>
		<constant name="KEY_APOSTROPHE" value="39" enum="KeyList">
			' key.
		</constant>
		<constant name="KEY_PARENLEFT" value="40" enum="KeyList">
			( key.
		</constant>
		<constant name="KEY_PARENRIGHT" value="41" enum="KeyList">
			) key.
		</constant>
		<constant name="KEY_ASTERISK" value="42" enum="KeyList">
			* key.
		</constant>
		<constant name="KEY_PLUS" value="43" enum="KeyList">
			+ key.
		</constant>
		<constant name="KEY_COMMA" value="44" enum="KeyList">
			, key.
		</constant>
		<constant name="KEY_MINUS" value="45" enum="KeyList">
			- key.
		</constant>
		<constant name="KEY_PERIOD" value="46" enum="KeyList">
			. key.
		</constant>
		<constant name="KEY_SLASH" value="47" enum="KeyList">
			/ key.
		</constant>
		<constant name="KEY_0" value="48" enum="KeyList">
			Number 0.
		</constant>
		<constant name="KEY_1" value="49" enum="KeyList">
			Number 1.
		</constant>
		<constant name="KEY_2" value="50" enum="KeyList">
			Number 2.
		</constant>
		<constant name="KEY_3" value="51" enum="KeyList">
			Number 3.
		</constant>
		<constant name="KEY_4" value="52" enum="KeyList">
			Number 4.
		</constant>
		<constant name="KEY_5" value="53" enum="KeyList">
			Number 5.
		</constant>
		<constant name="KEY_6" value="54" enum="KeyList">
			Number 6.
		</constant>
		<constant name="KEY_7" value="55" enum="KeyList">
			Number 7.
		</constant>
		<constant name="KEY_8" value="56" enum="KeyList">
			Number 8.
		</constant>
		<constant name="KEY_9" value="57" enum="KeyList">
			Number 9.
		</constant>
		<constant name="KEY_COLON" value="58" enum="KeyList">
			: key.
		</constant>
		<constant name="KEY_SEMICOLON" value="59" enum="KeyList">
			; key.
		</constant>
		<constant name="KEY_LESS" value="60" enum="KeyList">
			&lt; key.
		</constant>
		<constant name="KEY_EQUAL" value="61" enum="KeyList">
			= key.
		</constant>
		<constant name="KEY_GREATER" value="62" enum="KeyList">
			&gt; key.
		</constant>
		<constant name="KEY_QUESTION" value="63" enum="KeyList">
			? key.
		</constant>
		<constant name="KEY_AT" value="64" enum="KeyList">
			@ key.
		</constant>
		<constant name="KEY_A" value="65" enum="KeyList">
			A key.
		</constant>
		<constant name="KEY_B" value="66" enum="KeyList">
			B key.
		</constant>
		<constant name="KEY_C" value="67" enum="KeyList">
			C key.
		</constant>
		<constant name="KEY_D" value="68" enum="KeyList">
			D key.
		</constant>
		<constant name="KEY_E" value="69" enum="KeyList">
			E key.
		</constant>
		<constant name="KEY_F" value="70" enum="KeyList">
			F key.
		</constant>
		<constant name="KEY_G" value="71" enum="KeyList">
			G key.
		</constant>
		<constant name="KEY_H" value="72" enum="KeyList">
			H key.
		</constant>
		<constant name="KEY_I" value="73" enum="KeyList">
			I key.
		</constant>
		<constant name="KEY_J" value="74" enum="KeyList">
			J key.
		</constant>
		<constant name="KEY_K" value="75" enum="KeyList">
			K key.
		</constant>
		<constant name="KEY_L" value="76" enum="KeyList">
			L key.
		</constant>
		<constant name="KEY_M" value="77" enum="KeyList">
			M key.
		</constant>
		<constant name="KEY_N" value="78" enum="KeyList">
			N key.
		</constant>
		<constant name="KEY_O" value="79" enum="KeyList">
			O key.
		</constant>
		<constant name="KEY_P" value="80" enum="KeyList">
			P key.
		</constant>
		<constant name="KEY_Q" value="81" enum="KeyList">
			Q key.
		</constant>
		<constant name="KEY_R" value="82" enum="KeyList">
			R key.
		</constant>
		<constant name="KEY_S" value="83" enum="KeyList">
			S key.
		</constant>
		<constant name="KEY_T" value="84" enum="KeyList">
			T key.
		</constant>
		<constant name="KEY_U" value="85" enum="KeyList">
			U key.
		</constant>
		<constant name="KEY_V" value="86" enum="KeyList">
			V key.
		</constant>
		<constant name="KEY_W" value="87" enum="KeyList">
			W key.
		</constant>
		<constant name="KEY_X" value="88" enum="KeyList">
			X key.
		</constant>
		<constant name="KEY_Y" value="89" enum="KeyList">
			Y key.
		</constant>
		<constant name="KEY_Z" value="90" enum="KeyList">
			Z key.
		</constant>
		<constant name="KEY_BRACKETLEFT" value="91" enum="KeyList">
			[ key.
		</constant>
		<constant name="KEY_BACKSLASH" value="92" enum="KeyList">
			\ key.
		</constant>
		<constant name="KEY_BRACKETRIGHT" value="93" enum="KeyList">
			] key.
		</constant>
		<constant name="KEY_ASCIICIRCUM" value="94" enum="KeyList">
			^ key.
		</constant>
		<constant name="KEY_UNDERSCORE" value="95" enum="KeyList">
			_ key.
		</constant>
		<constant name="KEY_QUOTELEFT" value="96" enum="KeyList">
			` key.
		</constant>
		<constant name="KEY_BRACELEFT" value="123" enum="KeyList">
			{ key.
		</constant>
		<constant name="KEY_BAR" value="124" enum="KeyList">
			| key.
		</constant>
		<constant name="KEY_BRACERIGHT" value="125" enum="KeyList">
			} key.
		</constant>
		<constant name="KEY_ASCIITILDE" value="126" enum="KeyList">
			~ key.
		</constant>
		<constant name="KEY_NOBREAKSPACE" value="160" enum="KeyList">
			Non-breakable space key.
		</constant>
		<constant name="KEY_EXCLAMDOWN" value="161" enum="KeyList">
			¡ key.
		</constant>
		<constant name="KEY_CENT" value="162" enum="KeyList">
			¢ key.
		</constant>
		<constant name="KEY_STERLING" value="163" enum="KeyList">
			£ key.
		</constant>
		<constant name="KEY_CURRENCY" value="164" enum="KeyList">
			¤ key.
		</constant>
		<constant name="KEY_YEN" value="165" enum="KeyList">
			¥ key.
		</constant>
		<constant name="KEY_BROKENBAR" value="166" enum="KeyList">
			¦ key.
		</constant>
		<constant name="KEY_SECTION" value="167" enum="KeyList">
			§ key.
		</constant>
		<constant name="KEY_DIAERESIS" value="168" enum="KeyList">
			¨ key.
		</constant>
		<constant name="KEY_COPYRIGHT" value="169" enum="KeyList">
			© key.
		</constant>
		<constant name="KEY_ORDFEMININE" value="170" enum="KeyList">
			ª key.
		</constant>
		<constant name="KEY_GUILLEMOTLEFT" value="171" enum="KeyList">
			« key.
		</constant>
		<constant name="KEY_NOTSIGN" value="172" enum="KeyList">
			¬ key.
		</constant>
		<constant name="KEY_HYPHEN" value="173" enum="KeyList">
			Soft hyphen key.
		</constant>
		<constant name="KEY_REGISTERED" value="174" enum="KeyList">
			® key.
		</constant>
		<constant name="KEY_MACRON" value="175" enum="KeyList">
			¯ key.
		</constant>
		<constant name="KEY_DEGREE" value="176" enum="KeyList">
			° key.
		</constant>
		<constant name="KEY_PLUSMINUS" value="177" enum="KeyList">
			± key.
		</constant>
		<constant name="KEY_TWOSUPERIOR" value="178" enum="KeyList">
			² key.
		</constant>
		<constant name="KEY_THREESUPERIOR" value="179" enum="KeyList">
			³ key.
		</constant>
		<constant name="KEY_ACUTE" value="180" enum="KeyList">
			´ key.
		</constant>
		<constant name="KEY_MU" value="181" enum="KeyList">
			µ key.
		</constant>
		<constant name="KEY_PARAGRAPH" value="182" enum="KeyList">
			¶ key.
		</constant>
		<constant name="KEY_PERIODCENTERED" value="183" enum="KeyList">
			· key.
		</constant>
		<constant name="KEY_CEDILLA" value="184" enum="KeyList">
			¸ key.
		</constant>
		<constant name="KEY_ONESUPERIOR" value="185" enum="KeyList">
			¹ key.
		</constant>
		<constant name="KEY_MASCULINE" value="186" enum="KeyList">
			º key.
		</constant>
		<constant name="KEY_GUILLEMOTRIGHT" value="187" enum="KeyList">
			» key.
		</constant>
		<constant name="KEY_ONEQUARTER" value="188" enum="KeyList">
			¼ key.
		</constant>
		<constant name="KEY_ONEHALF" value="189" enum="KeyList">
			½ key.
		</constant>
		<constant name="KEY_THREEQUARTERS" value="190" enum="KeyList">
			¾ key.
		</constant>
		<constant name="KEY_QUESTIONDOWN" value="191" enum="KeyList">
			¿ key.
		</constant>
		<constant name="KEY_AGRAVE" value="192" enum="KeyList">
			À key.
		</constant>
		<constant name="KEY_AACUTE" value="193" enum="KeyList">
			Á key.
		</constant>
		<constant name="KEY_ACIRCUMFLEX" value="194" enum="KeyList">
			Â key.
		</constant>
		<constant name="KEY_ATILDE" value="195" enum="KeyList">
			Ã key.
		</constant>
		<constant name="KEY_ADIAERESIS" value="196" enum="KeyList">
			Ä key.
		</constant>
		<constant name="KEY_ARING" value="197" enum="KeyList">
			Å key.
		</constant>
		<constant name="KEY_AE" value="198" enum="KeyList">
			Æ key.
		</constant>
		<constant name="KEY_CCEDILLA" value="199" enum="KeyList">
			Ç key.
		</constant>
		<constant name="KEY_EGRAVE" value="200" enum="KeyList">
			È key.
		</constant>
		<constant name="KEY_EACUTE" value="201" enum="KeyList">
			É key.
		</constant>
		<constant name="KEY_ECIRCUMFLEX" value="202" enum="KeyList">
			Ê key.
		</constant>
		<constant name="KEY_EDIAERESIS" value="203" enum="KeyList">
			Ë key.
		</constant>
		<constant name="KEY_IGRAVE" value="204" enum="KeyList">
			Ì key.
		</constant>
		<constant name="KEY_IACUTE" value="205" enum="KeyList">
			Í key.
		</constant>
		<constant name="KEY_ICIRCUMFLEX" value="206" enum="KeyList">
			Î key.
		</constant>
		<constant name="KEY_IDIAERESIS" value="207" enum="KeyList">
			Ï key.
		</constant>
		<constant name="KEY_ETH" value="208" enum="KeyList">
			Ð key.
		</constant>
		<constant name="KEY_NTILDE" value="209" enum="KeyList">
			Ñ key.
		</constant>
		<constant name="KEY_OGRAVE" value="210" enum="KeyList">
			Ò key.
		</constant>
		<constant name="KEY_OACUTE" value="211" enum="KeyList">
			Ó key.
		</constant>
		<constant name="KEY_OCIRCUMFLEX" value="212" enum="KeyList">
			Ô key.
		</constant>
		<constant name="KEY_OTILDE" value="213" enum="KeyList">
			Õ key.
		</constant>
		<constant name="KEY_ODIAERESIS" value="214" enum="KeyList">
			Ö key.
		</constant>
		<constant name="KEY_MULTIPLY" value="215" enum="KeyList">
			× key.
		</constant>
		<constant name="KEY_OOBLIQUE" value="216" enum="KeyList">
			Ø key.
		</constant>
		<constant name="KEY_UGRAVE" value="217" enum="KeyList">
			Ù key.
		</constant>
		<constant name="KEY_UACUTE" value="218" enum="KeyList">
			Ú key.
		</constant>
		<constant name="KEY_UCIRCUMFLEX" value="219" enum="KeyList">
			Û key.
		</constant>
		<constant name="KEY_UDIAERESIS" value="220" enum="KeyList">
			Ü key.
		</constant>
		<constant name="KEY_YACUTE" value="221" enum="KeyList">
			Ý key.
		</constant>
		<constant name="KEY_THORN" value="222" enum="KeyList">
			Þ key.
		</constant>
		<constant name="KEY_SSHARP" value="223" enum="KeyList">
			ß key.
		</constant>
		<constant name="KEY_DIVISION" value="247" enum="KeyList">
			÷ key.
		</constant>
		<constant name="KEY_YDIAERESIS" value="255" enum="KeyList">
			ÿ key.
		</constant>
		<constant name="KEY_CODE_MASK" value="33554431" enum="KeyModifierMask">
			Key Code mask.
		</constant>
		<constant name="KEY_MODIFIER_MASK" value="-16777216" enum="KeyModifierMask">
			Modifier key mask.
		</constant>
		<constant name="KEY_MASK_SHIFT" value="33554432" enum="KeyModifierMask">
			Shift key mask.
		</constant>
		<constant name="KEY_MASK_ALT" value="67108864" enum="KeyModifierMask">
			Alt key mask.
		</constant>
		<constant name="KEY_MASK_META" value="134217728" enum="KeyModifierMask">
			Meta key mask.
		</constant>
		<constant name="KEY_MASK_CTRL" value="268435456" enum="KeyModifierMask">
			Ctrl key mask.
		</constant>
		<constant name="KEY_MASK_CMD" value="platform-dependent" enum="KeyModifierMask">
			Command key mask. On macOS, this is equivalent to [constant KEY_MASK_META]. On other platforms, this is equivalent to [constant KEY_MASK_CTRL]. This mask should be preferred to [constant KEY_MASK_META] or [constant KEY_MASK_CTRL] for system shortcuts as it handles all platforms correctly.
		</constant>
		<constant name="KEY_MASK_KPAD" value="536870912" enum="KeyModifierMask">
			Keypad key mask.
		</constant>
		<constant name="KEY_MASK_GROUP_SWITCH" value="1073741824" enum="KeyModifierMask">
			Group Switch key mask.
		</constant>
		<constant name="BUTTON_LEFT" value="1" enum="ButtonList">
			Primary mouse button, usually the left button.
		</constant>
		<constant name="BUTTON_RIGHT" value="2" enum="ButtonList">
			Secondary mouse button, usually the right button.
		</constant>
		<constant name="BUTTON_MIDDLE" value="3" enum="ButtonList">
			Middle mouse button.
		</constant>
		<constant name="BUTTON_XBUTTON1" value="8" enum="ButtonList">
			Extra mouse button 1 (only present on some mice).
		</constant>
		<constant name="BUTTON_XBUTTON2" value="9" enum="ButtonList">
			Extra mouse button 2 (only present on some mice).
		</constant>
		<constant name="BUTTON_WHEEL_UP" value="4" enum="ButtonList">
			Mouse wheel up.
		</constant>
		<constant name="BUTTON_WHEEL_DOWN" value="5" enum="ButtonList">
			Mouse wheel down.
		</constant>
		<constant name="BUTTON_WHEEL_LEFT" value="6" enum="ButtonList">
			Mouse wheel left button (only present on some mice).
		</constant>
		<constant name="BUTTON_WHEEL_RIGHT" value="7" enum="ButtonList">
			Mouse wheel right button (only present on some mice).
		</constant>
		<constant name="BUTTON_MASK_LEFT" value="1" enum="ButtonList">
			Primary mouse button mask, usually for the left button.
		</constant>
		<constant name="BUTTON_MASK_RIGHT" value="2" enum="ButtonList">
			Secondary mouse button mask, usually for the right button.
		</constant>
		<constant name="BUTTON_MASK_MIDDLE" value="4" enum="ButtonList">
			Middle mouse button mask.
		</constant>
		<constant name="BUTTON_MASK_XBUTTON1" value="128" enum="ButtonList">
			Extra mouse button 1 mask.
		</constant>
		<constant name="BUTTON_MASK_XBUTTON2" value="256" enum="ButtonList">
			Extra mouse button 2 mask.
		</constant>
		<constant name="JOY_INVALID_OPTION" value="-1" enum="JoystickList">
			Invalid button or axis.
		</constant>
		<constant name="JOY_BUTTON_0" value="0" enum="JoystickList">
			Gamepad button 0.
		</constant>
		<constant name="JOY_BUTTON_1" value="1" enum="JoystickList">
			Gamepad button 1.
		</constant>
		<constant name="JOY_BUTTON_2" value="2" enum="JoystickList">
			Gamepad button 2.
		</constant>
		<constant name="JOY_BUTTON_3" value="3" enum="JoystickList">
			Gamepad button 3.
		</constant>
		<constant name="JOY_BUTTON_4" value="4" enum="JoystickList">
			Gamepad button 4.
		</constant>
		<constant name="JOY_BUTTON_5" value="5" enum="JoystickList">
			Gamepad button 5.
		</constant>
		<constant name="JOY_BUTTON_6" value="6" enum="JoystickList">
			Gamepad button 6.
		</constant>
		<constant name="JOY_BUTTON_7" value="7" enum="JoystickList">
			Gamepad button 7.
		</constant>
		<constant name="JOY_BUTTON_8" value="8" enum="JoystickList">
			Gamepad button 8.
		</constant>
		<constant name="JOY_BUTTON_9" value="9" enum="JoystickList">
			Gamepad button 9.
		</constant>
		<constant name="JOY_BUTTON_10" value="10" enum="JoystickList">
			Gamepad button 10.
		</constant>
		<constant name="JOY_BUTTON_11" value="11" enum="JoystickList">
			Gamepad button 11.
		</constant>
		<constant name="JOY_BUTTON_12" value="12" enum="JoystickList">
			Gamepad button 12.
		</constant>
		<constant name="JOY_BUTTON_13" value="13" enum="JoystickList">
			Gamepad button 13.
		</constant>
		<constant name="JOY_BUTTON_14" value="14" enum="JoystickList">
			Gamepad button 14.
		</constant>
		<constant name="JOY_BUTTON_15" value="15" enum="JoystickList">
			Gamepad button 15.
		</constant>
		<constant name="JOY_BUTTON_16" value="16" enum="JoystickList">
			Gamepad button 16.
		</constant>
		<constant name="JOY_BUTTON_17" value="17" enum="JoystickList">
			Gamepad button 17.
		</constant>
		<constant name="JOY_BUTTON_18" value="18" enum="JoystickList">
			Gamepad button 18.
		</constant>
		<constant name="JOY_BUTTON_19" value="19" enum="JoystickList">
			Gamepad button 19.
		</constant>
		<constant name="JOY_BUTTON_20" value="20" enum="JoystickList">
			Gamepad button 20.
		</constant>
		<constant name="JOY_BUTTON_21" value="21" enum="JoystickList">
			Gamepad button 21.
		</constant>
		<constant name="JOY_BUTTON_22" value="22" enum="JoystickList">
			Gamepad button 22.
		</constant>
		<constant name="JOY_BUTTON_MAX" value="128" enum="JoystickList">
			The maximum number of game controller buttons supported by the engine. The actual limit may be lower on specific platforms:
			- Android: Up to 36 buttons.
			- Linux: Up to 80 buttons.
			- Windows and macOS: Up to 128 buttons.
		</constant>
		<constant name="JOY_SONY_CIRCLE" value="1" enum="JoystickList">
			DualShock circle button.
		</constant>
		<constant name="JOY_SONY_X" value="0" enum="JoystickList">
			DualShock X button.
		</constant>
		<constant name="JOY_SONY_SQUARE" value="2" enum="JoystickList">
			DualShock square button.
		</constant>
		<constant name="JOY_SONY_TRIANGLE" value="3" enum="JoystickList">
			DualShock triangle button.
		</constant>
		<constant name="JOY_XBOX_B" value="1" enum="JoystickList">
			Xbox controller B button.
		</constant>
		<constant name="JOY_XBOX_A" value="0" enum="JoystickList">
			Xbox controller A button.
		</constant>
		<constant name="JOY_XBOX_X" value="2" enum="JoystickList">
			Xbox controller X button.
		</constant>
		<constant name="JOY_XBOX_Y" value="3" enum="JoystickList">
			Xbox controller Y button.
		</constant>
		<constant name="JOY_DS_A" value="1" enum="JoystickList">
			Nintendo controller A button.
		</constant>
		<constant name="JOY_DS_B" value="0" enum="JoystickList">
			Nintendo controller B button.
		</constant>
		<constant name="JOY_DS_X" value="3" enum="JoystickList">
			Nintendo controller X button.
		</constant>
		<constant name="JOY_DS_Y" value="2" enum="JoystickList">
			Nintendo controller Y button.
		</constant>
		<constant name="JOY_VR_GRIP" value="2" enum="JoystickList">
			Grip (side) buttons on a VR controller.
		</constant>
		<constant name="JOY_VR_PAD" value="14" enum="JoystickList">
			Push down on the touchpad or main joystick on a VR controller.
		</constant>
		<constant name="JOY_VR_TRIGGER" value="15" enum="JoystickList">
			Trigger on a VR controller.
		</constant>
		<constant name="JOY_OCULUS_AX" value="7" enum="JoystickList">
			A button on the right Oculus Touch controller, X button on the left controller (also when used in OpenVR).
		</constant>
		<constant name="JOY_OCULUS_BY" value="1" enum="JoystickList">
			B button on the right Oculus Touch controller, Y button on the left controller (also when used in OpenVR).
		</constant>
		<constant name="JOY_OCULUS_MENU" value="3" enum="JoystickList">
			Menu button on either Oculus Touch controller.
		</constant>
		<constant name="JOY_OPENVR_MENU" value="1" enum="JoystickList">
			Menu button in OpenVR (Except when Oculus Touch controllers are used).
		</constant>
		<constant name="JOY_SELECT" value="10" enum="JoystickList">
			Gamepad button Select.
		</constant>
		<constant name="JOY_START" value="11" enum="JoystickList">
			Gamepad button Start.
		</constant>
		<constant name="JOY_DPAD_UP" value="12" enum="JoystickList">
			Gamepad DPad up.
		</constant>
		<constant name="JOY_DPAD_DOWN" value="13" enum="JoystickList">
			Gamepad DPad down.
		</constant>
		<constant name="JOY_DPAD_LEFT" value="14" enum="JoystickList">
			Gamepad DPad left.
		</constant>
		<constant name="JOY_DPAD_RIGHT" value="15" enum="JoystickList">
			Gamepad DPad right.
		</constant>
		<constant name="JOY_GUIDE" value="16" enum="JoystickList">
			Gamepad SDL guide button.
		</constant>
		<constant name="JOY_MISC1" value="17" enum="JoystickList">
			Gamepad SDL miscellaneous button.
		</constant>
		<constant name="JOY_PADDLE1" value="18" enum="JoystickList">
			Gamepad SDL paddle 1 button.
		</constant>
		<constant name="JOY_PADDLE2" value="19" enum="JoystickList">
			Gamepad SDL paddle 2 button.
		</constant>
		<constant name="JOY_PADDLE3" value="20" enum="JoystickList">
			Gamepad SDL paddle 3 button.
		</constant>
		<constant name="JOY_PADDLE4" value="21" enum="JoystickList">
			Gamepad SDL paddle 4 button.
		</constant>
		<constant name="JOY_TOUCHPAD" value="22" enum="JoystickList">
			Gamepad SDL touchpad button.
		</constant>
		<constant name="JOY_L" value="4" enum="JoystickList">
			Gamepad left Shoulder button.
		</constant>
		<constant name="JOY_L2" value="6" enum="JoystickList">
			Gamepad left trigger.
		</constant>
		<constant name="JOY_L3" value="8" enum="JoystickList">
			Gamepad left stick click.
		</constant>
		<constant name="JOY_R" value="5" enum="JoystickList">
			Gamepad right Shoulder button.
		</constant>
		<constant name="JOY_R2" value="7" enum="JoystickList">
			Gamepad right trigger.
		</constant>
		<constant name="JOY_R3" value="9" enum="JoystickList">
			Gamepad right stick click.
		</constant>
		<constant name="JOY_AXIS_0" value="0" enum="JoystickList">
			Gamepad left stick horizontal axis.
		</constant>
		<constant name="JOY_AXIS_1" value="1" enum="JoystickList">
			Gamepad left stick vertical axis.
		</constant>
		<constant name="JOY_AXIS_2" value="2" enum="JoystickList">
			Gamepad right stick horizontal axis.
		</constant>
		<constant name="JOY_AXIS_3" value="3" enum="JoystickList">
			Gamepad right stick vertical axis.
		</constant>
		<constant name="JOY_AXIS_4" value="4" enum="JoystickList">
			Generic gamepad axis 4.
		</constant>
		<constant name="JOY_AXIS_5" value="5" enum="JoystickList">
			Generic gamepad axis 5.
		</constant>
		<constant name="JOY_AXIS_6" value="6" enum="JoystickList">
			Gamepad left trigger analog axis.
		</constant>
		<constant name="JOY_AXIS_7" value="7" enum="JoystickList">
			Gamepad right trigger analog axis.
		</constant>
		<constant name="JOY_AXIS_8" value="8" enum="JoystickList">
			Generic gamepad axis 8.
		</constant>
		<constant name="JOY_AXIS_9" value="9" enum="JoystickList">
			Generic gamepad axis 9.
		</constant>
		<constant name="JOY_AXIS_MAX" value="10" enum="JoystickList">
			Represents the maximum number of joystick axes supported.
		</constant>
		<constant name="JOY_ANALOG_LX" value="0" enum="JoystickList">
			Gamepad left stick horizontal axis.
		</constant>
		<constant name="JOY_ANALOG_LY" value="1" enum="JoystickList">
			Gamepad left stick vertical axis.
		</constant>
		<constant name="JOY_ANALOG_RX" value="2" enum="JoystickList">
			Gamepad right stick horizontal axis.
		</constant>
		<constant name="JOY_ANALOG_RY" value="3" enum="JoystickList">
			Gamepad right stick vertical axis.
		</constant>
		<constant name="JOY_ANALOG_L2" value="6" enum="JoystickList">
			Gamepad left analog trigger.
		</constant>
		<constant name="JOY_ANALOG_R2" value="7" enum="JoystickList">
			Gamepad right analog trigger.
		</constant>
		<constant name="JOY_VR_ANALOG_TRIGGER" value="2" enum="JoystickList">
			VR Controller analog trigger.
		</constant>
		<constant name="JOY_VR_ANALOG_GRIP" value="4" enum="JoystickList">
			VR Controller analog grip (side buttons).
		</constant>
		<constant name="JOY_OPENVR_TOUCHPADX" value="0" enum="JoystickList">
			OpenVR touchpad X axis (Joystick axis on Oculus Touch and Windows MR controllers).
		</constant>
		<constant name="JOY_OPENVR_TOUCHPADY" value="1" enum="JoystickList">
			OpenVR touchpad Y axis (Joystick axis on Oculus Touch and Windows MR controllers).
		</constant>
		<constant name="MIDI_MESSAGE_NOTE_OFF" value="8" enum="MidiMessageList">
			MIDI note OFF message. See the documentation of [InputEventMIDI] for information of how to use MIDI inputs.
		</constant>
		<constant name="MIDI_MESSAGE_NOTE_ON" value="9" enum="MidiMessageList">
			MIDI note ON message. See the documentation of [InputEventMIDI] for information of how to use MIDI inputs.
		</constant>
		<constant name="MIDI_MESSAGE_AFTERTOUCH" value="10" enum="MidiMessageList">
			MIDI aftertouch message. This message is most often sent by pressing down on the key after it "bottoms out".
		</constant>
		<constant name="MIDI_MESSAGE_CONTROL_CHANGE" value="11" enum="MidiMessageList">
			MIDI control change message. This message is sent when a controller value changes. Controllers include devices such as pedals and levers.
		</constant>
		<constant name="MIDI_MESSAGE_PROGRAM_CHANGE" value="12" enum="MidiMessageList">
			MIDI program change message. This message sent when the program patch number changes.
		</constant>
		<constant name="MIDI_MESSAGE_CHANNEL_PRESSURE" value="13" enum="MidiMessageList">
			MIDI channel pressure message. This message is most often sent by pressing down on the key after it "bottoms out". This message is different from polyphonic after-touch as it indicates the highest pressure across all keys.
		</constant>
		<constant name="MIDI_MESSAGE_PITCH_BEND" value="14" enum="MidiMessageList">
			MIDI pitch bend message. This message is sent to indicate a change in the pitch bender (wheel or lever, typically).
		</constant>
		<constant name="MIDI_MESSAGE_SYSTEM_EXCLUSIVE" value="240" enum="MidiMessageList">
			MIDI system exclusive message. This has behavior exclusive to the device you're receiving input from. Getting this data is not implemented in Godot.
		</constant>
		<constant name="MIDI_MESSAGE_QUARTER_FRAME" value="241" enum="MidiMessageList">
			MIDI quarter frame message. Contains timing information that is used to synchronize MIDI devices. Getting this data is not implemented in Godot.
		</constant>
		<constant name="MIDI_MESSAGE_SONG_POSITION_POINTER" value="242" enum="MidiMessageList">
			MIDI song position pointer message. Gives the number of 16th notes since the start of the song. Getting this data is not implemented in Godot.
		</constant>
		<constant name="MIDI_MESSAGE_SONG_SELECT" value="243" enum="MidiMessageList">
			MIDI song select message. Specifies which sequence or song is to be played. Getting this data is not implemented in Godot.
		</constant>
		<constant name="MIDI_MESSAGE_TUNE_REQUEST" value="246" enum="MidiMessageList">
			MIDI tune request message. Upon receiving a tune request, all analog synthesizers should tune their oscillators.
		</constant>
		<constant name="MIDI_MESSAGE_TIMING_CLOCK" value="248" enum="MidiMessageList">
			MIDI timing clock message. Sent 24 times per quarter note when synchronization is required.
		</constant>
		<constant name="MIDI_MESSAGE_START" value="250" enum="MidiMessageList">
			MIDI start message. Start the current sequence playing. This message will be followed with Timing Clocks.
		</constant>
		<constant name="MIDI_MESSAGE_CONTINUE" value="251" enum="MidiMessageList">
			MIDI continue message. Continue at the point the sequence was stopped.
		</constant>
		<constant name="MIDI_MESSAGE_STOP" value="252" enum="MidiMessageList">
			MIDI stop message. Stop the current sequence.
		</constant>
		<constant name="MIDI_MESSAGE_ACTIVE_SENSING" value="254" enum="MidiMessageList">
			MIDI active sensing message. This message is intended to be sent repeatedly to tell the receiver that a connection is alive.
		</constant>
		<constant name="MIDI_MESSAGE_SYSTEM_RESET" value="255" enum="MidiMessageList">
			MIDI system reset message. Reset all receivers in the system to power-up status. It should not be sent on power-up itself.
		</constant>
		<constant name="OK" value="0" enum="Error">
			Methods that return [enum Error] return [constant OK] when no error occurred. Note that many functions don't return an error code but will print error messages to standard output.
			Since [constant OK] has value 0, and all other failure codes are positive integers, it can also be used in boolean checks, e.g.:
			[codeblock]
			var err = method_that_returns_error()
			if err != OK:
			    print("Failure!")
			# Or, equivalent:
			if err:
			    print("Still failing!")
			[/codeblock]
		</constant>
		<constant name="FAILED" value="1" enum="Error">
			Generic error.
		</constant>
		<constant name="ERR_UNAVAILABLE" value="2" enum="Error">
			Unavailable error.
		</constant>
		<constant name="ERR_UNCONFIGURED" value="3" enum="Error">
			Unconfigured error.
		</constant>
		<constant name="ERR_UNAUTHORIZED" value="4" enum="Error">
			Unauthorized error.
		</constant>
		<constant name="ERR_PARAMETER_RANGE_ERROR" value="5" enum="Error">
			Parameter range error.
		</constant>
		<constant name="ERR_OUT_OF_MEMORY" value="6" enum="Error">
			Out of memory (OOM) error.
		</constant>
		<constant name="ERR_FILE_NOT_FOUND" value="7" enum="Error">
			File: Not found error.
		</constant>
		<constant name="ERR_FILE_BAD_DRIVE" value="8" enum="Error">
			File: Bad drive error.
		</constant>
		<constant name="ERR_FILE_BAD_PATH" value="9" enum="Error">
			File: Bad path error.
		</constant>
		<constant name="ERR_FILE_NO_PERMISSION" value="10" enum="Error">
			File: No permission error.
		</constant>
		<constant name="ERR_FILE_ALREADY_IN_USE" value="11" enum="Error">
			File: Already in use error.
		</constant>
		<constant name="ERR_FILE_CANT_OPEN" value="12" enum="Error">
			File: Can't open error.
		</constant>
		<constant name="ERR_FILE_CANT_WRITE" value="13" enum="Error">
			File: Can't write error.
		</constant>
		<constant name="ERR_FILE_CANT_READ" value="14" enum="Error">
			File: Can't read error.
		</constant>
		<constant name="ERR_FILE_UNRECOGNIZED" value="15" enum="Error">
			File: Unrecognized error.
		</constant>
		<constant name="ERR_FILE_CORRUPT" value="16" enum="Error">
			File: Corrupt error.
		</constant>
		<constant name="ERR_FILE_MISSING_DEPENDENCIES" value="17" enum="Error">
			File: Missing dependencies error.
		</constant>
		<constant name="ERR_FILE_EOF" value="18" enum="Error">
			File: End of file (EOF) error.
		</constant>
		<constant name="ERR_CANT_OPEN" value="19" enum="Error">
			Can't open error.
		</constant>
		<constant name="ERR_CANT_CREATE" value="20" enum="Error">
			Can't create error.
		</constant>
		<constant name="ERR_QUERY_FAILED" value="21" enum="Error">
			Query failed error.
		</constant>
		<constant name="ERR_ALREADY_IN_USE" value="22" enum="Error">
			Already in use error.
		</constant>
		<constant name="ERR_LOCKED" value="23" enum="Error">
			Locked error.
		</constant>
		<constant name="ERR_TIMEOUT" value="24" enum="Error">
			Timeout error.
		</constant>
		<constant name="ERR_CANT_CONNECT" value="25" enum="Error">
			Can't connect error.
		</constant>
		<constant name="ERR_CANT_RESOLVE" value="26" enum="Error">
			Can't resolve error.
		</constant>
		<constant name="ERR_CONNECTION_ERROR" value="27" enum="Error">
			Connection error.
		</constant>
		<constant name="ERR_CANT_ACQUIRE_RESOURCE" value="28" enum="Error">
			Can't acquire resource error.
		</constant>
		<constant name="ERR_CANT_FORK" value="29" enum="Error">
			Can't fork process error.
		</constant>
		<constant name="ERR_INVALID_DATA" value="30" enum="Error">
			Invalid data error.
		</constant>
		<constant name="ERR_INVALID_PARAMETER" value="31" enum="Error">
			Invalid parameter error.
		</constant>
		<constant name="ERR_ALREADY_EXISTS" value="32" enum="Error">
			Already exists error.
		</constant>
		<constant name="ERR_DOES_NOT_EXIST" value="33" enum="Error">
			Does not exist error.
		</constant>
		<constant name="ERR_DATABASE_CANT_READ" value="34" enum="Error">
			Database: Read error.
		</constant>
		<constant name="ERR_DATABASE_CANT_WRITE" value="35" enum="Error">
			Database: Write error.
		</constant>
		<constant name="ERR_COMPILATION_FAILED" value="36" enum="Error">
			Compilation failed error.
		</constant>
		<constant name="ERR_METHOD_NOT_FOUND" value="37" enum="Error">
			Method not found error.
		</constant>
		<constant name="ERR_LINK_FAILED" value="38" enum="Error">
			Linking failed error.
		</constant>
		<constant name="ERR_SCRIPT_FAILED" value="39" enum="Error">
			Script failed error.
		</constant>
		<constant name="ERR_CYCLIC_LINK" value="40" enum="Error">
			Cycling link (import cycle) error.
		</constant>
		<constant name="ERR_INVALID_DECLARATION" value="41" enum="Error">
			Invalid declaration error.
		</constant>
		<constant name="ERR_DUPLICATE_SYMBOL" value="42" enum="Error">
			Duplicate symbol error.
		</constant>
		<constant name="ERR_PARSE_ERROR" value="43" enum="Error">
			Parse error.
		</constant>
		<constant name="ERR_BUSY" value="44" enum="Error">
			Busy error.
		</constant>
		<constant name="ERR_SKIP" value="45" enum="Error">
			Skip error.
		</constant>
		<constant name="ERR_HELP" value="46" enum="Error">
			Help error.
		</constant>
		<constant name="ERR_BUG" value="47" enum="Error">
			Bug error.
		</constant>
		<constant name="ERR_PRINTER_ON_FIRE" value="48" enum="Error">
			Printer on fire error. (This is an easter egg, no engine methods return this error code.)
		</constant>
		<constant name="PROPERTY_HINT_NONE" value="0" enum="PropertyHint">
			No hint for the edited property.
		</constant>
		<constant name="PROPERTY_HINT_RANGE" value="1" enum="PropertyHint">
			Hints that an integer or float property should be within a range specified via the hint string [code]"min,max"[/code] or [code]"min,max,step"[/code]. The hint string can optionally include [code]"or_greater"[/code] and/or [code]"or_lesser"[/code] to allow manual input going respectively above the max or below the min values. Example: [code]"-360,360,1,or_greater,or_lesser"[/code].
		</constant>
		<constant name="PROPERTY_HINT_EXP_RANGE" value="2" enum="PropertyHint">
			Hints that a float property should be within an exponential range specified via the hint string [code]"min,max"[/code] or [code]"min,max,step"[/code]. The hint string can optionally include [code]"or_greater"[/code] and/or [code]"or_lesser"[/code] to allow manual input going respectively above the max or below the min values. Example: [code]"0.01,100,0.01,or_greater"[/code].
		</constant>
		<constant name="PROPERTY_HINT_ENUM" value="3" enum="PropertyHint">
			Hints that an integer, float or string property is an enumerated value to pick in a list specified via a hint string.
			The hint string is a comma separated list of names such as [code]"Hello,Something,Else"[/code]. Whitespaces are [b]not[/b] removed from either end of a name. For integer and float properties, the first name in the list has value 0, the next 1, and so on. Explicit values can also be specified by appending [code]:integer[/code] to the name, e.g. [code]"Zero,One,Three:3,Four,Six:6"[/code].
		</constant>
		<constant name="PROPERTY_HINT_ENUM_SUGGESTION" value="40" enum="PropertyHint">
			Hints that a string property can be an enumerated value to pick in a list specified via a hint string such as [code]"Hello,Something,Else"[/code].
			Unlike [constant PROPERTY_HINT_ENUM] a property with this hint still accepts arbitrary values and can be empty. The list of values serves to suggest possible values.
		</constant>
		<constant name="PROPERTY_HINT_EXP_EASING" value="4" enum="PropertyHint">
			Hints that a float property should be edited via an exponential easing function. The hint string can include [code]"attenuation"[/code] to flip the curve horizontally and/or [code]"inout"[/code] to also include in/out easing.
		</constant>
		<constant name="PROPERTY_HINT_LENGTH" value="5" enum="PropertyHint">
			Deprecated hint, unused.
		</constant>
		<constant name="PROPERTY_HINT_LINK" value="6" enum="PropertyHint">
			Hints that a vector property should allow linking values (e.g. to edit both [code]x[/code] and [code]y[/code] together).
		</constant>
		<constant name="PROPERTY_HINT_KEY_ACCEL" value="8" enum="PropertyHint">
			Deprecated hint, unused.
		</constant>
		<constant name="PROPERTY_HINT_FLAGS" value="9" enum="PropertyHint">
			Hints that an integer property is a bitmask with named bit flags. For example, to allow toggling bits 0, 1, 2 and 4, the hint could be something like [code]"Bit0,Bit1,Bit2,,Bit4"[/code].
		</constant>
		<constant name="PROPERTY_HINT_LAYERS_2D_RENDER" value="10" enum="PropertyHint">
			Hints that an integer property is a bitmask using the optionally named 2D render layers.
		</constant>
		<constant name="PROPERTY_HINT_LAYERS_2D_PHYSICS" value="11" enum="PropertyHint">
			Hints that an integer property is a bitmask using the optionally named 2D physics layers.
		</constant>
		<constant name="PROPERTY_HINT_LAYERS_2D_NAVIGATION" value="12" enum="PropertyHint">
			Hints that an integer property is a bitmask using the optionally named 2D navigation layers.
		</constant>
		<constant name="PROPERTY_HINT_LAYERS_3D_RENDER" value="13" enum="PropertyHint">
			Hints that an integer property is a bitmask using the optionally named 3D render layers.
		</constant>
		<constant name="PROPERTY_HINT_LAYERS_3D_PHYSICS" value="14" enum="PropertyHint">
			Hints that an integer property is a bitmask using the optionally named 3D physics layers.
		</constant>
		<constant name="PROPERTY_HINT_LAYERS_3D_NAVIGATION" value="15" enum="PropertyHint">
			Hints that an integer property is a bitmask using the optionally named 3D navigation layers.
		</constant>
		<constant name="PROPERTY_HINT_FILE" value="16" enum="PropertyHint">
			Hints that a string property is a path to a file. Editing it will show a file dialog for picking the path. The hint string can be a set of filters with wildcards like [code]"*.png,*.jpg"[/code].
		</constant>
		<constant name="PROPERTY_HINT_DIR" value="17" enum="PropertyHint">
			Hints that a string property is a path to a directory. Editing it will show a file dialog for picking the path.
		</constant>
		<constant name="PROPERTY_HINT_GLOBAL_FILE" value="18" enum="PropertyHint">
			Hints that a string property is an absolute path to a file outside the project folder. Editing it will show a file dialog for picking the path. The hint string can be a set of filters with wildcards like [code]"*.png,*.jpg"[/code].
		</constant>
		<constant name="PROPERTY_HINT_GLOBAL_DIR" value="19" enum="PropertyHint">
			Hints that a string property is an absolute path to a directory outside the project folder. Editing it will show a file dialog for picking the path.
		</constant>
		<constant name="PROPERTY_HINT_RESOURCE_TYPE" value="20" enum="PropertyHint">
			Hints that a property is an instance of a [Resource]-derived type, optionally specified via the hint string (e.g. [code]"Texture"[/code]). Editing it will show a popup menu of valid resource types to instantiate.
		</constant>
		<constant name="PROPERTY_HINT_MULTILINE_TEXT" value="21" enum="PropertyHint">
			Hints that a string property is text with line breaks. Editing it will show a text input field where line breaks can be typed.
		</constant>
		<constant name="PROPERTY_HINT_PLACEHOLDER_TEXT" value="22" enum="PropertyHint">
			Hints that a string property should have a placeholder text visible on its input field, whenever the property is empty. The hint string is the placeholder text to use.
		</constant>
		<constant name="PROPERTY_HINT_COLOR_NO_ALPHA" value="23" enum="PropertyHint">
			Hints that a color property should be edited without changing its alpha component, i.e. only R, G and B channels are edited.
		</constant>
		<constant name="PROPERTY_HINT_IMAGE_COMPRESS_LOSSY" value="24" enum="PropertyHint">
			Hints that an image is compressed using lossy compression.
		</constant>
		<constant name="PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS" value="25" enum="PropertyHint">
			Hints that an image is compressed using lossless compression.
		</constant>
		<constant name="PROPERTY_HINT_OBJECT_ID" value="26" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_TYPE_STRING" value="27" enum="PropertyHint">
			Hint that a property represents a particular type. If a property is [constant TYPE_STRING], allows to set a type from the create dialog. If you need to create an [Array] to contain elements of a specific type, the [code]hint_string[/code] must encode nested types using [code]":"[/code] and [code]"/"[/code] for specifying [Resource] types. For instance:
			[codeblock]
			hint_string = "%s:" % [TYPE_INT] # Array of integers.
			hint_string = "%s:%s:" % [TYPE_ARRAY, TYPE_REAL] # Two-dimensional array of floats.
			hint_string = "%s/%s:Resource" % [TYPE_OBJECT, TYPE_OBJECT] # Array of resources.
			hint_string = "%s:%s/%s:Resource" % [TYPE_ARRAY, TYPE_OBJECT, TYPE_OBJECT] # Two-dimensional array of resources.
			[/codeblock]
			[b]Note:[/b] The final colon is required to specify for properly detecting built-in types.
		</constant>
		<constant name="PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE" value="28" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_METHOD_OF_VARIANT_TYPE" value="29" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_METHOD_OF_BASE_TYPE" value="30" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_METHOD_OF_INSTANCE" value="31" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_METHOD_OF_SCRIPT" value="32" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_PROPERTY_OF_VARIANT_TYPE" value="33" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_PROPERTY_OF_BASE_TYPE" value="34" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_PROPERTY_OF_INSTANCE" value="35" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_PROPERTY_OF_SCRIPT" value="36" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_OBJECT_TOO_BIG" value="37" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_NODE_PATH_VALID_TYPES" value="38" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_SAVE_FILE" value="39" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_HINT_LOCALE_ID" value="41" enum="PropertyHint">
			Hints that a string property is a locale code. Editing it will show a locale dialog for picking language and country.
		</constant>
		<constant name="PROPERTY_HINT_MAX" value="43" enum="PropertyHint">
		</constant>
		<constant name="PROPERTY_USAGE_STORAGE" value="1" enum="PropertyUsageFlags">
			The property is serialized and saved in the scene file (default).
		</constant>
		<constant name="PROPERTY_USAGE_EDITOR" value="2" enum="PropertyUsageFlags">
			The property is shown in the editor inspector (default).
		</constant>
		<constant name="PROPERTY_USAGE_NETWORK" value="4" enum="PropertyUsageFlags">
			Deprecated usage flag, unused.
		</constant>
		<constant name="PROPERTY_USAGE_EDITOR_HELPER" value="8" enum="PropertyUsageFlags">
			Deprecated usage flag, unused.
		</constant>
		<constant name="PROPERTY_USAGE_CHECKABLE" value="16" enum="PropertyUsageFlags">
			The property can be checked in the editor inspector.
		</constant>
		<constant name="PROPERTY_USAGE_CHECKED" value="32" enum="PropertyUsageFlags">
			The property is checked in the editor inspector.
		</constant>
		<constant name="PROPERTY_USAGE_INTERNATIONALIZED" value="64" enum="PropertyUsageFlags">
			The property is a translatable string.
		</constant>
		<constant name="PROPERTY_USAGE_GROUP" value="128" enum="PropertyUsageFlags">
			Used to group properties together in the editor. See [EditorInspector].
		</constant>
		<constant name="PROPERTY_USAGE_CATEGORY" value="256" enum="PropertyUsageFlags">
			Used to categorize properties together in the editor.
		</constant>
		<constant name="PROPERTY_USAGE_NO_INSTANCE_STATE" value="2048" enum="PropertyUsageFlags">
			The property does not save its state in [PackedScene].
		</constant>
		<constant name="PROPERTY_USAGE_RESTART_IF_CHANGED" value="4096" enum="PropertyUsageFlags">
			Editing the property prompts the user for restarting the editor.
		</constant>
		<constant name="PROPERTY_USAGE_SCRIPT_VARIABLE" value="8192" enum="PropertyUsageFlags">
			The property is a script variable which should be serialized and saved in the scene file.
		</constant>
		<constant name="PROPERTY_USAGE_DEFAULT" value="7" enum="PropertyUsageFlags">
			Default usage (storage, editor and network).
		</constant>
		<constant name="PROPERTY_USAGE_DEFAULT_INTL" value="71" enum="PropertyUsageFlags">
			Default usage for translatable strings (storage, editor, network and internationalized).
		</constant>
		<constant name="PROPERTY_USAGE_NOEDITOR" value="5" enum="PropertyUsageFlags">
			Default usage but without showing the property in the editor (storage, network).
		</constant>
		<constant name="METHOD_FLAG_NORMAL" value="1" enum="MethodFlags">
			Flag for a normal method.
		</constant>
		<constant name="METHOD_FLAG_EDITOR" value="2" enum="MethodFlags">
			Flag for an editor method.
		</constant>
		<constant name="METHOD_FLAG_NOSCRIPT" value="4" enum="MethodFlags">
			Deprecated method flag, unused.
		</constant>
		<constant name="METHOD_FLAG_CONST" value="8" enum="MethodFlags">
			Flag for a constant method.
		</constant>
		<constant name="METHOD_FLAG_REVERSE" value="16" enum="MethodFlags">
			Deprecated method flag, unused.
		</constant>
		<constant name="METHOD_FLAG_VIRTUAL" value="32" enum="MethodFlags">
			Flag for a virtual method.
		</constant>
		<constant name="METHOD_FLAG_FROM_SCRIPT" value="64" enum="MethodFlags">
			Deprecated method flag, unused.
		</constant>
		<constant name="METHOD_FLAG_VARARG" value="128" enum="MethodFlags">
		</constant>
		<constant name="METHOD_FLAGS_DEFAULT" value="1" enum="MethodFlags">
			Default method flags.
		</constant>
		<constant name="TYPE_NIL" value="0" enum="Variant.Type">
			Variable is [code]null[/code].
		</constant>
		<constant name="TYPE_BOOL" value="1" enum="Variant.Type">
			Variable is of type [bool].
		</constant>
		<constant name="TYPE_INT" value="2" enum="Variant.Type">
			Variable is of type [int].
		</constant>
		<constant name="TYPE_REAL" value="3" enum="Variant.Type">
			Variable is of type [float] (real).
		</constant>
		<constant name="TYPE_STRING" value="4" enum="Variant.Type">
			Variable is of type [String].
		</constant>
		<constant name="TYPE_VECTOR2" value="5" enum="Variant.Type">
			Variable is of type [Vector2].
		</constant>
		<constant name="TYPE_RECT2" value="6" enum="Variant.Type">
			Variable is of type [Rect2].
		</constant>
		<constant name="TYPE_VECTOR3" value="7" enum="Variant.Type">
			Variable is of type [Vector3].
		</constant>
		<constant name="TYPE_TRANSFORM2D" value="8" enum="Variant.Type">
			Variable is of type [Transform2D].
		</constant>
		<constant name="TYPE_PLANE" value="9" enum="Variant.Type">
			Variable is of type [Plane].
		</constant>
		<constant name="TYPE_QUAT" value="10" enum="Variant.Type">
			Variable is of type [Quat].
		</constant>
		<constant name="TYPE_AABB" value="11" enum="Variant.Type">
			Variable is of type [AABB].
		</constant>
		<constant name="TYPE_BASIS" value="12" enum="Variant.Type">
			Variable is of type [Basis].
		</constant>
		<constant name="TYPE_TRANSFORM" value="13" enum="Variant.Type">
			Variable is of type [Transform].
		</constant>
		<constant name="TYPE_COLOR" value="14" enum="Variant.Type">
			Variable is of type [Color].
		</constant>
		<constant name="TYPE_NODE_PATH" value="15" enum="Variant.Type">
			Variable is of type [NodePath].
		</constant>
		<constant name="TYPE_RID" value="16" enum="Variant.Type">
			Variable is of type [RID].
		</constant>
		<constant name="TYPE_OBJECT" value="17" enum="Variant.Type">
			Variable is of type [Object].
		</constant>
		<constant name="TYPE_DICTIONARY" value="18" enum="Variant.Type">
			Variable is of type [Dictionary].
		</constant>
		<constant name="TYPE_ARRAY" value="19" enum="Variant.Type">
			Variable is of type [Array].
		</constant>
		<constant name="TYPE_RAW_ARRAY" value="20" enum="Variant.Type">
			Variable is of type [PoolByteArray].
		</constant>
		<constant name="TYPE_INT_ARRAY" value="21" enum="Variant.Type">
			Variable is of type [PoolIntArray].
		</constant>
		<constant name="TYPE_REAL_ARRAY" value="22" enum="Variant.Type">
			Variable is of type [PoolRealArray].
		</constant>
		<constant name="TYPE_STRING_ARRAY" value="23" enum="Variant.Type">
			Variable is of type [PoolStringArray].
		</constant>
		<constant name="TYPE_VECTOR2_ARRAY" value="24" enum="Variant.Type">
			Variable is of type [PoolVector2Array].
		</constant>
		<constant name="TYPE_VECTOR3_ARRAY" value="25" enum="Variant.Type">
			Variable is of type [PoolVector3Array].
		</constant>
		<constant name="TYPE_COLOR_ARRAY" value="26" enum="Variant.Type">
			Variable is of type [PoolColorArray].
		</constant>
		<constant name="TYPE_MAX" value="27" enum="Variant.Type">
			Represents the size of the [enum Variant.Type] enum.
		</constant>
		<constant name="OP_EQUAL" value="0" enum="Variant.Operator">
			Equality operator ([code]==[/code]).
		</constant>
		<constant name="OP_NOT_EQUAL" value="1" enum="Variant.Operator">
			Inequality operator ([code]!=[/code]).
		</constant>
		<constant name="OP_LESS" value="2" enum="Variant.Operator">
			Less than operator ([code]&lt;[/code]).
		</constant>
		<constant name="OP_LESS_EQUAL" value="3" enum="Variant.Operator">
			Less than or equal operator ([code]&lt;=[/code]).
		</constant>
		<constant name="OP_GREATER" value="4" enum="Variant.Operator">
			Greater than operator ([code]&gt;[/code]).
		</constant>
		<constant name="OP_GREATER_EQUAL" value="5" enum="Variant.Operator">
			Greater than or equal operator ([code]&gt;=[/code]).
		</constant>
		<constant name="OP_ADD" value="6" enum="Variant.Operator">
			Addition operator ([code]+[/code]).
		</constant>
		<constant name="OP_SUBTRACT" value="7" enum="Variant.Operator">
			Subtraction operator ([code]-[/code]).
		</constant>
		<constant name="OP_MULTIPLY" value="8" enum="Variant.Operator">
			Multiplication operator ([code]*[/code]).
		</constant>
		<constant name="OP_DIVIDE" value="9" enum="Variant.Operator">
			Division operator ([code]/[/code]).
		</constant>
		<constant name="OP_NEGATE" value="10" enum="Variant.Operator">
			Unary negation operator ([code]-[/code]).
		</constant>
		<constant name="OP_POSITIVE" value="11" enum="Variant.Operator">
			Unary plus operator ([code]+[/code]).
		</constant>
		<constant name="OP_MODULE" value="12" enum="Variant.Operator">
			Remainder/modulo operator ([code]%[/code]).
		</constant>
		<constant name="OP_STRING_CONCAT" value="13" enum="Variant.Operator">
			String concatenation operator ([code]+[/code]).
		</constant>
		<constant name="OP_SHIFT_LEFT" value="14" enum="Variant.Operator">
			Left shift operator ([code]&lt;&lt;[/code]).
		</constant>
		<constant name="OP_SHIFT_RIGHT" value="15" enum="Variant.Operator">
			Right shift operator ([code]&gt;&gt;[/code]).
		</constant>
		<constant name="OP_BIT_AND" value="16" enum="Variant.Operator">
			Bitwise AND operator ([code]&amp;[/code]).
		</constant>
		<constant name="OP_BIT_OR" value="17" enum="Variant.Operator">
			Bitwise OR operator ([code]|[/code]).
		</constant>
		<constant name="OP_BIT_XOR" value="18" enum="Variant.Operator">
			Bitwise XOR operator ([code]^[/code]).
		</constant>
		<constant name="OP_BIT_NEGATE" value="19" enum="Variant.Operator">
			Bitwise NOT operator ([code]~[/code]).
		</constant>
		<constant name="OP_AND" value="20" enum="Variant.Operator">
			Logical AND operator ([code]and[/code] or [code]&amp;&amp;[/code]).
		</constant>
		<constant name="OP_OR" value="21" enum="Variant.Operator">
			Logical OR operator ([code]or[/code] or [code]||[/code]).
		</constant>
		<constant name="OP_XOR" value="22" enum="Variant.Operator">
			Logical XOR operator (not implemented in GDScript).
		</constant>
		<constant name="OP_NOT" value="23" enum="Variant.Operator">
			Logical NOT operator ([code]not[/code] or [code]![/code]).
		</constant>
		<constant name="OP_IN" value="24" enum="Variant.Operator">
			Logical IN operator ([code]in[/code]).
		</constant>
		<constant name="OP_MAX" value="25" enum="Variant.Operator">
			Represents the size of the [enum Variant.Operator] enum.
		</constant>
	</constants>
</class>
