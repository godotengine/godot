<?xml version="1.0" encoding="UTF-8"?>
<class name="ScrollContainer" inherits="Container" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A container used to provide scrollbars to a child control when needed.
	</brief_description>
	<description>
		A container used to provide a child control with scrollbars when needed. Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer. Scrollbars will also automatically resize the grabber based on the [member Control.custom_minimum_size] of the Control relative to the ScrollContainer.
	</description>
	<tutorials>
		<link title="Using Containers">$DOCS_URL/tutorials/ui/gui_containers.html</link>
	</tutorials>

	<methods>
		<method name="ensure_control_visible">
			<return type="void"/>
			<param index="0" name="control" type="Control"/>
			<description>
				Ensures the given [param control] is visible (must be a direct or indirect child of the ScrollContainer). Used by [member follow_focus].
				[b]Note:[/b] This will not work on a node that was just added during the same frame. If you want to scroll to a newly added child, you must wait until the next frame using [signal SceneTree.process_frame]:
				[codeblock]
				add_child(child_node)
				await get_tree().process_frame
				ensure_control_visible(child_node)
				[/codeblock]
			</description>
		</method>

		<method name="get_h_scroll_bar">
			<return type="HScrollBar"/>
			<description>
				Returns the horizontal scrollbar [HScrollBar] of this [ScrollContainer].
				[b]Warning:[/b] This is a required internal node. Removing and freeing it may cause a crash. To disable or hide it, use [member horizontal_scroll_mode].
			</description>
		</method>

		<method name="get_v_scroll_bar">
			<return type="VScrollBar"/>
			<description>
				Returns the vertical scrollbar [VScrollBar] of this [ScrollContainer].
				[b]Warning:[/b] This is a required internal node. Removing and freeing it may cause a crash. To disable or hide it, use [member vertical_scroll_mode].
			</description>
		</method>

		<method name="set_horizontal_content_align">
			<return type="void"/>
			<param index="0" name="alignment" type="int"/>
			<description>
				Sets the horizontal alignment of the container's content. Valid values: [code skip-lint]H_ALIGN_LEFT[/code skip-lint], [code skip-lint]H_ALIGN_CENTER[/code skip-lint], [code skip-lint]H_ALIGN_RIGHT[/code skip-lint].
			</description>
		</method>

		<method name="get_horizontal_content_align">
			<return type="int"/>
			<description>
				Returns the current horizontal content alignment (one of [code skip-lint]H_ALIGN_LEFT[/code skip-lint], [code skip-lint]H_ALIGN_CENTER[/code skip-lint], [code skip-lint]H_ALIGN_RIGHT[/code skip-lint]).
			</description>
		</method>

		<method name="set_vertical_content_align">
			<return type="void"/>
			<param index="0" name="alignment" type="int"/>
			<description>
				Sets the vertical alignment of the container's content. Valid values: [code skip-lint]V_ALIGN_TOP[/code skip-lint], [code skip-lint]V_ALIGN_CENTER[/code skip-lint], [code skip-lint]V_ALIGN_BOTTOM[/code skip-lint].
			</description>
		</method>

		<method name="get_vertical_content_align">
			<return type="int"/>
			<description>
				Returns the current vertical content alignment (one of [code skip-lint]V_ALIGN_TOP[/code skip-lint], [code skip-lint]V_ALIGN_CENTER[/code skip-lint], [code skip-lint]V_ALIGN_BOTTOM[/code skip-lint]).
			</description>
		</method>
	</methods>

	<members>
		<member name="clip_contents" type="bool" setter="set_clip_contents" getter="is_clipping_contents" overrides="Control" default="true"/>
		<member name="draw_focus_border" type="bool" setter="set_draw_focus_border" getter="get_draw_focus_border" default="false">
			If [code]true[/code], [theme_item focus] is drawn when the ScrollContainer or one of its descendant nodes is focused.
		</member>
		<member name="follow_focus" type="bool" setter="set_follow_focus" getter="is_following_focus" default="false">
			If [code]true[/code], the ScrollContainer will automatically scroll to focused children to make sure they are fully visible.
		</member>
		<member name="horizontal_scroll_mode" type="int" setter="set_horizontal_scroll_mode" getter="get_horizontal_scroll_mode" enum="ScrollContainer.ScrollMode" default="1">
			Controls whether the horizontal scrollbar can be used and when it should be visible.
		</member>

		<member name="horizontal_content_align" type="int" setter="set_horizontal_content_align" getter="get_horizontal_content_align" default="0">
			Controls horizontal placement of contents.
			[b]Left[/b] ([constant H_ALIGN_LEFT]) = Align contents to the left. [i](Default)[/i]
			[b]Center[/b] ([constant H_ALIGN_CENTER]) = Align contents to the center.
			[b]Right[/b] ([constant H_ALIGN_RIGHT]) = Align contents to the right.
		</member>

		<member name="vertical_content_align" type="int" setter="set_vertical_content_align" getter="get_vertical_content_align" default="0">
			Controls vertical placement of contents.
			[b]Top[/b] ([constant V_ALIGN_TOP]) = Align contents to the top. [i](Default)[/i]
			[b]Center[/b] ([constant V_ALIGN_CENTER]) = Align contents to the center.
			[b]Bottom[/b] ([constant V_ALIGN_BOTTOM]) = Align contents to the bottom.
		</member>

		<member name="scroll_deadzone" type="int" setter="set_deadzone" getter="get_deadzone" default="0">
			Deadzone for touch scrolling. A lower deadzone makes scrolling more sensitive.
		</member>

		<member name="scroll_horizontal" type="int" setter="set_h_scroll" getter="get_h_scroll" default="0">
			The current horizontal scroll value.
			[b]Note:[/b] If you set this in [method Node._ready] or earlier, use [method Object.set_deferred], since scrollbar [member Range.max_value] isnâ€™t initialized yet.
		</member>

		<member name="scroll_vertical" type="int" setter="set_v_scroll" getter="get_v_scroll" default="0">
			The current vertical scroll value.
			[b]Note:[/b] Setting this early should also be deferred, like [member scroll_horizontal].
		</member>

		<member name="vertical_scroll_mode" type="int" setter="set_vertical_scroll_mode" getter="get_vertical_scroll_mode" enum="ScrollContainer.ScrollMode" default="1">
			Controls whether the vertical scrollbar can be used and when it should be visible.
		</member>
	</members>

	<signals>
		<signal name="scroll_ended">
			<description>
				Emitted when scrolling stops after dragging the scrollable area with a touch event.
			</description>
		</signal>

		<signal name="scroll_started">
			<description>
				Emitted when scrolling starts after dragging the scrollable area with a touch event.
			</description>
		</signal>
	</signals>

	<constants>
		<constant name="SCROLL_MODE_DISABLED" value="0" enum="ScrollMode">Scrolling disabled, scrollbar is invisible.</constant>
		<constant name="SCROLL_MODE_AUTO" value="1" enum="ScrollMode">Scrollbar visible only if content exceeds container size.</constant>
		<constant name="SCROLL_MODE_SHOW_ALWAYS" value="2" enum="ScrollMode">Scrollbar always visible.</constant>
		<constant name="SCROLL_MODE_SHOW_NEVER" value="3" enum="ScrollMode">Scrollbar hidden, scrolling still enabled.</constant>
		<constant name="SCROLL_MODE_RESERVE" value="4" enum="ScrollMode">Content reserves space as if scrollbar is always visible.</constant>

		<constant name="H_ALIGN_LEFT" value="0">Left horizontal alignment of contents.</constant>
		<constant name="H_ALIGN_CENTER" value="1">Center horizontal alignment of contents.</constant>
		<constant name="H_ALIGN_RIGHT" value="2">Right horizontal alignment of contents.</constant>

		<constant name="V_ALIGN_TOP" value="0">Top vertical alignment of contents.</constant>
		<constant name="V_ALIGN_CENTER" value="1">Center vertical alignment of contents.</constant>
		<constant name="V_ALIGN_BOTTOM" value="2">Bottom vertical alignment of contents.</constant>
	</constants>

	<theme_items>
		<theme_item name="focus" data_type="style" type="StyleBox">
			The focus border [StyleBox] of the [ScrollContainer]. Used when [member draw_focus_border] is [code]true[/code].
		</theme_item>
		<theme_item name="panel" data_type="style" type="StyleBox">
			The background [StyleBox] of the [ScrollContainer].
		</theme_item>
	</theme_items>
</class>
