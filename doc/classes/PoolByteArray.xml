<?xml version="1.0" encoding="UTF-8" ?>
<class name="PoolByteArray" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A pooled array of bytes.
	</brief_description>
	<description>
		An array specifically designed to hold bytes. Optimized for memory usage, does not fragment the memory.
		[b]Note:[/b] This type is passed by value and not by reference. This means that when [i]mutating[/i] a class property of type [PoolByteArray] or mutating a [PoolByteArray] within an [Array] or [Dictionary], changes will be lost:
		[codeblock]
		var array = [PoolByteArray()]
		array[0].push_back(123)
		print(array)  # [[]] (empty PoolByteArray within an Array)
		[/codeblock]
		Instead, the entire [PoolByteArray] property must be [i]reassigned[/i] with [code]=[/code] for it to be changed:
		[codeblock]
		var array = [PoolByteArray()]
		var pool_array = array[0]
		pool_array.push_back(123)
		array[0] = pool_array
		print(array)  # [[123]] (PoolByteArray with 1 element inside an Array)
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="PoolByteArray">
			<return type="PoolByteArray" />
			<argument index="0" name="from" type="Array" />
			<description>
				Constructs a new [PoolByteArray]. Optionally, you can pass in a generic [Array] that will be converted.
			</description>
		</method>
		<method name="append">
			<argument index="0" name="byte" type="int" />
			<description>
				Appends an element at the end of the array (alias of [method push_back]).
			</description>
		</method>
		<method name="append_array">
			<argument index="0" name="array" type="PoolByteArray" />
			<description>
				Appends a [PoolByteArray] at the end of this array.
			</description>
		</method>
		<method name="clear">
			<description>
				Clears the array. This is equivalent to using [method resize] with a size of [code]0[/code].
			</description>
		</method>
		<method name="compress">
			<return type="PoolByteArray" />
			<argument index="0" name="compression_mode" type="int" default="0" />
			<description>
				Returns a new [PoolByteArray] with the data compressed. Set the compression mode using one of [enum File.CompressionMode]'s constants.
			</description>
		</method>
		<method name="count">
			<return type="int" />
			<argument index="0" name="value" type="int" />
			<description>
				Returns the number of times an element is in the array.
			</description>
		</method>
		<method name="decompress">
			<return type="PoolByteArray" />
			<argument index="0" name="buffer_size" type="int" />
			<argument index="1" name="compression_mode" type="int" default="0" />
			<description>
				Returns a new [PoolByteArray] with the data decompressed. Set [code]buffer_size[/code] to the size of the uncompressed data. Set the compression mode using one of [enum File.CompressionMode]'s constants.
			</description>
		</method>
		<method name="decompress_dynamic">
			<return type="PoolByteArray" />
			<argument index="0" name="max_output_size" type="int" />
			<argument index="1" name="compression_mode" type="int" default="0" />
			<description>
				Returns a new [PoolByteArray] with the data decompressed. Set the compression mode using one of [enum File.CompressionMode]'s constants. [b]This method only accepts gzip and deflate compression modes.[/b]
				This method is potentially slower than [code]decompress[/code], as it may have to re-allocate its output buffer multiple times while decompressing, where as [code]decompress[/code] knows its output buffer size from the beginning.

				GZIP has a maximal compression ratio of 1032:1, meaning it's very possible for a small compressed payload to decompress to a potentially very large output. To guard against this, you may provide a maximum size this function is allowed to allocate in bytes via [code]max_output_size[/code]. Passing -1 will allow for unbounded output. If any positive value is passed, and the decompression exceeds that amount in bytes, then an error will be returned.
			</description>
		</method>
		<method name="empty">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the array is empty.
			</description>
		</method>
		<method name="fill">
			<argument index="0" name="byte" type="int" />
			<description>
				Assigns the given value to all elements in the array. This can typically be used together with [method resize] to create an array with a given size and initialized elements.
			</description>
		</method>
		<method name="find">
			<return type="int" />
			<argument index="0" name="value" type="int" />
			<argument index="1" name="from" type="int" default="0" />
			<description>
				Searches the array for a value and returns its index or [code]-1[/code] if not found. Optionally, the initial search index can be passed. Returns [code]-1[/code] if [code]from[/code] is out of bounds.
			</description>
		</method>
		<method name="get">
			<return type="int" />
			<argument index="0" name="index" type="int" />
			<description>
				Returns the byte at the given [code]index[/code] in the array. This is the same as using the [code][][/code] operator ([code]array[index][/code]).
			</description>
		</method>
		<method name="get_string_from_ascii">
			<return type="String" />
			<description>
				Returns a copy of the array's contents as [String]. Fast alternative to [method get_string_from_utf8] if the content is ASCII-only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use [method get_string_from_utf8].
			</description>
		</method>
		<method name="get_string_from_utf8">
			<return type="String" />
			<description>
				Returns a copy of the array's contents as [String]. Slower than [method get_string_from_ascii] but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred.
			</description>
		</method>
		<method name="has">
			<return type="bool" />
			<argument index="0" name="value" type="int" />
			<description>
				Returns [code]true[/code] if the array contains the given value.
				[b]Note:[/b] This is equivalent to using the [code]in[/code] operator.
			</description>
		</method>
		<method name="hex_encode">
			<return type="String" />
			<description>
				Returns a hexadecimal representation of this array as a [String].
				[codeblock]
				var array = PoolByteArray([11, 46, 255])
				print(array.hex_encode()) # Prints: 0b2eff
				[/codeblock]
			</description>
		</method>
		<method name="insert">
			<return type="int" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="byte" type="int" />
			<description>
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code]).
			</description>
		</method>
		<method name="invert">
			<description>
				Reverses the order of the elements in the array.
			</description>
		</method>
		<method name="push_back">
			<argument index="0" name="byte" type="int" />
			<description>
				Appends an element at the end of the array.
			</description>
		</method>
		<method name="remove">
			<argument index="0" name="idx" type="int" />
			<description>
				Removes an element from the array by index.
			</description>
		</method>
		<method name="resize">
			<argument index="0" name="idx" type="int" />
			<description>
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size.
				[b]Note:[/b] Added elements are not automatically initialized to 0 and will contain garbage, i.e. indeterminate values.
			</description>
		</method>
		<method name="rfind">
			<return type="int" />
			<argument index="0" name="value" type="int" />
			<argument index="1" name="from" type="int" default="-1" />
			<description>
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array. If the adjusted start index is out of bounds, this method searches from the end of the array.
			</description>
		</method>
		<method name="set">
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="byte" type="int" />
			<description>
				Changes the byte at the given index.
			</description>
		</method>
		<method name="size">
			<return type="int" />
			<description>
				Returns the number of elements in the array.
			</description>
		</method>
		<method name="sort">
			<description>
				Sorts the elements of the array in ascending order.
			</description>
		</method>
		<method name="subarray">
			<return type="PoolByteArray" />
			<argument index="0" name="from" type="int" />
			<argument index="1" name="to" type="int" />
			<description>
				Returns the slice of the [PoolByteArray] between indices (inclusive) as a new [PoolByteArray]. Any negative index is considered to be from the end of the array.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
