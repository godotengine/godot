<?xml version="1.0" encoding="UTF-8" ?>
<class name="GraphEdit" inherits="Control" experimental="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		An editor for graph-like structures, using [GraphNode]s.
	</brief_description>
	<description>
		[GraphEdit] provides tools for creation, manipulation, and display of various graphs. Its main purpose in the engine is to power the visual programming systems, such as visual shaders, but it is also available for use in user projects.
		[GraphEdit] by itself is only an empty container, representing an infinite grid where [GraphElement]s can be placed. Each [GraphElement] represents a node in the graph, a single unit of data in the connected scheme. [GraphEdit], in turn, helps to control various interactions with nodes and between nodes. When the user attempts to connect [GraphPort]s, delete a [GraphNode], or undo a graph operation, a signal is emitted in the [GraphEdit], but no action is taken by default. It is the responsibility of the programmer utilizing this control to implement the necessary logic to determine how each request should be handled.
		[b]Performance:[/b] It is greatly advised to enable low-processor usage mode (see [member OS.low_processor_usage_mode]) when using GraphEdits.
		[b]Note:[/b] Keep in mind that [method Node.get_children] will also return the connection layer node named [code]_connection_layer[/code] due to technical limitations. This behavior may change in future releases.
		See also: [GraphElement], [GraphPort], [GraphConnection]
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_get_connection_line" qualifiers="virtual const">
			<return type="PackedVector2Array" />
			<param index="0" name="from_position" type="Vector2" />
			<param index="1" name="to_position" type="Vector2" />
			<description>
				Virtual method which can be overridden to customize how connections are drawn.
			</description>
		</method>
		<method name="_is_in_port_hotzone" qualifiers="virtual">
			<return type="bool" />
			<param index="0" name="port" type="GraphPort" />
			<param index="1" name="mouse_position" type="Vector2" />
			<description>
				Returns whether the [param mouse_position] is in the [param port]'s hot zone.
				By default, a hot zone is a [Rect2] positioned at center of the port and sized automatically, but its placement can be controlled using the following Theme Properties:
				[code]hotzone_offset_h[/code] and [code]hotzone_offset_v[/code] control the hot zone's offset from the top left corner of the port, relative to its size.
				[code]hotzone_extent_h_input[/code] and [code]hotzone_extent_v_input[/code] control the hot zone's size in pixels, if it is set as an input port.
				[code]hotzone_extent_h_output[/code] and [code]hotzone_extent_v_output[/code] control the hot zone's size in pixels, if it is set as an output port.
				[code]hotzone_extent_h_undirected[/code] and [code]hotzone_extent_v_undirected[/code] control the hot zone's size in pixels, if it is set as an undirected port.
			</description>
		</method>
		<method name="_is_node_hover_valid" qualifiers="virtual">
			<return type="bool" />
			<param index="0" name="from_port" type="GraphPort" />
			<param index="1" name="to_port" type="GraphPort" />
			<description>
				This virtual method can be used to insert additional error detection while the user is dragging a connection over a valid port.
				Return [code]true[/code] if the connection is indeed valid or return [code]false[/code] if the connection is impossible. If the connection is impossible, no snapping to the port and thus no connection request to that port will happen.
				In this example a connection to same node is suppressed:
				[codeblocks]
				[gdscript]
				func _is_node_hover_valid(from_port, to_port):
					return from.get_graph_node() != to.get_graph_node()
				[/gdscript]
				[csharp]
				public override bool _IsNodeHoverValid(GraphPort fromPort, GraphPort toPort)
				{
					return fromNode.get_graph_node() != toNode.get_graph_node();
				}
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="add_connection">
			<return type="int" enum="Error" />
			<param index="0" name="connection" type="GraphConnection" />
			<description>
				Adds a [GraphConnection] to the graph.
				This connection must be between two [GraphPort]s, each of which should be referenced by a [GraphNode] that is a child of the [GraphEdit]. Alternatively, the [GraphPort] may be an independent node, in which case it must itself be a child of the [GraphEdit] (TODO: test!)
				See [method GraphEdit.connect_nodes] for creating a new connection.
			</description>
		</method>
		<method name="add_connections">
			<return type="void" />
			<param index="0" name="connections" type="GraphConnection[]" />
			<description>
				Adds a list of [GraphConnection]s to the graph.
				Equivalent to calling [method GraphEdit.add_connection] on each element of the provided array.
			</description>
		</method>
		<method name="add_valid_connection_type">
			<return type="void" />
			<param index="0" name="from_type" type="int" />
			<param index="1" name="to_type" type="int" />
			<description>
				Allows the connection between two different port types.
				Implicitly, connections made to input/output ports will use this type definition in only one direction. That is, [param from_type] will only be used for input ports, and [param to_type] will only be used for output ports. For undirected ports, this type binding is bidirectional. If bidirectionality is intended for directed ports, call this twice with the types flipped.
				See also [method is_valid_connection_type], [method remove_valid_connection_type], [enum GraphPort.PortDirection].
			</description>
		</method>
		<method name="add_valid_input_disconnect_type">
			<return type="void" />
			<param index="0" name="type" type="int" />
			<description>
				Allows dragging from an input [GraphPort] attached to this node to trigger a disconnect if it has the specified [param type]. See also [method remove_valid_input_disconnect_type].
				See also [enum GraphPort.PortDirection].
			</description>
		</method>
		<method name="add_valid_output_disconnect_type">
			<return type="void" />
			<param index="0" name="type" type="int" />
			<description>
				Allows dragging from an output [GraphPort] attached to this node to trigger a disconnect if it has the specified [param type]. See also [method remove_valid_output_disconnect_type].
				See also [enum GraphPort.PortDirection].
			</description>
		</method>
		<method name="are_nodes_connected" qualifiers="const">
			<return type="bool" />
			<param index="0" name="first_node" type="GraphNode" />
			<param index="1" name="second_node" type="GraphNode" />
			<description>
				Returns true if this graph has a [GraphConnection] between any ports on the two nodes.
			</description>
		</method>
		<method name="are_ports_connected" qualifiers="const">
			<return type="bool" />
			<param index="0" name="first_port" type="GraphPort" />
			<param index="1" name="second_port" type="GraphPort" />
			<description>
				Returns true if this graph has a [GraphConnection] between the given ports.
			</description>
		</method>
		<method name="arrange_nodes">
			<return type="void" />
			<description>
				Rearranges selected nodes in a layout with minimum crossings between connections and uniform horizontal and vertical gap between nodes.
			</description>
		</method>
		<method name="attach_graph_element_to_frame">
			<return type="void" />
			<param index="0" name="element" type="StringName" />
			<param index="1" name="frame" type="StringName" />
			<description>
				Attaches the [param element] [GraphElement] to the [param frame] [GraphFrame].
			</description>
		</method>
		<method name="clear_connections">
			<return type="void" />
			<description>
				Removes all connections between nodes.
			</description>
		</method>
		<method name="clear_node_connections">
			<return type="void" />
			<param index="0" name="node" type="GraphNode" />
			<description>
				Removes all connections on any ports on the given node.
			</description>
		</method>
		<method name="clear_port_connections">
			<return type="void" />
			<param index="0" name="port" type="GraphPort" />
			<description>
				Removes all connections on the given port.
			</description>
		</method>
		<method name="connect_nodes">
			<return type="GraphConnection" />
			<param index="0" name="first_port" type="GraphPort" />
			<param index="1" name="second_port" type="GraphPort" />
			<param index="2" name="clear_if_invalid" type="bool" default="false" />
			<description>
				Creates a new [GraphConnection] between the given ports and adds it to the graph.
				Connections with [param clear_if_invalid] set to [code]true[/code] may be deleted automatically if invalid during a redraw.
			</description>
		</method>
		<method name="detach_graph_element_from_frame">
			<return type="void" />
			<param index="0" name="element" type="StringName" />
			<description>
				Detaches the [param element] [GraphElement] from the [GraphFrame] it is currently attached to.
			</description>
		</method>
		<method name="disconnect_nodes">
			<return type="void" />
			<param index="0" name="first_port" type="GraphPort" />
			<param index="1" name="second_port" type="GraphPort" />
			<description>
				Removes a [GraphConnection] between the given ports, if one exists.
			</description>
		</method>
		<method name="force_connection_drag_end">
			<return type="void" />
			<description>
				Ends the creation of the current connection. In other words, if you are dragging a connection you can use this method to abort the process and remove the line that followed your cursor.
				This is best used together with [signal connection_drag_started] and [signal connection_drag_ended] to add custom behavior like node addition through shortcuts.
				[b]Note:[/b] This method suppresses any other connection request signals apart from [signal connection_drag_ended].
			</description>
		</method>
		<method name="get_attached_nodes_of_frame" qualifiers="const">
			<return type="StringName[]" />
			<param index="0" name="frame" type="StringName" />
			<description>
				Returns an array of node names that are attached to the [GraphFrame] with the given name.
			</description>
		</method>
		<method name="get_closest_connection_at_point" qualifiers="const">
			<return type="GraphConnection" />
			<param index="0" name="point" type="Vector2" />
			<param index="1" name="max_distance" type="float" default="4.0" />
			<description>
				Returns the closest connection to the given point in screen space. If no connection is found within [param max_distance] pixels, an invalid [GraphConnection] is returned.
				For example, getting a connection at a given mouse position can be achieved like this:
				[codeblocks]
				[gdscript]
				var connection = get_closest_connection_at_point(mouse_event.get_position())
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="get_connected_nodes" qualifiers="const">
			<return type="GraphNode[]" />
			<param index="0" name="node" type="GraphNode" />
			<description>
				Returns an [Array] of all [GraphNode]s the given [param node] is connected to in the graph.
			</description>
		</method>
		<method name="get_connected_ports" qualifiers="const">
			<return type="GraphPort[]" />
			<param index="0" name="port" type="GraphPort" />
			<description>
				Returns an [Array] of all [GraphPort]s the given [param port] is connected to in the graph.
			</description>
		</method>
		<method name="get_connection_count_by_node" qualifiers="const">
			<return type="int" />
			<param index="0" name="node" type="GraphNode" />
			<description>
				Returns the number of connections in the graph to the given [param node].
			</description>
		</method>
		<method name="get_connection_count_by_port" qualifiers="const">
			<return type="int" />
			<param index="0" name="port" type="GraphPort" />
			<description>
				Returns the number of connections in the graph to the given [param port].
			</description>
		</method>
		<method name="get_connection_line" qualifiers="const">
			<return type="PackedVector2Array" />
			<param index="0" name="from_node" type="Vector2" />
			<param index="1" name="to_node" type="Vector2" />
			<description>
				Returns the points which would make up a connection between [param from_node] and [param to_node].
			</description>
		</method>
		<method name="get_connections_by_node" qualifiers="const">
			<return type="GraphConnection[]" />
			<param index="0" name="node" type="GraphNode" />
			<description>
				Returns an [Array] of all [GraphConnection]s connected to [GraphPort]s on [param node].
			</description>
		</method>
		<method name="get_connections_by_port" qualifiers="const">
			<return type="GraphConnection[]" />
			<param index="0" name="port" type="GraphPort" />
			<description>
				Returns an [Array] of all [GraphConnection]s connected to the given [param port].
			</description>
		</method>
		<method name="get_connections_intersecting_with_rect" qualifiers="const">
			<return type="GraphConnection[]" />
			<param index="0" name="rect" type="Rect2" />
			<description>
				Returns an [Array] of all [GraphConnection]s that intersect with the given [Rect2].
			</description>
		</method>
		<method name="get_element_frame" qualifiers="const">
			<return type="GraphFrame" />
			<param index="0" name="element" type="StringName" />
			<description>
				Returns the [GraphFrame] that contains the [GraphElement] with the given name.
			</description>
		</method>
		<method name="get_filtered_connections_by_node" qualifiers="const">
			<return type="GraphConnection[]" />
			<param index="0" name="node" type="GraphNode" />
			<param index="1" name="filter_direction" type="int" enum="GraphPort.PortDirection" />
			<description>
				Returns an [Array] of all [GraphConnection]s connected to [GraphPort]s that are both attached to the [param node] and match the filter direction.
			</description>
		</method>
		<method name="get_first_connection_by_port" qualifiers="const">
			<return type="GraphConnection" />
			<param index="0" name="port" type="GraphPort" />
			<description>
				Returns the first [GraphConnection] in the graph connected to the [param port], if one exists.
			</description>
		</method>
		<method name="get_menu_hbox" qualifiers="const">
			<return type="HBoxContainer" />
			<description>
				Gets the [HBoxContainer] that contains the zooming and grid snap controls in the top left of the graph. You can use this method to reposition the toolbar or to add your own custom controls to it.
				[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
			</description>
		</method>
		<method name="is_node_connected" qualifiers="const">
			<return type="bool" />
			<param index="0" name="node" type="GraphNode" />
			<description>
				Returns [code]true[/code] if any [GraphPort] attached to the [param node] has a connection in the graph.
			</description>
		</method>
		<method name="is_port_connected" qualifiers="const">
			<return type="bool" />
			<param index="0" name="port" type="GraphPort" />
			<description>
				Returns [code]true[/code] if [param port] has any connections in the graph.
			</description>
		</method>
		<method name="is_valid_connection_type" qualifiers="const">
			<return type="bool" />
			<param index="0" name="from_type" type="int" />
			<param index="1" name="to_type" type="int" />
			<description>
				Returns whether it's possible to make a connection between two different port types.
				See also [method add_valid_connection_type] and [method remove_valid_connection_type].
			</description>
		</method>
		<method name="remove_connection">
			<return type="void" />
			<param index="0" name="connection" type="GraphConnection" />
			<description>
				Removes [param connection] from the graph. Should only be called with [GraphConnection]s in this graph.
			</description>
		</method>
		<method name="remove_valid_connection_type">
			<return type="void" />
			<param index="0" name="from_type" type="int" />
			<param index="1" name="to_type" type="int" />
			<description>
				Disallows the connection between two different port types previously allowed by [method add_valid_connection_type].
				See also [method add_valid_connection_type] and [method is_valid_connection_type].
			</description>
		</method>
		<method name="remove_valid_input_disconnect_type">
			<return type="void" />
			<param index="0" name="type" type="int" />
			<description>
				Disallows dragging from an input [GraphPort] attached to this node to trigger a disconnect if it has the specified [param type]. Use this to disable disconnection previously allowed with [method add_valid_input_disconnect_type].
				See also [enum GraphPort.PortDirection].
			</description>
		</method>
		<method name="remove_valid_output_disconnect_type">
			<return type="void" />
			<param index="0" name="type" type="int" />
			<description>
				Disallows dragging from an output [GraphPort] attached to this node to trigger a disconnect if it has the specified [param type]. Use this to disable disconnection previously allowed with [method add_valid_output_disconnect_type].
				See also [enum GraphPort.PortDirection].
			</description>
		</method>
		<method name="set_connection_activity">
			<return type="void" />
			<param index="0" name="connection" type="GraphConnection" />
			<param index="1" name="amount" type="float" />
			<description>
				Sets the coloration of the [param connection] with the color provided in the [theme_item activity] theme property. The color is linearly interpolated between the connection color and the activity color using [param amount] as weight.
			</description>
		</method>
		<method name="set_selected">
			<return type="void" />
			<param index="0" name="node" type="Node" />
			<description>
				Sets the specified [param node] as the one selected.
			</description>
		</method>
	</methods>
	<members>
		<member name="allow_self_connection" type="bool" setter="set_allow_self_connection" getter="is_self_connection_allowed" default="false">
			If [code]true[/code], allows [GraphPort]s attached to the same [GraphNode] to be connected.
		</member>
		<member name="clip_contents" type="bool" setter="set_clip_contents" getter="is_clipping_contents" overrides="Control" default="true" />
		<member name="connection_lines_antialiased" type="bool" setter="set_connection_lines_antialiased" getter="is_connection_lines_antialiased" default="true">
			If [code]true[/code], the lines between nodes will use antialiasing.
		</member>
		<member name="connection_lines_curvature" type="float" setter="set_connection_lines_curvature" getter="get_connection_lines_curvature" default="0.5">
			The curvature of the lines between the nodes. 0 results in straight lines.
		</member>
		<member name="connection_lines_thickness" type="float" setter="set_connection_lines_thickness" getter="get_connection_lines_thickness" default="4.0">
			The thickness of the lines between the nodes.
		</member>
		<member name="focus_mode" type="int" setter="set_focus_mode" getter="get_focus_mode" overrides="Control" enum="Control.FocusMode" default="2" />
		<member name="graph_connections" type="GraphConnection[]" setter="set_connections" getter="get_connections" default="[]">
			The [Array] of all [GraphConnection]s in the graph.
		</member>
		<member name="grid_pattern" type="int" setter="set_grid_pattern" getter="get_grid_pattern" enum="GraphEdit.GridPattern" default="0">
			The pattern used for drawing the grid.
		</member>
		<member name="input_disconnects" type="bool" setter="set_input_disconnects" getter="is_input_disconnects_enabled" default="false">
			If [code]true[/code], dragging from an input [GraphPort] will disconnect existing connections to the port. This feels like dragging the existing connection to a new location, rather than dragging out a new connection.
			See also [enum GraphPort.PortDirection].
		</member>
		<member name="minimap_enabled" type="bool" setter="set_minimap_enabled" getter="is_minimap_enabled" default="true">
			If [code]true[/code], the minimap is visible.
		</member>
		<member name="minimap_opacity" type="float" setter="set_minimap_opacity" getter="get_minimap_opacity" default="0.65">
			The opacity of the minimap rectangle.
		</member>
		<member name="minimap_size" type="Vector2" setter="set_minimap_size" getter="get_minimap_size" default="Vector2(240, 160)">
			The size of the minimap rectangle. The map itself is based on the size of the grid area and is scaled to fit this rectangle.
		</member>
		<member name="panning_scheme" type="int" setter="set_panning_scheme" getter="get_panning_scheme" enum="GraphEdit.PanningScheme" default="0">
			Defines the control scheme for panning with mouse wheel.
		</member>
		<member name="scroll_offset" type="Vector2" setter="set_scroll_offset" getter="get_scroll_offset" default="Vector2(0, 0)">
			The scroll offset.
		</member>
		<member name="show_arrange_button" type="bool" setter="set_show_arrange_button" getter="is_showing_arrange_button" default="true">
			If [code]true[/code], the button to automatically arrange graph nodes is visible.
		</member>
		<member name="show_grid" type="bool" setter="set_show_grid" getter="is_showing_grid" default="true">
			If [code]true[/code], the grid is visible.
		</member>
		<member name="show_grid_buttons" type="bool" setter="set_show_grid_buttons" getter="is_showing_grid_buttons" default="true">
			If [code]true[/code], buttons that allow to configure grid and snapping options are visible.
		</member>
		<member name="show_menu" type="bool" setter="set_show_menu" getter="is_showing_menu" default="true">
			If [code]true[/code], the menu toolbar is visible.
		</member>
		<member name="show_minimap_button" type="bool" setter="set_show_minimap_button" getter="is_showing_minimap_button" default="true">
			If [code]true[/code], the button to toggle the minimap is visible.
		</member>
		<member name="show_zoom_buttons" type="bool" setter="set_show_zoom_buttons" getter="is_showing_zoom_buttons" default="true">
			If [code]true[/code], buttons that allow to change and reset the zoom level are visible.
		</member>
		<member name="show_zoom_label" type="bool" setter="set_show_zoom_label" getter="is_showing_zoom_label" default="false">
			If [code]true[/code], the label with the current zoom level is visible. The zoom level is displayed in percents.
		</member>
		<member name="snapping_distance" type="int" setter="set_snapping_distance" getter="get_snapping_distance" default="20">
			The snapping distance in pixels, also determines the grid line distance.
		</member>
		<member name="snapping_enabled" type="bool" setter="set_snapping_enabled" getter="is_snapping_enabled" default="true">
			If [code]true[/code], enables snapping.
		</member>
		<member name="type_colors" type="Color[]" setter="set_type_colors" getter="get_type_colors" default="[]">
			[Array] of [Color]s used to draw [GraphPort]s, where type is used as an array index to get the associated color, if it exists.
		</member>
		<member name="type_names" type="Dictionary" setter="set_type_names" getter="get_type_names" default="{}">
			[Dictionary] of human readable port type names.
		</member>
		<member name="zoom" type="float" setter="set_zoom" getter="get_zoom" default="1.0">
			The current zoom value.
		</member>
		<member name="zoom_max" type="float" setter="set_zoom_max" getter="get_zoom_max" default="2.0736003">
			The upper zoom limit.
		</member>
		<member name="zoom_min" type="float" setter="set_zoom_min" getter="get_zoom_min" default="0.23256795">
			The lower zoom limit.
		</member>
		<member name="zoom_step" type="float" setter="set_zoom_step" getter="get_zoom_step" default="1.2">
			The step of each zoom level.
		</member>
	</members>
	<signals>
		<signal name="begin_node_move">
			<description>
				Emitted at the beginning of a [GraphElement]'s movement.
			</description>
		</signal>
		<signal name="connection_drag_ended">
			<description>
				Emitted at the end of a connection drag.
			</description>
		</signal>
		<signal name="connection_drag_started">
			<param index="0" name="from_port" type="GraphPort" />
			<param index="1" name="is_output" type="bool" />
			<description>
				Emitted at the beginning of a connection drag.
			</description>
		</signal>
		<signal name="connection_request">
			<param index="0" name="from_port" type="GraphPort" />
			<param index="1" name="to_port" type="GraphPort" />
			<description>
				Emitted when a connection between [param from_port] and [param to_port] is attempted to be created.
			</description>
		</signal>
		<signal name="connection_to_empty">
			<param index="0" name="from_port" type="GraphPort" />
			<param index="1" name="release_position" type="Vector2" />
			<description>
				Emitted when user drags a connection between [param from_port] and empty space in the graph at [param release_position].
			</description>
		</signal>
		<signal name="copy_nodes_request">
			<description>
				Emitted when this [GraphEdit] captures a [code]ui_copy[/code] action ([kbd]Ctrl + C[/kbd] by default). In general, this signal indicates that the selected [GraphElement]s should be copied.
			</description>
		</signal>
		<signal name="cut_nodes_request">
			<description>
				Emitted when this [GraphEdit] captures a [code]ui_cut[/code] action ([kbd]Ctrl + X[/kbd] by default). In general, this signal indicates that the selected [GraphElement]s should be cut.
			</description>
		</signal>
		<signal name="delete_nodes_request">
			<param index="0" name="nodes" type="StringName[]" />
			<description>
				Emitted when this [GraphEdit] captures a [code]ui_graph_delete[/code] action ([kbd]Delete[/kbd] by default).
				[param nodes] is an array of node names that should be removed. These usually include all selected nodes.
			</description>
		</signal>
		<signal name="disconnection_request">
			<param index="0" name="connection" type="GraphConnection" />
			<description>
				Emitted when the connection [param connection] is attempted to be removed.
			</description>
		</signal>
		<signal name="duplicate_nodes_request">
			<description>
				Emitted when this [GraphEdit] captures a [code]ui_graph_duplicate[/code] action ([kbd]Ctrl + D[/kbd] by default). In general, this signal indicates that the selected [GraphElement]s should be duplicated.
			</description>
		</signal>
		<signal name="end_node_move">
			<description>
				Emitted at the end of a [GraphElement]'s movement.
			</description>
		</signal>
		<signal name="frame_rect_changed">
			<param index="0" name="frame" type="GraphFrame" />
			<param index="1" name="new_rect" type="Rect2" />
			<description>
				Emitted when the [GraphFrame] [param frame] is resized to [param new_rect].
			</description>
		</signal>
		<signal name="graph_elements_linked_to_frame_request">
			<param index="0" name="elements" type="Array" />
			<param index="1" name="frame" type="StringName" />
			<description>
				Emitted when one or more [GraphElement]s are dropped onto the [GraphFrame] named [param frame], when they were not previously attached to any other one.
				[param elements] is an array of [GraphElement]s to be attached.
			</description>
		</signal>
		<signal name="node_deselected">
			<param index="0" name="node" type="Node" />
			<description>
				Emitted when the given [GraphElement] node is deselected.
			</description>
		</signal>
		<signal name="node_selected">
			<param index="0" name="node" type="Node" />
			<description>
				Emitted when the given [GraphElement] node is selected.
			</description>
		</signal>
		<signal name="paste_nodes_request">
			<description>
				Emitted when this [GraphEdit] captures a [code]ui_paste[/code] action ([kbd]Ctrl + V[/kbd] by default). In general, this signal indicates that previously copied [GraphElement]s should be pasted.
			</description>
		</signal>
		<signal name="popup_request">
			<param index="0" name="at_position" type="Vector2" />
			<description>
				Emitted when a popup is requested. Happens on right-clicking in the GraphEdit. [param at_position] is the position of the mouse pointer when the signal is sent.
			</description>
		</signal>
		<signal name="scroll_offset_changed">
			<param index="0" name="offset" type="Vector2" />
			<description>
				Emitted when the scroll offset is changed by the user. It will not be emitted when changed in code.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="SCROLL_ZOOMS" value="0" enum="PanningScheme">
			[kbd]Mouse Wheel[/kbd] will zoom, [kbd]Ctrl + Mouse Wheel[/kbd] will move the view.
		</constant>
		<constant name="SCROLL_PANS" value="1" enum="PanningScheme">
			[kbd]Mouse Wheel[/kbd] will move the view, [kbd]Ctrl + Mouse Wheel[/kbd] will zoom.
		</constant>
		<constant name="GRID_PATTERN_LINES" value="0" enum="GridPattern">
			Draw the grid using solid lines.
		</constant>
		<constant name="GRID_PATTERN_DOTS" value="1" enum="GridPattern">
			Draw the grid using dots.
		</constant>
	</constants>
	<theme_items>
		<theme_item name="activity" data_type="color" type="Color" default="Color(1, 1, 1, 1)">
			Color the connection line is interpolated to based on the activity value of a connection (see [method set_connection_activity]).
		</theme_item>
		<theme_item name="connection_hover_tint_color" data_type="color" type="Color" default="Color(0, 0, 0, 0.3)">
			Color which is blended with the connection line when the mouse is hovering over it.
		</theme_item>
		<theme_item name="connection_rim_color" data_type="color" type="Color" default="Color(0.1, 0.1, 0.1, 0.6)">
			Color of the rim around each connection line used for making intersecting lines more distinguishable.
		</theme_item>
		<theme_item name="connection_valid_target_tint_color" data_type="color" type="Color" default="Color(1, 1, 1, 0.4)">
			Color which is blended with the connection line when the currently dragged connection is hovering over a valid target port.
		</theme_item>
		<theme_item name="grid_major" data_type="color" type="Color" default="Color(1, 1, 1, 0.2)">
			Color of major grid lines/dots.
		</theme_item>
		<theme_item name="grid_minor" data_type="color" type="Color" default="Color(1, 1, 1, 0.05)">
			Color of minor grid lines/dots.
		</theme_item>
		<theme_item name="selection_fill" data_type="color" type="Color" default="Color(1, 1, 1, 0.3)">
			The fill color of the selection rectangle.
		</theme_item>
		<theme_item name="selection_stroke" data_type="color" type="Color" default="Color(1, 1, 1, 0.8)">
			The outline color of the selection rectangle.
		</theme_item>
		<theme_item name="connection_hover_thickness" data_type="constant" type="int" default="0">
			Widen the line of the connection when the mouse is hovering over it by a percentage factor. A value of [code]0[/code] disables the highlight. A value of [code]100[/code] doubles the line width.
		</theme_item>
		<theme_item name="grid_toggle" data_type="icon" type="Texture2D">
			The icon for the grid toggle button.
		</theme_item>
		<theme_item name="layout" data_type="icon" type="Texture2D">
			The icon for the layout button for auto-arranging the graph.
		</theme_item>
		<theme_item name="minimap_toggle" data_type="icon" type="Texture2D">
			The icon for the minimap toggle button.
		</theme_item>
		<theme_item name="snapping_toggle" data_type="icon" type="Texture2D">
			The icon for the snapping toggle button.
		</theme_item>
		<theme_item name="zoom_in" data_type="icon" type="Texture2D">
			The icon for the zoom in button.
		</theme_item>
		<theme_item name="zoom_out" data_type="icon" type="Texture2D">
			The icon for the zoom out button.
		</theme_item>
		<theme_item name="zoom_reset" data_type="icon" type="Texture2D">
			The icon for the zoom reset button.
		</theme_item>
		<theme_item name="menu_panel" data_type="style" type="StyleBox">
		</theme_item>
		<theme_item name="panel" data_type="style" type="StyleBox">
			The background drawn under the grid.
		</theme_item>
		<theme_item name="panel_focus" data_type="style" type="StyleBox">
			[StyleBox] used when the [GraphEdit] is focused (when used with assistive apps).
		</theme_item>
	</theme_items>
</class>
