<?xml version="1.0" encoding="UTF-8" ?>
<class name="Vector3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Vector used for 3D math.
	</brief_description>
	<description>
		3-element structure that can be used to represent positions in 3D space or any other triplet of numeric values.
		[b]Note:[/b] In a boolean context, a Vector3 will evaluate to [code]false[/code] if it's equal to [code]Vector3(0, 0, 0)[/code]. Otherwise, a Vector3 will always evaluate to [code]true[/code].
	</description>
	<tutorials>
		<link title="Math tutorial index">$DOCS_URL/tutorials/math/index.html</link>
		<link title="Vector math">$DOCS_URL/tutorials/math/vector_math.html</link>
		<link title="Advanced vector math">$DOCS_URL/tutorials/math/vectors_advanced.html</link>
		<link title="3Blue1Brown Essence of Linear Algebra">https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab</link>
		<link title="Matrix Transform Demo">https://godotengine.org/asset-library/asset/584</link>
		<link title="All 3D Demos">https://github.com/godotengine/godot-demo-projects/tree/master/3d</link>
	</tutorials>
	<methods>
		<method name="Vector3">
			<return type="Vector3" />
			<argument index="0" name="x" type="float" />
			<argument index="1" name="y" type="float" />
			<argument index="2" name="z" type="float" />
			<description>
				Returns a Vector3 with the given components.
			</description>
		</method>
		<method name="abs">
			<return type="Vector3" />
			<description>
				Returns a new vector with all components in absolute values (i.e. positive).
			</description>
		</method>
		<method name="angle_to">
			<return type="float" />
			<argument index="0" name="to" type="Vector3" />
			<description>
				Returns the unsigned minimum angle to the given vector, in radians.
			</description>
		</method>
		<method name="bounce">
			<return type="Vector3" />
			<argument index="0" name="n" type="Vector3" />
			<description>
				Returns the vector "bounced off" from a plane defined by the given normal.
			</description>
		</method>
		<method name="ceil">
			<return type="Vector3" />
			<description>
				Returns a new vector with all components rounded up (towards positive infinity).
			</description>
		</method>
		<method name="cross">
			<return type="Vector3" />
			<argument index="0" name="b" type="Vector3" />
			<description>
				Returns the cross product of this vector and [code]b[/code].
				This returns a vector perpendicular to both this and [code]b[/code], which would be the normal vector of the plane defined by the two vectors. As there are two such vectors, in opposite directions, this method returns the vector defined by a right-handed coordinate system. If the two vectors are parallel this returns an empty vector, making it useful for testing if two vectors are parallel.
			</description>
		</method>
		<method name="cubic_interpolate">
			<return type="Vector3" />
			<argument index="0" name="b" type="Vector3" />
			<argument index="1" name="pre_a" type="Vector3" />
			<argument index="2" name="post_b" type="Vector3" />
			<argument index="3" name="weight" type="float" />
			<description>
				Performs a cubic interpolation between this vector and [code]b[/code] using [code]pre_a[/code] and [code]post_b[/code] as handles, and returns the result at position [code]weight[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation.
			</description>
		</method>
		<method name="direction_to">
			<return type="Vector3" />
			<argument index="0" name="b" type="Vector3" />
			<description>
				Returns the normalized vector pointing from this vector to [code]b[/code]. This is equivalent to using [code](b - a).normalized()[/code].
			</description>
		</method>
		<method name="distance_squared_to">
			<return type="float" />
			<argument index="0" name="b" type="Vector3" />
			<description>
				Returns the squared distance between this vector and [code]b[/code].
				This method runs faster than [method distance_to], so prefer it if you need to compare vectors or need the squared distance for some formula.
			</description>
		</method>
		<method name="distance_to">
			<return type="float" />
			<argument index="0" name="b" type="Vector3" />
			<description>
				Returns the distance between this vector and [code]b[/code].
			</description>
		</method>
		<method name="dot">
			<return type="float" />
			<argument index="0" name="b" type="Vector3" />
			<description>
				Returns the dot product of this vector and [code]b[/code]. This can be used to compare the angle between two vectors. For example, this can be used to determine whether an enemy is facing the player.
				The dot product will be [code]0[/code] for a straight angle (90 degrees), greater than 0 for angles narrower than 90 degrees and lower than 0 for angles wider than 90 degrees.
				When using unit (normalized) vectors, the result will always be between [code]-1.0[/code] (180 degree angle) when the vectors are facing opposite directions, and [code]1.0[/code] (0 degree angle) when the vectors are aligned.
				[b]Note:[/b] [code]a.dot(b)[/code] is equivalent to [code]b.dot(a)[/code].
			</description>
		</method>
		<method name="floor">
			<return type="Vector3" />
			<description>
				Returns a new vector with all components rounded down (towards negative infinity).
			</description>
		</method>
		<method name="inverse">
			<return type="Vector3" />
			<description>
				Returns the inverse of the vector. This is the same as [code]Vector3( 1.0 / v.x, 1.0 / v.y, 1.0 / v.z )[/code].
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool" />
			<argument index="0" name="v" type="Vector3" />
			<description>
				Returns [code]true[/code] if this vector and [code]v[/code] are approximately equal, by running [method @GDScript.is_equal_approx] on each component.
			</description>
		</method>
		<method name="is_normalized">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the vector is normalized, [code]false[/code] otherwise.
			</description>
		</method>
		<method name="is_zero_approx">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if this vector's values are approximately zero, by running [method @GDScript.is_zero_approx] on each component.
				This method is faster than using [method is_equal_approx] with one value as a zero vector.
			</description>
		</method>
		<method name="length">
			<return type="float" />
			<description>
				Returns the length (magnitude) of this vector.
			</description>
		</method>
		<method name="length_squared">
			<return type="float" />
			<description>
				Returns the squared length (squared magnitude) of this vector.
				This method runs faster than [method length], so prefer it if you need to compare vectors or need the squared distance for some formula.
			</description>
		</method>
		<method name="limit_length">
			<return type="Vector3" />
			<argument index="0" name="length" type="float" default="1.0" />
			<description>
				Returns the vector with a maximum length by limiting its length to [code]length[/code].
			</description>
		</method>
		<method name="linear_interpolate">
			<return type="Vector3" />
			<argument index="0" name="to" type="Vector3" />
			<argument index="1" name="weight" type="float" />
			<description>
				Returns the result of the linear interpolation between this vector and [code]to[/code] by amount [code]t[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation.
			</description>
		</method>
		<method name="max_axis">
			<return type="int" />
			<description>
				Returns the axis of the vector's largest value. See [code]AXIS_*[/code] constants. If all components are equal, this method returns [constant AXIS_X].
			</description>
		</method>
		<method name="min_axis">
			<return type="int" />
			<description>
				Returns the axis of the vector's smallest value. See [code]AXIS_*[/code] constants. If all components are equal, this method returns [constant AXIS_Z].
			</description>
		</method>
		<method name="move_toward">
			<return type="Vector3" />
			<argument index="0" name="to" type="Vector3" />
			<argument index="1" name="delta" type="float" />
			<description>
				Returns a new vector moved toward [code]to[/code] by the fixed [code]delta[/code] amount. Will not go past the final value.
			</description>
		</method>
		<method name="normalized">
			<return type="Vector3" />
			<description>
				Returns the vector scaled to unit length. Equivalent to [code]v / v.length()[/code].
			</description>
		</method>
		<method name="outer">
			<return type="Basis" />
			<argument index="0" name="b" type="Vector3" />
			<description>
				Returns the outer product with [code]b[/code].
			</description>
		</method>
		<method name="posmod">
			<return type="Vector3" />
			<argument index="0" name="mod" type="float" />
			<description>
				Returns a vector composed of the [method @GDScript.fposmod] of this vector's components and [code]mod[/code].
			</description>
		</method>
		<method name="posmodv">
			<return type="Vector3" />
			<argument index="0" name="modv" type="Vector3" />
			<description>
				Returns a vector composed of the [method @GDScript.fposmod] of this vector's components and [code]modv[/code]'s components.
			</description>
		</method>
		<method name="project">
			<return type="Vector3" />
			<argument index="0" name="b" type="Vector3" />
			<description>
				Returns this vector projected onto the vector [code]b[/code].
			</description>
		</method>
		<method name="reflect">
			<return type="Vector3" />
			<argument index="0" name="n" type="Vector3" />
			<description>
				Returns this vector reflected from a plane defined by the given normal.
			</description>
		</method>
		<method name="rotated">
			<return type="Vector3" />
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="angle" type="float" />
			<description>
				Rotates this vector around a given axis by [code]angle[/code] (in radians). The axis must be a normalized vector.
			</description>
		</method>
		<method name="round">
			<return type="Vector3" />
			<description>
				Returns a new vector with all components rounded to the nearest integer, with halfway cases rounded away from zero.
			</description>
		</method>
		<method name="sign">
			<return type="Vector3" />
			<description>
				Returns a new vector with each component set to one or negative one, depending on the signs of the components. If a component is zero, it returns positive one.
			</description>
		</method>
		<method name="signed_angle_to">
			<return type="float" />
			<argument index="0" name="to" type="Vector3" />
			<argument index="1" name="axis" type="Vector3" />
			<description>
				Returns the signed angle to the given vector, in radians. The sign of the angle is positive in a counter-clockwise direction and negative in a clockwise direction when viewed from the side specified by the [code]axis[/code].
			</description>
		</method>
		<method name="slerp">
			<return type="Vector3" />
			<argument index="0" name="to" type="Vector3" />
			<argument index="1" name="weight" type="float" />
			<description>
				Returns the result of spherical linear interpolation between this vector and [code]to[/code], by amount [code]weight[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation.
				[b]Note:[/b] Both vectors must be normalized.
			</description>
		</method>
		<method name="slide">
			<return type="Vector3" />
			<argument index="0" name="n" type="Vector3" />
			<description>
				Returns this vector slid along a plane defined by the given normal.
			</description>
		</method>
		<method name="snapped">
			<return type="Vector3" />
			<argument index="0" name="by" type="Vector3" />
			<description>
				Returns this vector with each component snapped to the nearest multiple of [code]step[/code]. This can also be used to round to an arbitrary number of decimals.
			</description>
		</method>
		<method name="to_diagonal_matrix">
			<return type="Basis" />
			<description>
				Returns a diagonal matrix with the vector as main diagonal.
				This is equivalent to a Basis with no rotation or shearing and this vector's components set as the scale.
			</description>
		</method>
	</methods>
	<members>
		<member name="x" type="float" setter="" getter="" default="0.0">
			The vector's X component. Also accessible by using the index position [code][0][/code].
		</member>
		<member name="xy" type="Vector2" setter="" getter="" default="Vector2( 0, 0 )">
			A [Vector2] that represents the vector's X and Y components.
		</member>
		<member name="xz" type="Vector2" setter="" getter="" default="Vector2( 0, 0 )">
			A [Vector2] that represents the vector's X and Z components.
		</member>
		<member name="y" type="float" setter="" getter="" default="0.0">
			The vector's Y component. Also accessible by using the index position [code][1][/code].
		</member>
		<member name="yx" type="Vector2" setter="" getter="" default="Vector2( 0, 0 )">
			A [Vector2] that represents the vector's Y and X components.
		</member>
		<member name="yz" type="Vector2" setter="" getter="" default="Vector2( 0, 0 )">
			A [Vector2] that represents the vector's Y and Z components.
		</member>
		<member name="z" type="float" setter="" getter="" default="0.0">
			The vector's Z component. Also accessible by using the index position [code][2][/code].
		</member>
		<member name="zx" type="Vector2" setter="" getter="" default="Vector2( 0, 0 )">
			A [Vector2] that represents the vector's Z and X components.
		</member>
		<member name="zy" type="Vector2" setter="" getter="" default="Vector2( 0, 0 )">
			A [Vector2] that represents the vector's Z and Y components.
		</member>
	</members>
	<constants>
		<constant name="AXIS_X" value="0">
			Enumerated value for the X axis. Returned by [method max_axis] and [method min_axis].
		</constant>
		<constant name="AXIS_Y" value="1">
			Enumerated value for the Y axis. Returned by [method max_axis] and [method min_axis].
		</constant>
		<constant name="AXIS_Z" value="2">
			Enumerated value for the Z axis. Returned by [method max_axis] and [method min_axis].
		</constant>
		<constant name="ZERO" value="Vector3( 0, 0, 0 )">
			Zero vector, a vector with all components set to [code]0[/code].
		</constant>
		<constant name="ONE" value="Vector3( 1, 1, 1 )">
			One vector, a vector with all components set to [code]1[/code].
		</constant>
		<constant name="INF" value="Vector3( inf, inf, inf )">
			Infinity vector, a vector with all components set to [constant @GDScript.INF].
		</constant>
		<constant name="LEFT" value="Vector3( -1, 0, 0 )">
			Left unit vector. Represents the local direction of left, and the global direction of west.
		</constant>
		<constant name="RIGHT" value="Vector3( 1, 0, 0 )">
			Right unit vector. Represents the local direction of right, and the global direction of east.
		</constant>
		<constant name="UP" value="Vector3( 0, 1, 0 )">
			Up unit vector.
		</constant>
		<constant name="DOWN" value="Vector3( 0, -1, 0 )">
			Down unit vector.
		</constant>
		<constant name="FORWARD" value="Vector3( 0, 0, -1 )">
			Forward unit vector. Represents the local direction of forward, and the global direction of north.
		</constant>
		<constant name="BACK" value="Vector3( 0, 0, 1 )">
			Back unit vector. Represents the local direction of back, and the global direction of south.
		</constant>
	</constants>
</class>
