<?xml version="1.0" encoding="UTF-8" ?>
<class name="PrimitiveMesh" inherits="Mesh" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.
	</brief_description>
	<description>
		Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh. Examples include [BoxMesh], [CapsuleMesh], [CylinderMesh], [PlaneMesh], [PrismMesh], and [SphereMesh].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_create_mesh_array" qualifiers="virtual const">
			<return type="Array" />
			<description>
				Override this method to customize how this primitive mesh should be generated. Should return an [Array] where each element is another Array of values required for the mesh (see the [enum Mesh.ArrayType] constants).
			</description>
		</method>
		<method name="get_mesh_arrays" qualifiers="const">
			<return type="Array" />
			<description>
				Returns mesh arrays used to constitute surface of [Mesh]. The result can be passed to [method ArrayMesh.add_surface_from_arrays] to create a new surface. For example:
				[codeblocks]
				[gdscript]
				var c = CylinderMesh.new()
				var arr_mesh = ArrayMesh.new()
				arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, c.get_mesh_arrays())
				[/gdscript]
				[csharp]
				var c = new CylinderMesh();
				var arrMesh = new ArrayMesh();
				arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, c.GetMeshArrays());
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="request_update">
			<return type="void" />
			<description>
				Request an update of this primitive mesh based on its properties.
			</description>
		</method>
	</methods>
	<members>
		<member name="add_uv2" type="bool" setter="set_add_uv2" getter="get_add_uv2" default="false">
			If set, generates UV2 UV coordinates applying a padding using the [member uv2_padding] setting. UV2 is needed for lightmapping.
		</member>
		<member name="custom_aabb" type="AABB" setter="set_custom_aabb" getter="get_custom_aabb" default="AABB(0, 0, 0, 0, 0, 0)">
			Overrides the [AABB] with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when using a shader to offset vertices.
		</member>
		<member name="flip_faces" type="bool" setter="set_flip_faces" getter="get_flip_faces" default="false">
			If set, the order of the vertices in each triangle are reversed resulting in the backside of the mesh being drawn.
			This gives the same result as using [constant BaseMaterial3D.CULL_FRONT] in [member BaseMaterial3D.cull_mode].
		</member>
		<member name="material" type="Material" setter="set_material" getter="get_material">
			The current [Material] of the primitive mesh.
		</member>
		<member name="uv2_padding" type="float" setter="set_uv2_padding" getter="get_uv2_padding" default="2.0">
			If [member add_uv2] is set, specifies the padding in pixels applied along seams of the mesh. Lower padding values allow making better use of the lightmap texture (resulting in higher texel density), but may introduce visible lightmap bleeding along edges.
			If the size of the lightmap texture can't be determined when generating the mesh, UV2 is calculated assuming a texture size of 1024x1024.
		</member>
	</members>
</class>
