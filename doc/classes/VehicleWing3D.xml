<?xml version="1.0" encoding="UTF-8" ?>
<class name="VehicleWing3D" inherits="Node3D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A 3D object for a [VehicleBody3D] that simulates the behavior of a wing.
	</brief_description>
	<description>
		A node used as a child of a [VehicleBody3D] parent to simulate the behavior of one of its wings. There are settings for flexible adjustment of the wing shape, control surfaces and aerodynamics. The wing is divided into multiple sections for precise forces calculation during aircraft rotation.
		The aerodynamic formulas used here are from the paper "Real-time modeling of agile fixed-wing UAV aerodynamics" by Khan and Nahon 2015 https://www.researchgate.net/publication/264773227_Dynamics_Modeling_of_a_Highly-Maneuverable_Fixed-Wing_UAV.
		It seems these formulas overestimate drag, so the alternative_drag enables a different calculation method from another paper https://www.aerodynamics4students.com/
		[b]Note:[/b] It's important to disable damping in VehicleBody3D — the wings already create enough drag.
		[b]Note:[/b] Use Custom Center of Mass Mode in VehicleBody3D because wing positioning relative to the center of mass is critical - wings should be placed near the center of mass.
		[b]Note:[/b] When shape parameters are modified, the wing adapts to maintain the center of pressure at the wing node's position.
	</description>
	<tutorials>
		<link title="3D Aircraft Demo">https://github.com/godotengine/godot-demo-projects/tree/master/3d/aircraft</link>
	</tutorials>
	<methods>
		<method name="calculate">
			<return type="void" />
			<param index="0" name="linear_velocity" type="Vector3" />
			<param index="1" name="angular_velocity" type="Vector3" />
			<param index="2" name="p_center_of_mass" type="Vector3" />
			<description>
				Мanual calculation of the force and torque generated by the wing. For example, to plot graphs.
			</description>
		</method>
		<method name="get_force" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the force generated by the wing.
			</description>
		</method>
		<method name="get_mac" qualifiers="const">
			<return type="float" />
			<description>
				Returns the mean aerodynamic chord of wing.
			</description>
		</method>
		<method name="get_section_angle_of_attack" qualifiers="const">
			<return type="float" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the current angle of attack of the wing section.
			</description>
		</method>
		<method name="get_section_chord" qualifiers="const">
			<return type="float" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the chord of the wing section.
			</description>
		</method>
		<method name="get_section_control_surface_angle" qualifiers="const">
			<return type="float" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the control surface angle of the wing section.
			</description>
		</method>
		<method name="get_section_control_surface_fraction" qualifiers="const">
			<return type="float" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the control surface fraction of the wing section.
			</description>
		</method>
		<method name="get_section_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of wing sections.
			</description>
		</method>
		<method name="get_section_length" qualifiers="const">
			<return type="float" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the length of the wing section.
			</description>
		</method>
		<method name="get_section_transform" qualifiers="const">
			<return type="Transform3D" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the transform of the wing section.
			</description>
		</method>
		<method name="get_torque" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the torque generated by the wing.
			</description>
		</method>
		<method name="is_section_stall" qualifiers="const">
			<return type="bool" />
			<param index="0" name="index" type="int" />
			<description>
				Determines whether the wing section is currently in a stalled.
			</description>
		</method>
		<method name="is_section_stall_warning" qualifiers="const">
			<return type="bool" />
			<param index="0" name="index" type="int" />
			<description>
				Determines whether the wing section is currently in a stalled.
			</description>
		</method>
	</methods>
	<members>
		<member name="aileron_angle_max" type="float" setter="set_aileron_angle_max" getter="get_aileron_angle_max" default="0.261799">
			Мaximum positive aileron angle.
		</member>
		<member name="aileron_angle_min" type="float" setter="set_aileron_angle_min" getter="get_aileron_angle_min" default="-0.261799">
			Мinimum negative aileron angle.
		</member>
		<member name="aileron_end" type="float" setter="set_aileron_end" getter="get_aileron_end" default="0.9">
			Aileron end relative to wing length.
		</member>
		<member name="aileron_fraction" type="float" setter="set_aileron_fraction" getter="get_aileron_fraction" default="0.2">
			Aileron fraction relative to wing chord.
		</member>
		<member name="aileron_start" type="float" setter="set_aileron_start" getter="get_aileron_start" default="0.5">
			Aileron start relative to wing length.
		</member>
		<member name="aileron_value" type="float" setter="set_aileron_value" getter="get_aileron_value" default="0.0">
			Controls the aileron angle. Values in the range (-1, 1) change the aileron angle from minimum to maximum angle. Ailerons at opposite ends of the wing deflect in opposite directions.
		</member>
		<member name="alternative_drag" type="bool" setter="set_alternative_drag" getter="get_alternative_drag" default="false">
			Enables an alternative drag calculation method. If the aircraft seems to have too much drag, enable this option. Also, make sure to disable damping in the VehicleBody3D.
		</member>
		<member name="chord" type="float" setter="set_chord" getter="get_chord" default="0.5">
			Wing chord at the base.
		</member>
		<member name="density" type="float" setter="set_density" getter="get_density" default="1.2255">
			Air density.
		</member>
		<member name="dihedral" type="float" setter="set_dihedral" getter="get_dihedral" default="0.0">
			Wing dihedral angle.
		</member>
		<member name="flap_angle_max" type="float" setter="set_flap_angle_max" getter="get_flap_angle_max" default="0.523599">
			Мaximum positive flap angle.
		</member>
		<member name="flap_angle_min" type="float" setter="set_flap_angle_min" getter="get_flap_angle_min" default="-0.523599">
			Мinimum negative flap angle.
		</member>
		<member name="flap_end" type="float" setter="set_flap_end" getter="get_flap_end" default="0.4">
			Flap end relative to wing length.
		</member>
		<member name="flap_fraction" type="float" setter="set_flap_fraction" getter="get_flap_fraction" default="0.3">
			Flap fraction relative to wing chord.
		</member>
		<member name="flap_start" type="float" setter="set_flap_start" getter="get_flap_start" default="0.1">
			Flap start relative to wing length.
		</member>
		<member name="flap_value" type="float" setter="set_flap_value" getter="get_flap_value" default="0.0">
			Controls the flap angle. Values in the range (-1, 1) change the flap angle from minimum to maximum angle. Flaps on opposite ends of the wing deflect in the same direction.
		</member>
		<member name="lift_slope" type="float" setter="set_lift_slope" getter="get_lift_slope" default="6.28319">
			Determines how quickly the lift increases with the angle of rotation. For a normal wing it is 2 * PI.
		</member>
		<member name="mirror" type="bool" setter="set_mirror" getter="is_mirror" default="true">
			Mirror wing on x axis.
		</member>
		<member name="offset" type="float" setter="set_offset" getter="get_offset" default="0.0">
			X-axis offset. The mirror part of the wing has the opposite offset.
		</member>
		<member name="restore_stall_angle" type="float" setter="set_restore_stall_angle" getter="get_restore_stall_angle" default="0.0872665">
			Stall hysteresis is implemented here. This parameter determines the angle of attack at which normal flight conditions are restored after stall.
		</member>
		<member name="span" type="float" setter="set_span" getter="get_span" default="4.0">
			Wing span. Distance between wingtips.
		</member>
		<member name="stall_angle_max" type="float" setter="set_stall_angle_max" getter="get_stall_angle_max" default="0.279253">
			Positive stall angle.
		</member>
		<member name="stall_angle_min" type="float" setter="set_stall_angle_min" getter="get_stall_angle_min" default="-0.279253">
			Negative stall angle.
		</member>
		<member name="stall_width" type="float" setter="set_stall_width" getter="get_stall_width" default="0.10472">
			Distance in degrees between the beginning of the stall and the complete stall.
		</member>
		<member name="surface_friction" type="float" setter="set_surface_friction" getter="get_surface_friction" default="0.023">
			Surface friction factor.
		</member>
		<member name="sweep" type="float" setter="set_sweep" getter="get_sweep" default="0.0">
			Wing sweep angle.
		</member>
		<member name="taper" type="float" setter="set_taper" getter="get_taper" default="1.0">
			Taper of the wing at the tip relative to the base.
		</member>
		<member name="twist" type="float" setter="set_twist" getter="get_twist" default="0.0">
			Wing twist angle.
		</member>
		<member name="zero_lift_angle" type="float" setter="set_zero_lift_angle" getter="get_zero_lift_angle" default="0.0">
			Zero lift angle of attack.
		</member>
	</members>
</class>
