<?xml version="1.0" encoding="UTF-8" ?>
<class name="Transform3D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A 3×4 matrix representing a 3D transformation.
	</brief_description>
	<description>
		A 3×4 matrix (3 rows, 4 columns) used for 3D linear transformations. It can represent transformations such as translation, rotation, and scaling. It consists of a [member basis] (first 3 columns) and a [Vector3] for the [member origin] (last column).
		For more information, read the "Matrices and transforms" documentation article.
	</description>
	<tutorials>
		<link title="Math documentation index">$DOCS_URL/tutorials/math/index.html</link>
		<link title="Matrices and transforms">$DOCS_URL/tutorials/math/matrices_and_transforms.html</link>
		<link title="Using 3D transforms">$DOCS_URL/tutorials/3d/using_transforms.html</link>
		<link title="Matrix Transform Demo">https://godotengine.org/asset-library/asset/584</link>
		<link title="3D Platformer Demo">https://godotengine.org/asset-library/asset/125</link>
		<link title="2.5D Demo">https://godotengine.org/asset-library/asset/583</link>
	</tutorials>
	<constructors>
		<constructor name="Transform3D">
			<return type="Transform3D" />
			<description>
				Constructs a default-initialized [Transform3D] set to [constant IDENTITY].
			</description>
		</constructor>
		<constructor name="Transform3D">
			<return type="Transform3D" />
			<param index="0" name="from" type="Transform3D" />
			<description>
				Constructs a [Transform3D] as a copy of the given [Transform3D].
			</description>
		</constructor>
		<constructor name="Transform3D">
			<return type="Transform3D" />
			<param index="0" name="basis" type="Basis" />
			<param index="1" name="origin" type="Vector3" />
			<description>
				Constructs a Transform3D from a [Basis] and [Vector3].
			</description>
		</constructor>
		<constructor name="Transform3D">
			<return type="Transform3D" />
			<param index="0" name="from" type="Projection" />
			<description>
				Constructs a Transform3D from a [Projection] by trimming the last row of the projection matrix ([code]from.x.w[/code], [code]from.y.w[/code], [code]from.z.w[/code], and [code]from.w.w[/code] are not copied over).
			</description>
		</constructor>
		<constructor name="Transform3D">
			<return type="Transform3D" />
			<param index="0" name="x_axis" type="Vector3" />
			<param index="1" name="y_axis" type="Vector3" />
			<param index="2" name="z_axis" type="Vector3" />
			<param index="3" name="origin" type="Vector3" />
			<description>
				Constructs a Transform3D from four [Vector3] values (matrix columns). Each axis corresponds to local basis vectors (some of which may be scaled).
			</description>
		</constructor>
	</constructors>
	<methods>
		<method name="affine_inverse" qualifiers="const">
			<return type="Transform3D" />
			<description>
				Returns the inverse of the transform, under the assumption that the basis is invertible (must have non-zero determinant).
			</description>
		</method>
		<method name="interpolate_with" qualifiers="const">
			<return type="Transform3D" />
			<param index="0" name="xform" type="Transform3D" />
			<param index="1" name="weight" type="float" />
			<description>
				Returns a transform interpolated between this transform and another by a given [param weight] (on the range of 0.0 to 1.0).
			</description>
		</method>
		<method name="inverse" qualifiers="const">
			<return type="Transform3D" />
			<description>
				Returns the inverse of the transform, under the assumption that the transformation basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not). Use [method affine_inverse] for non-orthonormal transforms (e.g. with scaling).
			</description>
		</method>
		<method name="is_equal_approx" qualifiers="const">
			<return type="bool" />
			<param index="0" name="xform" type="Transform3D" />
			<description>
				Returns [code]true[/code] if this transform and [param xform] are approximately equal, by running [method @GlobalScope.is_equal_approx] on each component.
			</description>
		</method>
		<method name="is_finite" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if this transform is finite, by calling [method @GlobalScope.is_finite] on each component.
			</description>
		</method>
		<method name="looking_at" qualifiers="const">
			<return type="Transform3D" />
			<param index="0" name="target" type="Vector3" />
			<param index="1" name="up" type="Vector3" default="Vector3(0, 1, 0)" />
			<param index="2" name="use_model_front" type="bool" default="false" />
			<description>
				Returns a copy of the transform rotated such that the forward axis (-Z) points towards the [param target] position.
				The up axis (+Y) points as close to the [param up] vector as possible while staying perpendicular to the forward axis. The resulting transform is orthonormalized. The existing rotation, scale, and skew information from the original transform is discarded. The [param target] and [param up] vectors cannot be zero, cannot be parallel to each other, and are defined in global/parent space.
				If [param use_model_front] is [code]true[/code], the +Z axis (asset front) is treated as forward (implies +X is left) and points toward the [param target] position. By default, the -Z axis (camera forward) is treated as forward (implies +X is right).
			</description>
		</method>
		<method name="orthonormalized" qualifiers="const">
			<return type="Transform3D" />
			<description>
				Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors (scale of 1 or -1).
			</description>
		</method>
		<method name="rotated" qualifiers="const">
			<return type="Transform3D" />
			<param index="0" name="axis" type="Vector3" />
			<param index="1" name="angle" type="float" />
			<description>
				Returns a copy of the transform rotated around the given [param axis] by the given [param angle] (in radians).
				The [param axis] must be a normalized vector.
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding rotation transform [code]R[/code] from the left, i.e., [code]R * X[/code].
				This can be seen as transforming with respect to the global/parent frame.
			</description>
		</method>
		<method name="rotated_local" qualifiers="const">
			<return type="Transform3D" />
			<param index="0" name="axis" type="Vector3" />
			<param index="1" name="angle" type="float" />
			<description>
				Returns a copy of the transform rotated around the given [param axis] by the given [param angle] (in radians).
				The [param axis] must be a normalized vector.
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding rotation transform [code]R[/code] from the right, i.e., [code]X * R[/code].
				This can be seen as transforming with respect to the local frame.
			</description>
		</method>
		<method name="scaled" qualifiers="const">
			<return type="Transform3D" />
			<param index="0" name="scale" type="Vector3" />
			<description>
				Returns a copy of the transform scaled by the given [param scale] factor.
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding scaling transform [code]S[/code] from the left, i.e., [code]S * X[/code].
				This can be seen as transforming with respect to the global/parent frame.
			</description>
		</method>
		<method name="scaled_local" qualifiers="const">
			<return type="Transform3D" />
			<param index="0" name="scale" type="Vector3" />
			<description>
				Returns a copy of the transform scaled by the given [param scale] factor.
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding scaling transform [code]S[/code] from the right, i.e., [code]X * S[/code].
				This can be seen as transforming with respect to the local frame.
			</description>
		</method>
		<method name="translated" qualifiers="const">
			<return type="Transform3D" />
			<param index="0" name="offset" type="Vector3" />
			<description>
				Returns a copy of the transform translated by the given [param offset].
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding translation transform [code]T[/code] from the left, i.e., [code]T * X[/code].
				This can be seen as transforming with respect to the global/parent frame.
			</description>
		</method>
		<method name="translated_local" qualifiers="const">
			<return type="Transform3D" />
			<param index="0" name="offset" type="Vector3" />
			<description>
				Returns a copy of the transform translated by the given [param offset].
				This method is an optimized version of multiplying the given transform [code]X[/code] with a corresponding translation transform [code]T[/code] from the right, i.e., [code]X * T[/code].
				This can be seen as transforming with respect to the local frame.
			</description>
		</method>
	</methods>
	<members>
		<member name="basis" type="Basis" setter="" getter="" default="Basis(1, 0, 0, 0, 1, 0, 0, 0, 1)">
			The basis is a matrix containing 3 [Vector3] as its columns: X axis, Y axis, and Z axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object.
		</member>
		<member name="origin" type="Vector3" setter="" getter="" default="Vector3(0, 0, 0)">
			The translation offset of the transform (column 3, the fourth column). Equivalent to array index [code]3[/code].
		</member>
	</members>
	<constants>
		<constant name="IDENTITY" value="Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)">
			[Transform3D] with no translation, rotation or scaling applied. When applied to other data structures, [constant IDENTITY] performs no transformation.
		</constant>
		<constant name="FLIP_X" value="Transform3D(-1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)">
			[Transform3D] with mirroring applied perpendicular to the YZ plane.
		</constant>
		<constant name="FLIP_Y" value="Transform3D(1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0)">
			[Transform3D] with mirroring applied perpendicular to the XZ plane.
		</constant>
		<constant name="FLIP_Z" value="Transform3D(1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0)">
			[Transform3D] with mirroring applied perpendicular to the XY plane.
		</constant>
	</constants>
	<operators>
		<operator name="operator !=">
			<return type="bool" />
			<param index="0" name="right" type="Transform3D" />
			<description>
				Returns [code]true[/code] if the transforms are not equal.
				[b]Note:[/b] Due to floating-point precision errors, consider using [method is_equal_approx] instead, which is more reliable.
			</description>
		</operator>
		<operator name="operator *">
			<return type="AABB" />
			<param index="0" name="right" type="AABB" />
			<description>
				Transforms (multiplies) the [AABB] by the given [Transform3D] matrix.
			</description>
		</operator>
		<operator name="operator *">
			<return type="PackedVector3Array" />
			<param index="0" name="right" type="PackedVector3Array" />
			<description>
				Transforms (multiplies) each element of the [Vector3] array by the given [Transform3D] matrix.
			</description>
		</operator>
		<operator name="operator *">
			<return type="Plane" />
			<param index="0" name="right" type="Plane" />
			<description>
				Transforms (multiplies) the [Plane] by the given [Transform3D] transformation matrix.
			</description>
		</operator>
		<operator name="operator *">
			<return type="Transform3D" />
			<param index="0" name="right" type="Transform3D" />
			<description>
				Composes these two transformation matrices by multiplying them together. This has the effect of transforming the second transform (the child) by the first transform (the parent).
			</description>
		</operator>
		<operator name="operator *">
			<return type="Vector3" />
			<param index="0" name="right" type="Vector3" />
			<description>
				Transforms (multiplies) the [Vector3] by the given [Transform3D] matrix.
			</description>
		</operator>
		<operator name="operator *">
			<return type="Transform3D" />
			<param index="0" name="right" type="float" />
			<description>
				This operator multiplies all components of the [Transform3D], including the [member origin] vector, which scales it uniformly.
			</description>
		</operator>
		<operator name="operator *">
			<return type="Transform3D" />
			<param index="0" name="right" type="int" />
			<description>
				This operator multiplies all components of the [Transform3D], including the [member origin] vector, which scales it uniformly.
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<param index="0" name="right" type="Transform3D" />
			<description>
				Returns [code]true[/code] if the transforms are exactly equal.
				[b]Note:[/b] Due to floating-point precision errors, consider using [method is_equal_approx] instead, which is more reliable.
			</description>
		</operator>
	</operators>
</class>
