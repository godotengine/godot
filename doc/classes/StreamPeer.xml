<?xml version="1.0" encoding="UTF-8" ?>
<class name="StreamPeer" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Abstract base class for interacting with streams.
	</brief_description>
	<description>
		StreamPeer is an abstract base class mostly used for stream-based protocols (such as TCP). It provides an API for sending and receiving data through streams as raw data or strings.
		[b]Note:[/b] When exporting to Android, make sure to enable the [code]INTERNET[/code] permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_8">
			<return type="int" />
			<description>
				Gets a signed byte from the stream.
			</description>
		</method>
		<method name="get_16">
			<return type="int" />
			<description>
				Gets a signed 16-bit value from the stream.
			</description>
		</method>
		<method name="get_32">
			<return type="int" />
			<description>
				Gets a signed 32-bit value from the stream.
			</description>
		</method>
		<method name="get_64">
			<return type="int" />
			<description>
				Gets a signed 64-bit value from the stream.
			</description>
		</method>
		<method name="get_available_bytes" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of bytes this [StreamPeer] has available.
			</description>
		</method>
		<method name="get_data">
			<return type="Array" />
			<param index="0" name="bytes" type="int" />
			<description>
				Returns a chunk data with the received bytes. The number of bytes to be received can be requested in the [param bytes] argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an [enum Error] code and a data array.
			</description>
		</method>
		<method name="get_double">
			<return type="float" />
			<description>
				Gets a double-precision float from the stream.
			</description>
		</method>
		<method name="get_float">
			<return type="float" />
			<description>
				Gets a single-precision float from the stream.
			</description>
		</method>
		<method name="get_half">
			<return type="float" />
			<description>
				Gets a half-precision float from the stream.
			</description>
		</method>
		<method name="get_partial_data">
			<return type="Array" />
			<param index="0" name="bytes" type="int" />
			<description>
				Returns a chunk data with the received bytes. The number of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an [enum Error] code, and a data array.
			</description>
		</method>
		<method name="get_string">
			<return type="String" />
			<param index="0" name="bytes" type="int" default="-1" />
			<description>
				Gets an ASCII string with byte-length [param bytes] from the stream. If [param bytes] is negative (default) the length will be read from the stream using the reverse process of [method put_string].
			</description>
		</method>
		<method name="get_u8">
			<return type="int" />
			<description>
				Gets an unsigned byte from the stream.
			</description>
		</method>
		<method name="get_u16">
			<return type="int" />
			<description>
				Gets an unsigned 16-bit value from the stream.
			</description>
		</method>
		<method name="get_u32">
			<return type="int" />
			<description>
				Gets an unsigned 32-bit value from the stream.
			</description>
		</method>
		<method name="get_u64">
			<return type="int" />
			<description>
				Gets an unsigned 64-bit value from the stream.
			</description>
		</method>
		<method name="get_utf8_string">
			<return type="String" />
			<param index="0" name="bytes" type="int" default="-1" />
			<description>
				Gets a UTF-8 string with byte-length [param bytes] from the stream (this decodes the string sent as UTF-8). If [param bytes] is negative (default) the length will be read from the stream using the reverse process of [method put_utf8_string].
			</description>
		</method>
		<method name="get_var">
			<return type="Variant" />
			<param index="0" name="allow_objects" type="bool" default="false" />
			<description>
				Gets a Variant from the stream. If [param allow_objects] is [code]true[/code], decoding objects is allowed.
				Internally, this uses the same decoding mechanism as the [method @GlobalScope.bytes_to_var] method.
				[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
			</description>
		</method>
		<method name="put_8">
			<return type="void" />
			<param index="0" name="value" type="int" />
			<description>
				Puts a signed byte into the stream.
			</description>
		</method>
		<method name="put_16">
			<return type="void" />
			<param index="0" name="value" type="int" />
			<description>
				Puts a signed 16-bit value into the stream.
			</description>
		</method>
		<method name="put_32">
			<return type="void" />
			<param index="0" name="value" type="int" />
			<description>
				Puts a signed 32-bit value into the stream.
			</description>
		</method>
		<method name="put_64">
			<return type="void" />
			<param index="0" name="value" type="int" />
			<description>
				Puts a signed 64-bit value into the stream.
			</description>
		</method>
		<method name="put_data">
			<return type="int" enum="Error" />
			<param index="0" name="data" type="PackedByteArray" />
			<description>
				Sends a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an [enum Error] code.
			</description>
		</method>
		<method name="put_double">
			<return type="void" />
			<param index="0" name="value" type="float" />
			<description>
				Puts a double-precision float into the stream.
			</description>
		</method>
		<method name="put_float">
			<return type="void" />
			<param index="0" name="value" type="float" />
			<description>
				Puts a single-precision float into the stream.
			</description>
		</method>
		<method name="put_half">
			<return type="void" />
			<param index="0" name="value" type="float" />
			<description>
				Puts a half-precision float into the stream.
			</description>
		</method>
		<method name="put_partial_data">
			<return type="Array" />
			<param index="0" name="data" type="PackedByteArray" />
			<description>
				Sends a chunk of data through the connection. If all the data could not be sent at once, only part of it will. This function returns two values, an [enum Error] code and an integer, describing how much data was actually sent.
			</description>
		</method>
		<method name="put_string">
			<return type="void" />
			<param index="0" name="value" type="String" />
			<description>
				Puts a zero-terminated ASCII string into the stream prepended by a 32-bit unsigned integer representing its size.
				[b]Note:[/b] To put an ASCII string without prepending its size, you can use [method put_data]:
				[codeblocks]
				[gdscript]
				put_data("Hello world".to_ascii_buffer())
				[/gdscript]
				[csharp]
				PutData("Hello World".ToAsciiBuffer());
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="put_u8">
			<return type="void" />
			<param index="0" name="value" type="int" />
			<description>
				Puts an unsigned byte into the stream.
			</description>
		</method>
		<method name="put_u16">
			<return type="void" />
			<param index="0" name="value" type="int" />
			<description>
				Puts an unsigned 16-bit value into the stream.
			</description>
		</method>
		<method name="put_u32">
			<return type="void" />
			<param index="0" name="value" type="int" />
			<description>
				Puts an unsigned 32-bit value into the stream.
			</description>
		</method>
		<method name="put_u64">
			<return type="void" />
			<param index="0" name="value" type="int" />
			<description>
				Puts an unsigned 64-bit value into the stream.
			</description>
		</method>
		<method name="put_utf8_string">
			<return type="void" />
			<param index="0" name="value" type="String" />
			<description>
				Puts a zero-terminated UTF-8 string into the stream prepended by a 32 bits unsigned integer representing its size.
				[b]Note:[/b] To put a UTF-8 string without prepending its size, you can use [method put_data]:
				[codeblocks]
				[gdscript]
				put_data("Hello world".to_utf8_buffer())
				[/gdscript]
				[csharp]
				PutData("Hello World".ToUtf8Buffer());
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="put_var">
			<return type="void" />
			<param index="0" name="value" type="Variant" />
			<param index="1" name="full_objects" type="bool" default="false" />
			<description>
				Puts a Variant into the stream. If [param full_objects] is [code]true[/code] encoding objects is allowed (and can potentially include code).
				Internally, this uses the same encoding mechanism as the [method @GlobalScope.var_to_bytes] method.
			</description>
		</method>
	</methods>
	<members>
		<member name="big_endian" type="bool" setter="set_big_endian" getter="is_big_endian_enabled" default="false">
			If [code]true[/code], this [StreamPeer] will using big-endian format for encoding and decoding.
		</member>
	</members>
</class>
