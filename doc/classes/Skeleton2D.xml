<?xml version="1.0" encoding="UTF-8" ?>
<class name="Skeleton2D" inherits="Node2D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		The parent of a hierarchy of [Bone2D]s, used to create a 2D skeletal animation.
	</brief_description>
	<description>
		[Skeleton2D] parents a hierarchy of [Bone2D] nodes. It holds a reference to each [Bone2D]'s rest pose and acts as a single point of access to its bones.
		To set up different types of inverse kinematics for the given Skeleton2D, a [SkeletonModificationStack2D] should be created. The inverse kinematics be applied by increasing [member SkeletonModificationStack2D.modification_count] and creating the desired number of modifications.
	</description>
	<tutorials>
		<link title="2D skeletons">$DOCS_URL/tutorials/animation/2d_skeletons.html</link>
	</tutorials>
	<methods>
		<method name="execute_modifications">
			<return type="void" />
			<param index="0" name="delta" type="float" />
			<param index="1" name="execution_mode" type="int" />
			<description>
				Executes all the modifications on the [SkeletonModificationStack2D], if the Skeleton2D has one assigned.
			</description>
		</method>
		<method name="get_bone">
			<return type="Bone2D" />
			<param index="0" name="idx" type="int" />
			<description>
				Returns a [Bone2D] from the node hierarchy parented by Skeleton2D. The object to return is identified by the parameter [param idx]. Bones are indexed by descending the node hierarchy from top to bottom, adding the children of each branch before moving to the next sibling.
			</description>
		</method>
		<method name="get_bone_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of [Bone2D] nodes in the node hierarchy parented by Skeleton2D.
			</description>
		</method>
		<method name="get_bone_local_pose_override">
			<return type="Transform2D" />
			<param index="0" name="bone_idx" type="int" />
			<description>
				Returns the local pose override transform for [param bone_idx].
			</description>
		</method>
		<method name="get_modification_stack" qualifiers="const">
			<return type="SkeletonModificationStack2D" />
			<description>
				Returns the [SkeletonModificationStack2D] attached to this skeleton, if one exists.
			</description>
		</method>
		<method name="get_skeleton" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the [RID] of a Skeleton2D instance.
			</description>
		</method>
		<method name="set_bone_local_pose_override">
			<return type="void" />
			<param index="0" name="bone_idx" type="int" />
			<param index="1" name="override_pose" type="Transform2D" />
			<param index="2" name="strength" type="float" />
			<param index="3" name="persistent" type="bool" />
			<description>
				Sets the local pose transform, [param override_pose], for the bone at [param bone_idx].
				[param strength] is the interpolation strength that will be used when applying the pose, and [param persistent] determines if the applied pose will remain.
				[b]Note:[/b] The pose transform needs to be a local transform relative to the [Bone2D] node at [param bone_idx]!
			</description>
		</method>
		<method name="set_modification_stack">
			<return type="void" />
			<param index="0" name="modification_stack" type="SkeletonModificationStack2D" />
			<description>
				Sets the [SkeletonModificationStack2D] attached to this skeleton.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="bone_setup_changed">
			<description>
				Emitted when the [Bone2D] setup attached to this skeletons changes. This is primarily used internally within the skeleton.
			</description>
		</signal>
	</signals>
</class>
