<?xml version="1.0" encoding="UTF-8" ?>
<class name="Camera2D" inherits="Node2D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Camera node for 2D scenes.
	</brief_description>
	<description>
		Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem]-based nodes.
		Cameras register themselves in the nearest [Viewport] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport.
		This node is intended to be a simple helper to get things going quickly, but more functionality may be desired to change how the camera works. To make your own custom camera node, inherit it from [Node2D] and change the transform of the canvas by setting [member Viewport.canvas_transform] in [Viewport] (you can obtain the current [Viewport] by using [method Node.get_viewport]).
		Note that the [Camera2D] node's [code]position[/code] doesn't represent the actual position of the screen, which may differ due to applied smoothing or limits. You can use [method get_screen_center_position] to get the real position.
	</description>
	<tutorials>
		<link title="2D Platformer Demo">https://godotengine.org/asset-library/asset/2727</link>
		<link title="2D Isometric Demo">https://godotengine.org/asset-library/asset/2718</link>
	</tutorials>
	<methods>
		<method name="align">
			<return type="void" />
			<description>
				Aligns the camera to the tracked node.
			</description>
		</method>
		<method name="force_update_scroll">
			<return type="void" />
			<description>
				Forces the camera to update scroll immediately.
			</description>
		</method>
		<method name="get_drag_margin" qualifiers="const">
			<return type="float" />
			<param index="0" name="margin" type="int" enum="Side" />
			<description>
				Returns the specified [enum Side]'s margin. See also [member drag_bottom_margin], [member drag_top_margin], [member drag_left_margin], and [member drag_right_margin].
			</description>
		</method>
		<method name="get_limit" qualifiers="const">
			<return type="int" />
			<param index="0" name="margin" type="int" enum="Side" />
			<description>
				Returns the camera limit for the specified [enum Side]. See also [member limit_bottom], [member limit_top], [member limit_left], and [member limit_right].
			</description>
		</method>
		<method name="get_screen_center_position" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the center of the screen from this camera's point of view, in global coordinates.
				[b]Note:[/b] The exact targeted position of the camera may be different. See [method get_target_position].
			</description>
		</method>
		<method name="get_target_position" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns this camera's target position, in global coordinates.
				[b]Note:[/b] The returned value is not the same as [member Node2D.global_position], as it is affected by the drag properties. It is also not the same as the current position if [member position_smoothing_enabled] is [code]true[/code] (see [method get_screen_center_position]).
			</description>
		</method>
		<method name="is_current" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if this [Camera2D] is the active camera (see [method Viewport.get_camera_2d]).
			</description>
		</method>
		<method name="make_current">
			<return type="void" />
			<description>
				Forces this [Camera2D] to become the current active one. [member enabled] must be [code]true[/code].
			</description>
		</method>
		<method name="reset_smoothing">
			<return type="void" />
			<description>
				Sets the camera's position immediately to its current smoothing destination.
				This method has no effect if [member position_smoothing_enabled] is [code]false[/code].
			</description>
		</method>
		<method name="set_drag_margin">
			<return type="void" />
			<param index="0" name="margin" type="int" enum="Side" />
			<param index="1" name="drag_margin" type="float" />
			<description>
				Sets the specified [enum Side]'s margin. See also [member drag_bottom_margin], [member drag_top_margin], [member drag_left_margin], and [member drag_right_margin].
			</description>
		</method>
		<method name="set_limit">
			<return type="void" />
			<param index="0" name="margin" type="int" enum="Side" />
			<param index="1" name="limit" type="int" />
			<description>
				Sets the camera limit for the specified [enum Side]. See also [member limit_bottom], [member limit_top], [member limit_left], and [member limit_right].
			</description>
		</method>
	</methods>
	<members>
		<member name="anchor_mode" type="int" setter="set_anchor_mode" getter="get_anchor_mode" enum="Camera2D.AnchorMode" default="1">
			The Camera2D's anchor point. See [enum AnchorMode] constants.
		</member>
		<member name="custom_viewport" type="Node" setter="set_custom_viewport" getter="get_custom_viewport">
			The custom [Viewport] node attached to the [Camera2D]. If [code]null[/code] or not a [Viewport], uses the default viewport instead.
		</member>
		<member name="drag_bottom_margin" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Bottom margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the bottom edge of the screen.
		</member>
		<member name="drag_horizontal_enabled" type="bool" setter="set_drag_horizontal_enabled" getter="is_drag_horizontal_enabled" default="false">
			If [code]true[/code], the camera only moves when reaching the horizontal (left and right) drag margins. If [code]false[/code], the camera moves horizontally regardless of margins.
		</member>
		<member name="drag_horizontal_offset" type="float" setter="set_drag_horizontal_offset" getter="get_drag_horizontal_offset" default="0.0">
			The relative horizontal drag offset of the camera between the right ([code]-1[/code]) and left ([code]1[/code]) drag margins.
			[b]Note:[/b] Used to set the initial horizontal drag offset; determine the current offset; or force the current offset. It's not automatically updated when [member drag_horizontal_enabled] is [code]true[/code] or the drag margins are changed.
		</member>
		<member name="drag_left_margin" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Left margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the left edge of the screen.
		</member>
		<member name="drag_right_margin" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Right margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the right edge of the screen.
		</member>
		<member name="drag_top_margin" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Top margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the top edge of the screen.
		</member>
		<member name="drag_vertical_enabled" type="bool" setter="set_drag_vertical_enabled" getter="is_drag_vertical_enabled" default="false">
			If [code]true[/code], the camera only moves when reaching the vertical (top and bottom) drag margins. If [code]false[/code], the camera moves vertically regardless of the drag margins.
		</member>
		<member name="drag_vertical_offset" type="float" setter="set_drag_vertical_offset" getter="get_drag_vertical_offset" default="0.0">
			The relative vertical drag offset of the camera between the bottom ([code]-1[/code]) and top ([code]1[/code]) drag margins.
			[b]Note:[/b] Used to set the initial vertical drag offset; determine the current offset; or force the current offset. It's not automatically updated when [member drag_vertical_enabled] is [code]true[/code] or the drag margins are changed.
		</member>
		<member name="editor_draw_drag_margin" type="bool" setter="set_margin_drawing_enabled" getter="is_margin_drawing_enabled" default="false">
			If [code]true[/code], draws the camera's drag margin rectangle in the editor.
		</member>
		<member name="editor_draw_limits" type="bool" setter="set_limit_drawing_enabled" getter="is_limit_drawing_enabled" default="false">
			If [code]true[/code], draws the camera's limits rectangle in the editor.
		</member>
		<member name="editor_draw_screen" type="bool" setter="set_screen_drawing_enabled" getter="is_screen_drawing_enabled" default="true">
			If [code]true[/code], draws the camera's screen rectangle in the editor.
		</member>
		<member name="enabled" type="bool" setter="set_enabled" getter="is_enabled" default="true">
			Controls whether the camera can be active or not. If [code]true[/code], the [Camera2D] will become the main camera when it enters the scene tree and there is no active camera currently (see [method Viewport.get_camera_2d]).
			When the camera is currently active and [member enabled] is set to [code]false[/code], the next enabled [Camera2D] in the scene tree will become active.
		</member>
		<member name="ignore_rotation" type="bool" setter="set_ignore_rotation" getter="is_ignoring_rotation" default="true">
			If [code]true[/code], the camera's rendered view is not affected by its [member Node2D.rotation] and [member Node2D.global_rotation].
		</member>
		<member name="limit_bottom" type="int" setter="set_limit" getter="get_limit" default="10000000">
			Bottom scroll limit in pixels. The camera stops moving when reaching this value, but [member offset] can push the view past the limit.
		</member>
		<member name="limit_left" type="int" setter="set_limit" getter="get_limit" default="-10000000">
			Left scroll limit in pixels. The camera stops moving when reaching this value, but [member offset] can push the view past the limit.
		</member>
		<member name="limit_right" type="int" setter="set_limit" getter="get_limit" default="10000000">
			Right scroll limit in pixels. The camera stops moving when reaching this value, but [member offset] can push the view past the limit.
		</member>
		<member name="limit_smoothed" type="bool" setter="set_limit_smoothing_enabled" getter="is_limit_smoothing_enabled" default="false">
			If [code]true[/code], the camera smoothly stops when reaches its limits.
			This property has no effect if [member position_smoothing_enabled] is [code]false[/code].
			[b]Note:[/b] To immediately update the camera's position to be within limits without smoothing, even with this setting enabled, invoke [method reset_smoothing].
		</member>
		<member name="limit_top" type="int" setter="set_limit" getter="get_limit" default="-10000000">
			Top scroll limit in pixels. The camera stops moving when reaching this value, but [member offset] can push the view past the limit.
		</member>
		<member name="offset" type="Vector2" setter="set_offset" getter="get_offset" default="Vector2(0, 0)">
			The camera's relative offset. Useful for looking around or camera shake animations. The offsetted camera can go past the limits defined in [member limit_top], [member limit_bottom], [member limit_left] and [member limit_right].
		</member>
		<member name="position_smoothing_enabled" type="bool" setter="set_position_smoothing_enabled" getter="is_position_smoothing_enabled" default="false">
			If [code]true[/code], the camera's view smoothly moves towards its target position at [member position_smoothing_speed].
		</member>
		<member name="position_smoothing_speed" type="float" setter="set_position_smoothing_speed" getter="get_position_smoothing_speed" default="5.0">
			Speed in pixels per second of the camera's smoothing effect when [member position_smoothing_enabled] is [code]true[/code].
		</member>
		<member name="process_callback" type="int" setter="set_process_callback" getter="get_process_callback" enum="Camera2D.Camera2DProcessCallback" default="1">
			The camera's process callback. See [enum Camera2DProcessCallback].
		</member>
		<member name="rotation_smoothing_enabled" type="bool" setter="set_rotation_smoothing_enabled" getter="is_rotation_smoothing_enabled" default="false">
			If [code]true[/code], the camera's view smoothly rotates, via asymptotic smoothing, to align with its target rotation at [member rotation_smoothing_speed].
			[b]Note:[/b] This property has no effect if [member ignore_rotation] is [code]true[/code].
		</member>
		<member name="rotation_smoothing_speed" type="float" setter="set_rotation_smoothing_speed" getter="get_rotation_smoothing_speed" default="5.0">
			The angular, asymptotic speed of the camera's rotation smoothing effect when [member rotation_smoothing_enabled] is [code]true[/code].
		</member>
		<member name="zoom" type="Vector2" setter="set_zoom" getter="get_zoom" default="Vector2(1, 1)">
			The camera's zoom. A zoom of [code]Vector(2, 2)[/code] doubles the size seen in the viewport. A zoom of [code]Vector(0.5, 0.5)[/code] halves the size seen in the viewport.
			[b]Note:[/b] [member FontFile.oversampling] does [i]not[/i] take [Camera2D] zoom into account. This means that zooming in/out will cause bitmap fonts and rasterized (non-MSDF) dynamic fonts to appear blurry or pixelated unless the font is part of a [CanvasLayer] that makes it ignore camera zoom. To ensure text remains crisp regardless of zoom, you can enable MSDF font rendering by enabling [member ProjectSettings.gui/theme/default_font_multichannel_signed_distance_field] (applies to the default project font only), or enabling [b]Multichannel Signed Distance Field[/b] in the import options of a DynamicFont for custom fonts. On system fonts, [member SystemFont.multichannel_signed_distance_field] can be enabled in the inspector.
		</member>
	</members>
	<constants>
		<constant name="ANCHOR_MODE_FIXED_TOP_LEFT" value="0" enum="AnchorMode">
			The camera's position is fixed so that the top-left corner is always at the origin.
		</constant>
		<constant name="ANCHOR_MODE_DRAG_CENTER" value="1" enum="AnchorMode">
			The camera's position takes into account vertical/horizontal offsets and the screen size.
		</constant>
		<constant name="CAMERA2D_PROCESS_PHYSICS" value="0" enum="Camera2DProcessCallback">
			The camera updates during physics frames (see [constant Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS]).
		</constant>
		<constant name="CAMERA2D_PROCESS_IDLE" value="1" enum="Camera2DProcessCallback">
			The camera updates during process frames (see [constant Node.NOTIFICATION_INTERNAL_PROCESS]).
		</constant>
	</constants>
</class>
