#!/usr/bin/env python3

# This script crawls in all source files defined in EXTENSION and finds the registered shortcuts.
# Based on the category priorities, creates the RST for shortcuts page of the documentation.
# See usage: find_shortcuts.py -h

# usage: find_shortcuts.py [-h] [-p SRC_PATH] [-d {0,1,2}] [-o OUTPUT]

# Finds all registered shortcuts in the source code.

# options:
#  -h, --help            show this help message and exit
#  -p SRC_PATH, -path SRC_PATH
#                        A path to a directory containing CPP files to search for. Default: ../../
#  -d {0,1,2}, --details {0,1,2}
#                        0: Default. No details, same as not used.
#                        1: List files with shortcuts, including shortcut details,
#                        2: List all processed files, including shortcut details.
#  -o OUTPUT, --output OUTPUT
#                        Output path and filename, Default: ../default_key_mapping.rst

import argparse
import os
import re

from tabulate import tabulate

# The relative path to source code to look for the shortcuts.
FOLDER_PATH = "../../"
# File extension to search for (e.g., .cpp)
EXTENSION = ".cpp"
# Output file to save to including relative path if no argument is given.
OUTPUT_FILE = "../default_key_mapping.rst"

# Initial document content
INITIAL_RST_CONTENT = """
..
   _This file is generated automatically. Do not edit this file manually.
   Manual changes will be overwritten.

.. meta::
    :keywords: cheatsheet, cheat sheet, shortcut

.. _doc_default_key_mapping:

Default editor shortcuts
========================
Many of Godot Editor functions can be executed with keyboard shortcuts. This page
lists functions which have associated shortcuts by default, but many others are
available for customization in editor settings as well. To change keys associated
with these and other actions navigate to ``Editor > Editor Settings > Shortcuts``.

While some actions are universal, a lot of shortcuts are specific to individual
tools. For this reason it is possible for some key combinations to be assigned
to more than one function. The correct action will be performed depending on the
context.

.. note:: While Windows and Linux builds of the editor share most of the default settings,
          some shortcuts may differ for macOS version. This is done for better integration
          of the editor into macOS ecosystem. Users fluent with standard shortcuts on that
          OS should find Godot Editor's default key mapping intuitive.

.. contents:: Table of Contents
   :depth: 2
   :local:
"""

# Do not add remove HEADERS, you can just change the text!!! Otherwise need to modify table format below (L: 174).
TABLE_HEADERS = ["Action name", "Windows, Linux", "macOS", "Editor setting"]

# Prioritized titles. Ignores sorting and uses the value as title, instead
# of using the key.
# Add the first part before / in a setting, e.g., only write "spatial_editor" if it is "spatial_editor/copy".
EDITOR_TITLES = {
    "editor": "General Editor Actions",
    "canvas_item_editor": "2D / Canvas Item Editor",
    "spatial_editor": "3D / Spatial Editor",
    "script_text_editor": "Text Editor",
}

# SHORTCUT_PATTERNS to search for registered keys in the files.
# Usually they are the functions to register the shortcut in the editor.
# e.g., register_shortcut_action(), or ED_SHORTCUT() or ED_SHORTCUT_AND_COMMAND()
SHORTCUT_PATTERNS = [
    (re.compile(r'register_shortcut_action\("(.+?)",\s*TTR\("(.+?)"\),\s*Key::(.+?)\)'), "register_shortcut_action"),
    (re.compile(r'ED_SHORTCUT\("(.+?)",\s*TTR\("(.+?)"\)(?:,\s*(.+?))?\)'), "ED_SHORTCUT"),
    (re.compile(r'ED_SHORTCUT_AND_COMMAND\("(.+?)",\s*TTR\("(.+?)"\),\s*Key::(.+?)\)'), "ED_SHORTCUT_AND_COMMAND"),
]

# Mapping for special keys to convert to ASCII characters. If forgotten, it will be written as it is
# found in the files.
SPECIAL_KEYS = {
    "EQUAL": "=",
    "DIVIDE": "/",
    "MULTIPLY": "*",
    "ADD": "+",
    "SUBTRACT": "-",
    "PERIOD": ".",
    "COMMA": ",",
    "SEMICOLON": ";",
    "QUOTE": "'",
    "BRACKETLEFT": "[",
    "BRACKETRIGHT": "]",
    "BACKSLASH": "\\\\",  # keep above SLASH if using it.
    "SLASH": "/",
    "MINUS": "-",
    "EQUALS": "=",
    "BACKQUOTE": "`",
    "ENTER": "Enter",
    "SPACE": "Space",
    "ESCAPE": "Esc",
    "TAB": "Tab",
    "BACKSPACE": "Backspace",
    "INSERT": "Insert",
    "DELETE": "Delete",
    "HOME": "Home",
    "END": "End",
    "PAGEUP": "PageUp",
    "PAGEDOWN": "PageDown",
    "UP": "Up",
    "DOWN": "Down",
    "LEFT": "Left",
    "RIGHT": "Right",
    "SHIFT": "Shift",
    "ALT": "Alt",
    "KP_": "Keypad ",
    "KEY_": "",
    "NUMBERSIGN": "#",
    "APOSTROPHE": "'",
}

# Do not touch below
####################


# Clean prefixes in functions.
def clean_key(key):
    # Remove KeyModifierMask:: and Key:: prefixes
    key = key.replace("KeyModifierMask::", "").replace("Key::", "").replace(", true", "")
    # Replace | with +
    key = key.replace("|", "+")

    # Convert special keys to ASCII characters
    parts = key.split("+")
    for i, part in enumerate(parts):
        for special_key in SPECIAL_KEYS:
            if special_key in part:
                parts[i] = parts[i].replace(special_key, SPECIAL_KEYS[special_key])
    key = "+".join(parts)

    return key


# Sort items alphabetically. If EDITOR_TITLES, first display them.
def custom_sort(item):
    if item[0] in EDITOR_TITLES:
        return list(EDITOR_TITLES.keys()).index(item[0])
    else:
        return (999, item[0])


def find_shortcuts(path_to_search, details, output_path_file):
    global INITIAL_RST_CONTENT
    # Crawl all files in the specified folder
    src_files = []
    for root, dirs, files in os.walk(path_to_search):
        for file in files:
            if file.endswith(EXTENSION):
                src_files.append(os.path.join(root, file))

    # Shortcuts holder
    shortcuts = []

    # Read all files with the defined EXTENSION in the folder and find shortcuts
    # Depending on pattern, the argument is different to find the shortcut.
    # Separate Win, Linux and Mac keys.
    # Build beautiful titles.
    # Also format to use :kbd: and code formatting of sphinx.

    for cpp_file in src_files:
        with open(cpp_file, "r", encoding="utf-8") as file:
            code = file.read()
            if details == 2:
                print(f"Current file: {cpp_file}")

            for pattern, action_type in SHORTCUT_PATTERNS:
                matches = pattern.findall(code)
                for match in matches:
                    if action_type == "register_shortcut_action":
                        action = match[0]
                        description = match[1]
                        key = clean_key(match[2])
                    elif action_type == "ED_SHORTCUT" or action_type == "ED_SHORTCUT_AND_COMMAND":
                        action = match[0]
                        description = match[1]
                        key = clean_key(match[2]) if len(match) > 2 else None

                    if key and key != "NONE" and "TTR(" not in key:  # Filter Key::NONE
                        editor_setting = action.split("/")[0]
                        title = EDITOR_TITLES.get(editor_setting, None)
                        if not title:
                            title = editor_setting.replace("_", " ").title()

                        if "CMD_OR_CTRL" in key:
                            key_win_lin = key.replace("CMD_OR_CTRL", "Ctrl")
                            key_mac = key.replace("CMD_OR_CTRL", "Opt")
                        else:
                            key_win_lin = key
                            key_mac = key
                        key_win_lin = clean_key(key_win_lin)
                        key_mac = clean_key(key_mac)
                        if details > 0:
                            if details == 1:
                                print(f"Current file: {cpp_file}")
                            print(
                                f"====> Found shortcut: Win/Lin: {key_win_lin}, Mac: {key_mac}, Action: {action}, Title: {description}"
                            )
                        shortcuts.append(
                            (description, f":kbd:`{key_win_lin}`", f":kbd:`{key_mac}`", f"``{action}``", title)
                        )

    # Group them, prioritize EDITOR_TITLES dict.
    editor_settings_shortcuts = {}
    for shortcut in shortcuts:
        action_name, key_win_lin, key_mac, action, editor_setting = shortcut
        if editor_setting not in editor_settings_shortcuts:
            editor_settings_shortcuts[editor_setting] = []
        editor_settings_shortcuts[editor_setting].append((action_name, key_win_lin, key_mac, action))

    # Create tables. First prioritized ones in the EDITOR_TITLES
    for title in editor_settings_shortcuts.keys():
        if title in EDITOR_TITLES.values():
            INITIAL_RST_CONTENT += (
                f"\n.. _doc_default_key_mapping_{title.replace(' ', '_').replace('/_', '').lower()}:\n\n"
            )
            INITIAL_RST_CONTENT += f"{title}\n"
            INITIAL_RST_CONTENT += "-" * len(title) + "\n\n"
            table = tabulate(sorted(editor_settings_shortcuts[title]), headers=TABLE_HEADERS, tablefmt="grid")
            INITIAL_RST_CONTENT += table + "\n\n"

    # Then others
    for title in sorted(editor_settings_shortcuts.keys(), key=custom_sort):
        if title not in EDITOR_TITLES.values():
            INITIAL_RST_CONTENT += f"\n.. _doc_default_key_mapping_{title.replace(' ', '_').lower()}:\n\n"
            INITIAL_RST_CONTENT += f"{title}\n"
            INITIAL_RST_CONTENT += "-" * len(title) + "\n\n"
            table = tabulate(sorted(editor_settings_shortcuts[title]), headers=TABLE_HEADERS, tablefmt="grid")
            INITIAL_RST_CONTENT += table + "\n\n"

    with open(output_path_file, "w", encoding="utf-8") as rst_file:
        rst_file.write(INITIAL_RST_CONTENT)

    print(f"RST generated successfully and can be found as: {output_path_file}")


def main():
    parser = argparse.ArgumentParser(
        description="Finds all registered shortcuts in the source code.", formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "-p",
        "--path",
        metavar="SRC_PATH",
        default=FOLDER_PATH,
        help=f"A path to a directory containing CPP files to search for. Default: {FOLDER_PATH}",
    )
    parser.add_argument(
        "-d",
        "--details",
        choices=[0, 1, 2],
        default=0,
        type=int,
        help="""0: Default. No details. Same as not used.
1: List processed files with shortcuts, including shortcut details,
2: List all processed files, including shortcut details..""",
    )
    parser.add_argument("-o", "--output", default=OUTPUT_FILE, help=f"Output path and filename, Default: {OUTPUT_FILE}")

    args = parser.parse_args()

    find_shortcuts(args.path, args.details, args.output)


if __name__ == "__main__":
    main()
