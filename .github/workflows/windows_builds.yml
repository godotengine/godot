name: 🏁 Windows Builds
on:
  workflow_call:
    inputs:
      event:
        description: Name of the caller's `github.event_name`.
        required: true
        type: string

# Global Settings
env:
  SCONS_FLAGS: >-
    dev_mode=yes
    module_text_server_fb_enabled=yes
    debug_symbols=no
    d3d12=yes
    "angle_libs=${{ github.workspace }}/"
    "accesskit_sdk_path=${{ github.workspace }}/accesskit-c-0.17.0/"
    windows_subsystem=console
    vsproj=yes
    vsproj_gen_only=no
  SCONS_CACHE_MSVC_CONFIG: true
  PYTHONIOENCODING: utf8

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix
        id: generate-matrix
        shell: python
        run: |
          import json
          import os

          matrix = {}

          # Run only on schedule:
          if "${{ inputs.event }}" == "schedule":
            matrix["target"] = ["editor", "debug", "release"]
            matrix["arch"] = ["x86_64", "x86_32", "arm64"]
            matrix["compiler"] = ["cl", "clang-cl", "gcc", "clang"]

          # Always run:
          matrix["include"] = [
            { "target": "editor", "arch": "x86_64", "compiler": "cl", "always_run": True },
            { "target": "editor", "arch": "x86_64", "compiler": "clang-cl", "always_run": True },
            { "target": "release", "arch": "x86_64", "compiler": "cl", "always_run": True },
            { "target": "release", "arch": "x86_64", "compiler": "gcc", "always_run": True },
          ]

          with open(os.environ["GITHUB_OUTPUT"], "a") as env:
            env.write(f"matrix={json.dumps(matrix)}\n")

  build-windows:
    # Windows 10 with latest image
    runs-on: windows-latest
    name: ${{ matrix.target }} | ${{ matrix.arch }} | ${{ matrix.compiler }}
    needs: generate-matrix
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    env:
      BUILD_ID: windows.${{ matrix.target }}.${{ matrix.arch }}.${{ matrix.compiler }}
      BIN_PATH: ./bin/godot.windows.${{ matrix.target == 'release' && 'template_release' || matrix.target == 'debug' && 'template_debug' || 'editor' }}.${{ matrix.arch }}${{ (matrix.compiler == 'clang-cl' || matrix.compiler == 'clang') && '.llvm' || '' }}.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        if: matrix.always_run
        with:
          cache-name: ${{ env.BUILD_ID }}
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Download Direct3D 12 SDK components
        run: python ./misc/scripts/install_d3d12_sdk_windows.py

      - name: Download pre-built ANGLE static libraries
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: godotengine/godot-angle-static
          version: tags/chromium/6601.2
          file: godot-angle-static-${{ matrix.arch }}-${{ matrix.compiler == 'gcc' && 'gcc' || matrix.compiler == 'clang' && 'llvm' || 'msvc' }}-release.zip
          target: angle/angle.zip

      - name: Extract pre-built ANGLE static libraries
        run: Expand-Archive -Force angle/angle.zip ${{ github.workspace }}/

      - name: Download pre-built AccessKit
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: AccessKit/accesskit-c
          version: tags/0.17.0
          file: accesskit-c-0.17.0.zip
          target: accesskit-c-0.17.0/accesskit_c.zip

      - name: Extract pre-built AccessKit
        run: unzip -o accesskit-c-0.17.0/accesskit_c.zip

      - name: Compilation
        uses: ./.github/actions/godot-build
        with:
          scons-flags: >-
            arch=${{ matrix.arch }}
            use_mingw=${{ (matrix.compiler == 'gcc' || matrix.compiler == 'clang') && 'yes' || 'no' }}
            use_llvm=${{ (matrix.compiler == 'clang-cl' || matrix.compiler == 'clang') && 'yes' || 'no' }}
            ${{ env.SCONS_FLAGS }}
            ${{ matrix.scons-flags }}
          platform: windows
          target: ${{ matrix.target == 'release' && 'template_release' || matrix.target == 'debug' && 'template_debug' || 'editor' }}

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        if: matrix.always_run
        with:
          cache-name: ${{ env.BUILD_ID }}
        continue-on-error: true

      - name: Prepare artifact
        if: matrix.always_run
        run: |
          Remove-Item bin/* -Include *.exp,*.lib,*.pdb -Force

      - name: Upload artifact
        if: matrix.always_run
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ env.BUILD_ID }}

      - name: Unit tests
        run: |
          ${{ env.BIN_PATH }} --version
          ${{ env.BIN_PATH }} --help
          ${{ env.BIN_PATH }} --test --force-colors
