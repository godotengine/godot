#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")

# Thirdparty code

thirdparty_obj = []

thirdparty_dir = "#thirdparty/misc/"
thirdparty_sources = [
    "mikktspace.c",
    "qoa.c",
]

thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

if env.editor_build:
    if env["builtin_libsamplerate"]:
        thirdparty_libsamplerate_dir = "#thirdparty/libsamplerate/"
        thirdparty_libsamplerate_src = thirdparty_libsamplerate_dir + "src/"
        thirdparty_libsamplerate_sources = [
            "samplerate.c",
            "src_linear.c",
            "src_sinc.c",
            "src_zoh.c",
        ]

        thirdparty_libsamplerate_sources = [
            thirdparty_libsamplerate_src + file for file in thirdparty_libsamplerate_sources
        ]

        env.Prepend(CPPPATH=[thirdparty_libsamplerate_dir + "include/"])

        env_libsamplerate = env.Clone()
        env_libsamplerate.Prepend(
            CPPDEFINES=[
                "ENABLE_SINC_MEDIUM_CONVERTER",
                "HAVE_STDBOOL_H",
                # These last two are irrelevant for the engine, but required for compiling.
                ("PACKAGE", '\\"\\"'),
                ("VERSION", '\\"\\"'),
            ]
        )
        env_libsamplerate.add_source_files(thirdparty_obj, thirdparty_libsamplerate_sources)

env_thirdparty = env.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
env.scene_sources += thirdparty_obj

# Godot source files

scene_obj = []

env.add_source_files(scene_obj, "*.cpp")
env.scene_sources += scene_obj

# Needed to force rebuilding the scene files when the thirdparty code is updated.
env.Depends(scene_obj, thirdparty_obj)

SConscript("2d/SCsub")
if not env["disable_3d"]:
    SConscript("3d/SCsub")
