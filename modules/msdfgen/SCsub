#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

env_msdfgen = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_msdfgen"]:
    env_msdfgen.disable_warnings()

    thirdparty_dir = "#thirdparty/msdfgen/"
    thirdparty_sources = [
        "core/Contour.cpp",
        "core/DistanceMapping.cpp",
        "core/EdgeHolder.cpp",
        "core/MSDFErrorCorrection.cpp",
        "core/Projection.cpp",
        "core/Scanline.cpp",
        "core/Shape.cpp",
        "core/contour-combiners.cpp",
        "core/edge-coloring.cpp",
        "core/edge-segments.cpp",
        "core/edge-selectors.cpp",
        "core/equation-solver.cpp",
        # "core/export-svg.cpp",
        "core/msdf-error-correction.cpp",
        "core/msdfgen.cpp",
        "core/rasterization.cpp",
        "core/render-sdf.cpp",
        # "core/save-bmp.cpp",
        # "core/save-fl32.cpp",
        # "core/save-rgba.cpp",
        # "core/save-tiff.cpp",
        "core/sdf-error-estimation.cpp",
        "core/shape-description.cpp",
    ]
    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

    env_msdfgen.Append(CPPDEFINES=[("MSDFGEN_PUBLIC", "")])
    env_msdfgen.Prepend(CPPEXTPATH=["#thirdparty/freetype/include", "#thirdparty/msdfgen", "#thirdparty/nanosvg"])

    lib = env_msdfgen.add_library("msdfgen_builtin", thirdparty_sources)
    thirdparty_obj += lib
    env.Prepend(LIBS=[lib])


# Godot source files

module_obj = []

env_msdfgen.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
