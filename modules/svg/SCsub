#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

env_svg = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

thirdparty_dir = "#thirdparty/thorvg/"
thirdparty_sources = [
    # common
    "src/common/tvgCompressor.cpp",
    "src/common/tvgMath.cpp",
    "src/common/tvgStr.cpp",
    # SVG parser
    "src/loaders/svg/tvgSvgCssStyle.cpp",
    "src/loaders/svg/tvgSvgLoader.cpp",
    "src/loaders/svg/tvgSvgPath.cpp",
    "src/loaders/svg/tvgSvgSceneBuilder.cpp",
    "src/loaders/svg/tvgSvgUtil.cpp",
    "src/loaders/svg/tvgXmlParser.cpp",
    "src/loaders/raw/tvgRawLoader.cpp",
    # image loaders
    "src/loaders/external_png/tvgPngLoader.cpp",
    "src/loaders/jpg/tvgJpgd.cpp",
    "src/loaders/jpg/tvgJpgLoader.cpp",
    # renderer common
    "src/renderer/tvgAccessor.cpp",
    # "src/renderer/tvgAnimation.cpp",
    "src/renderer/tvgCanvas.cpp",
    "src/renderer/tvgFill.cpp",
    # "src/renderer/tvgGlCanvas.cpp",
    "src/renderer/tvgInitializer.cpp",
    "src/renderer/tvgLoader.cpp",
    "src/renderer/tvgPaint.cpp",
    "src/renderer/tvgPicture.cpp",
    "src/renderer/tvgRender.cpp",
    # "src/renderer/tvgSaver.cpp",
    "src/renderer/tvgScene.cpp",
    "src/renderer/tvgShape.cpp",
    "src/renderer/tvgSwCanvas.cpp",
    "src/renderer/tvgTaskScheduler.cpp",
    "src/renderer/tvgText.cpp",
    # "src/renderer/tvgWgCanvas.cpp",
    # renderer sw_engine
    "src/renderer/sw_engine/tvgSwFill.cpp",
    "src/renderer/sw_engine/tvgSwImage.cpp",
    "src/renderer/sw_engine/tvgSwMath.cpp",
    "src/renderer/sw_engine/tvgSwMemPool.cpp",
    "src/renderer/sw_engine/tvgSwPostEffect.cpp",
    "src/renderer/sw_engine/tvgSwRaster.cpp",
    "src/renderer/sw_engine/tvgSwRenderer.cpp",
    "src/renderer/sw_engine/tvgSwRle.cpp",
    "src/renderer/sw_engine/tvgSwShape.cpp",
    "src/renderer/sw_engine/tvgSwStroke.cpp",
]

if env["module_webp_enabled"]:
    thirdparty_sources += ["src/loaders/external_webp/tvgWebpLoader.cpp"]
    env_svg.Append(CPPDEFINES=["THORVG_WEBP_LOADER_SUPPORT"])

thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

env_svg.Prepend(CPPPATH=[thirdparty_dir + "inc"])

# Enable ThorVG static object linking.
env_svg.Append(CPPDEFINES=["TVG_STATIC"])
# Explicit support for embedded images in svg.
env_svg.Append(CPPDEFINES=["THORVG_FILE_IO_SUPPORT"])



# ----------- Luna ----------------
thirdparty_dir2 = "#thirdparty/lunasvg/"
thirdparty_obj2 = []
thirdparty_sources2 = [
    "source/graphics.cpp",
    "source/lunasvg.cpp",
    "source/plutovg-blend.c",
    "source/plutovg-canvas.c",
    "source/plutovg-font.c",
    "source/plutovg-ft-math.c",
    "source/plutovg-ft-raster.c",
    "source/plutovg-ft-stroker.c",
    "source/plutovg-matrix.c",
    "source/plutovg-paint.c",
    "source/plutovg-path.c",
    "source/plutovg-rasterize.c",
    "source/plutovg-surface.c",
    "source/svgelement.cpp",
    "source/svggeometryelement.cpp",
    "source/svglayoutstate.cpp",
    "source/svgpaintelement.cpp",
    "source/svgparser.cpp",
    "source/svgproperty.cpp",
    "source/svgrenderstate.cpp",
    "source/svgtextelement.cpp",
]
# enable embedded font for all platforms (needed for SVGUtils::set_default_font)
env_svg.Append(CPPDEFINES=["LUNASVG_ENABLE_EMBEDDED_FONTS"])
thirdparty_sources2 = thirdparty_sources2 + ["source/embedded_cnfont.cpp"]

thirdparty_sources2 = [thirdparty_dir2 + file for file in thirdparty_sources2]

env_svg.Prepend(CPPPATH=[thirdparty_dir2 + "include"])

# Enable lunasvg static object linking.
env_svg.Append(CPPDEFINES=["PLUTOVG_BUILD", "PLUTOVG_BUILD_STATIC", "LUNASVG_BUILD", "LUNASVG_BUILD_STATIC"])



#-------------------------------

env_thirdparty = env_svg.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.Prepend(
    CPPPATH=[
        thirdparty_dir + "src/common",
        thirdparty_dir + "src/loaders/svg",
        thirdparty_dir + "src/renderer",
        thirdparty_dir + "src/renderer/sw_engine",
        thirdparty_dir + "src/loaders/raw",
        thirdparty_dir + "src/loaders/external_png",
        thirdparty_dir + "src/loaders/jpg",
    ]
)
if env["builtin_libpng"]:
    env_thirdparty.Prepend(CPPPATH=["#thirdparty/libpng"])
if env["module_webp_enabled"]:
    env_thirdparty.Prepend(CPPPATH=[thirdparty_dir + "src/loaders/external_webp"])
    if env["builtin_libwebp"]:
        env_thirdparty.Prepend(CPPPATH=["#thirdparty/libwebp/src"])

env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
env.modules_sources += thirdparty_obj

env_thirdparty.add_source_files(thirdparty_obj2, thirdparty_sources2)
env.modules_sources += thirdparty_obj2

# Godot source files

module_obj = []

env_svg.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
env.Depends(module_obj, thirdparty_obj2)
