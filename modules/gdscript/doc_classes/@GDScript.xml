<?xml version="1.0" encoding="UTF-8" ?>
<class name="@GDScript" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Built-in GDScript functions.
	</brief_description>
	<description>
		List of core built-in GDScript functions. Math functions and other utilities. Everything else is provided by objects. (Keywords: builtin, built in, global functions.)
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="Color8">
			<return type="Color" />
			<argument index="0" name="r8" type="int" />
			<argument index="1" name="g8" type="int" />
			<argument index="2" name="b8" type="int" />
			<argument index="3" name="a8" type="int" default="255" />
			<description>
				Returns a color constructed from integer red, green, blue, and alpha channels. Each channel should have 8 bits of information ranging from 0 to 255.
				[code]r8[/code] red channel
				[code]g8[/code] green channel
				[code]b8[/code] blue channel
				[code]a8[/code] alpha channel
				[codeblock]
				red = Color8(255, 0, 0)
				[/codeblock]
			</description>
		</method>
		<method name="ColorN">
			<return type="Color" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="alpha" type="float" default="1.0" />
			<description>
				Returns a color according to the standardized [code]name[/code] with [code]alpha[/code] ranging from 0 to 1.
				[codeblock]
				red = ColorN("red", 1)
				[/codeblock]
				Supported color names are the same as the constants defined in [Color].
			</description>
		</method>
		<method name="abs">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the absolute value of parameter [code]s[/code] (i.e. positive value).
				[codeblock]
				a = abs(-1) # a is 1
				[/codeblock]
			</description>
		</method>
		<method name="acos">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the arc cosine of [code]s[/code] in radians. Use to get the angle of cosine [code]s[/code]. [code]s[/code] will be clamped between [code]-1.0[/code] and [code]1.0[/code] (inclusive), in order to prevent [method acos] from returning [constant NAN].
				[codeblock]
				# c is 0.523599 or 30 degrees if converted with rad2deg(s)
				c = acos(0.866025)
				[/codeblock]
			</description>
		</method>
		<method name="asin">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the arc sine of [code]s[/code] in radians. Use to get the angle of sine [code]s[/code]. [code]s[/code] will be clamped between [code]-1.0[/code] and [code]1.0[/code] (inclusive), in order to prevent [method asin] from returning [constant NAN].
				[codeblock]
				# s is 0.523599 or 30 degrees if converted with rad2deg(s)
				s = asin(0.5)
				[/codeblock]
			</description>
		</method>
		<method name="assert">
			<return type="void" />
			<argument index="0" name="condition" type="bool" />
			<argument index="1" name="message" type="String" default="&quot;&quot;" />
			<description>
				Asserts that the [code]condition[/code] is [code]true[/code]. If the [code]condition[/code] is [code]false[/code], an error is generated. When running from the editor, the running project will also be paused until you resume it. This can be used as a stronger form of [method push_error] for reporting errors to project developers or add-on users.
				[b]Note:[/b] For performance reasons, the code inside [method assert] is only executed in debug builds or when running the project from the editor. Don't include code that has side effects in an [method assert] call. Otherwise, the project will behave differently when exported in release mode.
				The optional [code]message[/code] argument, if given, is shown in addition to the generic "Assertion failed" message. You can use this to provide additional details about why the assertion failed.
				[codeblock]
				# Imagine we always want speed to be between 0 and 20.
				var speed = -10
				assert(speed &lt; 20) # True, the program will continue
				assert(speed &gt;= 0) # False, the program will stop
				assert(speed &gt;= 0 and speed &lt; 20) # You can also combine the two conditional statements in one check
				assert(speed &lt; 20, "speed = %f, but the speed limit is 20" % speed) # Show a message with clarifying details
				[/codeblock]
			</description>
		</method>
		<method name="atan">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the arc tangent of [code]s[/code] in radians. Use it to get the angle from an angle's tangent in trigonometry: [code]atan(tan(angle)) == angle[/code].
				The method cannot know in which quadrant the angle should fall. See [method atan2] if you have both [code]y[/code] and [code]x[/code].
				[codeblock]
				a = atan(0.5) # a is 0.463648
				[/codeblock]
			</description>
		</method>
		<method name="atan2">
			<return type="float" />
			<argument index="0" name="y" type="float" />
			<argument index="1" name="x" type="float" />
			<description>
				Returns the arc tangent of [code]y/x[/code] in radians. Use to get the angle of tangent [code]y/x[/code]. To compute the value, the method takes into account the sign of both arguments in order to determine the quadrant.
				Important note: The Y coordinate comes first, by convention.
				[codeblock]
				a = atan2(0, -1) # a is 3.141593
				[/codeblock]
			</description>
		</method>
		<method name="bytes2var">
			<return type="Variant" />
			<argument index="0" name="bytes" type="PoolByteArray" />
			<argument index="1" name="allow_objects" type="bool" default="false" />
			<description>
				Decodes a byte array back to a value. When [code]allow_objects[/code] is [code]true[/code] decoding objects is allowed.
				[b]WARNING:[/b] Deserialized object can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats (remote code execution).
			</description>
		</method>
		<method name="cartesian2polar">
			<return type="Vector2" />
			<argument index="0" name="x" type="float" />
			<argument index="1" name="y" type="float" />
			<description>
				Converts a 2D point expressed in the cartesian coordinate system (X and Y axis) to the polar coordinate system (a distance from the origin and an angle).
			</description>
		</method>
		<method name="ceil">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Rounds [code]s[/code] upward (towards positive infinity), returning the smallest whole number that is not less than [code]s[/code].
				[codeblock]
				a = ceil(1.45)  # a is 2.0
				a = ceil(1.001) # a is 2.0
				[/codeblock]
				See also [method floor], [method round], [method stepify], and [int].
			</description>
		</method>
		<method name="char">
			<return type="String" />
			<argument index="0" name="code" type="int" />
			<description>
				Returns a character as a String of the given Unicode code point (which is compatible with ASCII code).
				[codeblock]
				a = char(65)      # a is "A"
				a = char(65 + 32) # a is "a"
				a = char(8364)    # a is "â‚¬"
				[/codeblock]
				This is the inverse of [method ord].
			</description>
		</method>
		<method name="clamp">
			<return type="float" />
			<argument index="0" name="value" type="float" />
			<argument index="1" name="min" type="float" />
			<argument index="2" name="max" type="float" />
			<description>
				Clamps [code]value[/code] and returns a value not less than [code]min[/code] and not more than [code]max[/code].
				[codeblock]
				a = clamp(1000, 1, 20) # a is 20
				a = clamp(-10, 1, 20)  # a is 1
				a = clamp(15, 1, 20)   # a is 15
				[/codeblock]
			</description>
		</method>
		<method name="convert">
			<return type="Variant" />
			<argument index="0" name="what" type="Variant" />
			<argument index="1" name="type" type="int" />
			<description>
				Converts from a type to another in the best way possible. The [code]type[/code] parameter uses the [enum Variant.Type] values.
				[codeblock]
				a = Vector2(1, 0)
				# Prints 1
				print(a.length())
				a = convert(a, TYPE_STRING)
				# Prints 6 as "(1, 0)" is 6 characters
				print(a.length())
				[/codeblock]
			</description>
		</method>
		<method name="cos">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the cosine of angle [code]s[/code] in radians.
				[codeblock]
				a = cos(TAU) # a is 1.0
				a = cos(PI)  # a is -1.0
				[/codeblock]
			</description>
		</method>
		<method name="cosh">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the hyperbolic cosine of [code]s[/code] in radians.
				[codeblock]
				print(cosh(1)) # Prints 1.543081
				[/codeblock]
			</description>
		</method>
		<method name="db2linear">
			<return type="float" />
			<argument index="0" name="db" type="float" />
			<description>
				Converts from decibels to linear energy (audio).
			</description>
		</method>
		<method name="decimals">
			<return type="int" />
			<argument index="0" name="step" type="float" />
			<description>
				Deprecated alias for [method step_decimals].
			</description>
		</method>
		<method name="dectime">
			<return type="float" />
			<argument index="0" name="value" type="float" />
			<argument index="1" name="amount" type="float" />
			<argument index="2" name="step" type="float" />
			<description>
				[b]Note:[/b] [code]dectime[/code] has been deprecated and will be removed in Godot 4.0, please use [method move_toward] instead.
				Returns the result of [code]value[/code] decreased by [code]step[/code] * [code]amount[/code].
				[codeblock]
				a = dectime(60, 10, 0.1)) # a is 59.0
				[/codeblock]
			</description>
		</method>
		<method name="deep_equal">
			<return type="bool" />
			<argument index="0" name="a" type="Variant" />
			<argument index="1" name="b" type="Variant" />
			<description>
				Compares two values by checking their actual contents, recursing into any [Array] or [Dictionary] up to its deepest level.
				This compares to [code]==[/code] in a number of ways:
				- For [code]null[/code], [code]int[/code], [code]float[/code], [code]String[/code], [code]Object[/code] and [code]RID[/code] both [code]deep_equal[/code] and [code]==[/code] work the same.
				- For [code]Dictionary[/code], [code]==[/code] considers equality if, and only if, both variables point to the very same [code]Dictionary[/code], with no recursion or awareness of the contents at all.
				- For [code]Array[/code], [code]==[/code] considers equality if, and only if, each item in the first [code]Array[/code] is equal to its counterpart in the second [code]Array[/code], as told by [code]==[/code] itself. That implies that [code]==[/code] recurses into [code]Array[/code], but not into [code]Dictionary[/code].
				In short, whenever a [code]Dictionary[/code] is potentially involved, if you want a true content-aware comparison, you have to use [code]deep_equal[/code].
			</description>
		</method>
		<method name="deg2rad">
			<return type="float" />
			<argument index="0" name="deg" type="float" />
			<description>
				Converts an angle expressed in degrees to radians.
				[codeblock]
				r = deg2rad(180) # r is 3.141593
				[/codeblock]
			</description>
		</method>
		<method name="dict2inst">
			<return type="Object" />
			<argument index="0" name="dict" type="Dictionary" />
			<description>
				Converts a dictionary (previously created with [method inst2dict]) back to an instance. Useful for deserializing.
			</description>
		</method>
		<method name="ease">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<argument index="1" name="curve" type="float" />
			<description>
				Returns an "eased" value of [code]x[/code] based on an easing function defined with [code]curve[/code]. This easing function is based on an exponent. The [code]curve[/code] can be any floating-point number, with specific values leading to the following behaviors:
				[codeblock]
				- Lower than -1.0 (exclusive): Ease in-out
				- 1.0: Linear
				- Between -1.0 and 0.0 (exclusive): Ease out-in
				- 0.0: Constant
				- Between 0.0 to 1.0 (exclusive): Ease out
				- 1.0: Linear
				- Greater than 1.0 (exclusive): Ease in
				[/codeblock]
				[url=https://raw.githubusercontent.com/godotengine/godot-docs/3.6/img/ease_cheatsheet.png]ease() curve values cheatsheet[/url]
				See also [method smoothstep]. If you need to perform more advanced transitions, use [Tween] or [AnimationPlayer].
			</description>
		</method>
		<method name="exp">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				The natural exponential function. It raises the mathematical constant [b]e[/b] to the power of [code]s[/code] and returns it.
				[b]e[/b] has an approximate value of 2.71828, and can be obtained with [code]exp(1)[/code].
				For exponents to other bases use the method [method pow].
				[codeblock]
				a = exp(2) # Approximately 7.39
				[/codeblock]
			</description>
		</method>
		<method name="floor">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Rounds [code]s[/code] downward (towards negative infinity), returning the largest whole number that is not more than [code]s[/code].
				[codeblock]
				a = floor(2.45)  # a is 2.0
				a = floor(2.99)  # a is 2.0
				a = floor(-2.99) # a is -3.0
				[/codeblock]
				See also [method ceil], [method round], [method stepify], and [int].
				[b]Note:[/b] This method returns a float. If you need an integer and [code]s[/code] is a non-negative number, you can use [code]int(s)[/code] directly.
			</description>
		</method>
		<method name="fmod">
			<return type="float" />
			<argument index="0" name="a" type="float" />
			<argument index="1" name="b" type="float" />
			<description>
				Returns the floating-point remainder of [code]a/b[/code], keeping the sign of [code]a[/code].
				[codeblock]
				r = fmod(7, 5.5) # r is 1.5
				[/codeblock]
				For the integer remainder operation, use the % operator.
			</description>
		</method>
		<method name="fposmod">
			<return type="float" />
			<argument index="0" name="a" type="float" />
			<argument index="1" name="b" type="float" />
			<description>
				Returns the floating-point modulus of [code]a/b[/code] that wraps equally in positive and negative.
				[codeblock]
				for i in 7:
				    var x = 0.5 * i - 1.5
				    print("%4.1f %4.1f %4.1f" % [x, fmod(x, 1.5), fposmod(x, 1.5)])
				[/codeblock]
				Produces:
				[codeblock]
				-1.5 -0.0  0.0
				-1.0 -1.0  0.5
				-0.5 -0.5  1.0
				 0.0  0.0  0.0
				 0.5  0.5  0.5
				 1.0  1.0  1.0
				 1.5  0.0  0.0
				[/codeblock]
			</description>
		</method>
		<method name="funcref">
			<return type="FuncRef" />
			<argument index="0" name="instance" type="Object" />
			<argument index="1" name="funcname" type="String" />
			<description>
				Returns a reference to the specified function [code]funcname[/code] in the [code]instance[/code] node. As functions aren't first-class objects in GDscript, use [code]funcref[/code] to store a [FuncRef] in a variable and call it later.
				[codeblock]
				func foo():
				    return("bar")

				a = funcref(self, "foo")
				print(a.call_func()) # Prints bar
				[/codeblock]
			</description>
		</method>
		<method name="get_stack">
			<return type="Array" />
			<description>
				Returns an array of dictionaries representing the current call stack. See also [method print_stack].
				[codeblock]
				func _ready():
				    foo()

				func foo():
				    bar()

				func bar():
				    print(get_stack())
				[/codeblock]
				would print
				[codeblock]
				[{function:bar, line:12, source:res://script.gd}, {function:foo, line:9, source:res://script.gd}, {function:_ready, line:6, source:res://script.gd}]
				[/codeblock]
				[b]Note:[/b] [method get_stack] only works if the running instance is connected to a debugging server (i.e. an editor instance). [method get_stack] will not work in projects exported in release mode, or in projects exported in debug mode if not connected to a debugging server.
			</description>
		</method>
		<method name="hash">
			<return type="int" />
			<argument index="0" name="var" type="Variant" />
			<description>
				Returns the integer hash of the variable passed.
				[codeblock]
				print(hash("a")) # Prints 177670
				[/codeblock]
			</description>
		</method>
		<method name="inst2dict">
			<return type="Dictionary" />
			<argument index="0" name="inst" type="Object" />
			<description>
				Returns the passed instance converted to a dictionary (useful for serializing).
				[codeblock]
				var foo = "bar"
				func _ready():
				    var d = inst2dict(self)
				    print(d.keys())
				    print(d.values())
				[/codeblock]
				Prints out:
				[codeblock]
				[@subpath, @path, foo]
				[, res://test.gd, bar]
				[/codeblock]
			</description>
		</method>
		<method name="instance_from_id">
			<return type="Object" />
			<argument index="0" name="instance_id" type="int" />
			<description>
				Returns the Object that corresponds to [code]instance_id[/code]. All Objects have a unique instance ID.
				[codeblock]
				var foo = "bar"
				func _ready():
				    var id = get_instance_id()
				    var inst = instance_from_id(id)
				    print(inst.foo) # Prints bar
				[/codeblock]
			</description>
		</method>
		<method name="inverse_lerp">
			<return type="float" />
			<argument index="0" name="from" type="float" />
			<argument index="1" name="to" type="float" />
			<argument index="2" name="weight" type="float" />
			<description>
				Returns an interpolation or extrapolation factor considering the range specified in [code]from[/code] and [code]to[/code], and the interpolated value specified in [code]weight[/code]. The returned value will be between [code]0.0[/code] and [code]1.0[/code] if [code]weight[/code] is between [code]from[/code] and [code]to[/code] (inclusive). If [code]weight[/code] is located outside this range, then an extrapolation factor will be returned (return value lower than [code]0.0[/code] or greater than [code]1.0[/code]). Use [method clamp] on the result of [method inverse_lerp] if this is not desired.
				[codeblock]
				# The interpolation ratio in the `lerp()` call below is 0.75.
				var middle = lerp(20, 30, 0.75)
				# `middle` is now 27.5.
				# Now, we pretend to have forgotten the original ratio and want to get it back.
				var ratio = inverse_lerp(20, 30, 27.5)
				# `ratio` is now 0.75.
				[/codeblock]
				See also [method lerp] which performs the reverse of this operation, and [method range_lerp] to map a continuous series of values to another.
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool" />
			<argument index="0" name="a" type="float" />
			<argument index="1" name="b" type="float" />
			<description>
				Returns [code]true[/code] if [code]a[/code] and [code]b[/code] are approximately equal to each other.
				Here, approximately equal means that [code]a[/code] and [code]b[/code] are within a small internal epsilon of each other, which scales with the magnitude of the numbers.
				Infinity values of the same sign are considered equal.
			</description>
		</method>
		<method name="is_inf">
			<return type="bool" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns whether [code]s[/code] is an infinity value (either positive infinity or negative infinity).
			</description>
		</method>
		<method name="is_instance_valid">
			<return type="bool" />
			<argument index="0" name="instance" type="Object" />
			<description>
				Returns whether [code]instance[/code] is a valid object (e.g. has not been deleted from memory).
			</description>
		</method>
		<method name="is_nan">
			<return type="bool" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns whether [code]s[/code] is a NaN ("Not a Number" or invalid) value.
			</description>
		</method>
		<method name="is_zero_approx">
			<return type="bool" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns [code]true[/code] if [code]s[/code] is zero or almost zero.
				This method is faster than using [method is_equal_approx] with one value as zero.
			</description>
		</method>
		<method name="len">
			<return type="int" />
			<argument index="0" name="var" type="Variant" />
			<description>
				Returns length of Variant [code]var[/code]. Length is the character count of String, element count of Array, size of Dictionary, etc.
				[b]Note:[/b] Generates a fatal error if Variant can not provide a length.
				[codeblock]
				a = [1, 2, 3, 4]
				len(a) # Returns 4
				[/codeblock]
			</description>
		</method>
		<method name="lerp">
			<return type="Variant" />
			<argument index="0" name="from" type="Variant" />
			<argument index="1" name="to" type="Variant" />
			<argument index="2" name="weight" type="float" />
			<description>
				Linearly interpolates between two values by the factor defined in [code]weight[/code]. To perform interpolation, [code]weight[/code] should be between [code]0.0[/code] and [code]1.0[/code] (inclusive). However, values outside this range are allowed and can be used to perform [i]extrapolation[/i]. Use [method clamp] on the result of [method lerp] if this is not desired.
				If the [code]from[/code] and [code]to[/code] arguments are of type [int] or [float], the return value is a [float].
				If both are of the same vector type ([Vector2], [Vector3] or [Color]), the return value will be of the same type ([code]lerp[/code] then calls the vector type's [code]linear_interpolate[/code] method).
				[codeblock]
				lerp(0, 4, 0.75) # Returns 3.0
				lerp(Vector2(1, 5), Vector2(3, 2), 0.5) # Returns Vector2(2, 3.5)
				[/codeblock]
				See also [method inverse_lerp] which performs the reverse of this operation. To perform eased interpolation with [method lerp], combine it with [method ease] or [method smoothstep]. See also [method range_lerp] to map a continuous series of values to another.
			</description>
		</method>
		<method name="lerp_angle">
			<return type="float" />
			<argument index="0" name="from" type="float" />
			<argument index="1" name="to" type="float" />
			<argument index="2" name="weight" type="float" />
			<description>
				Linearly interpolates between two angles (in radians) by a normalized value.
				Similar to [method lerp], but interpolates correctly when the angles wrap around [constant @GDScript.TAU]. To perform eased interpolation with [method lerp_angle], combine it with [method ease] or [method smoothstep].
				[codeblock]
				extends Sprite
				var elapsed = 0.0
				func _process(delta):
				    var min_angle = deg2rad(0.0)
				    var max_angle = deg2rad(90.0)
				    rotation = lerp_angle(min_angle, max_angle, elapsed)
				    elapsed += delta
				[/codeblock]
				[b]Note:[/b] This method lerps through the shortest path between [code]from[/code] and [code]to[/code]. However, when these two angles are approximately [code]PI + k * TAU[/code] apart for any integer [code]k[/code], it's not obvious which way they lerp due to floating-point precision errors. For example, [code]lerp_angle(0, PI, weight)[/code] lerps counter-clockwise, while [code]lerp_angle(0, PI + 5 * TAU, weight)[/code] lerps clockwise.
			</description>
		</method>
		<method name="linear2db">
			<return type="float" />
			<argument index="0" name="nrg" type="float" />
			<description>
				Converts from linear energy to decibels (audio). This can be used to implement volume sliders that behave as expected (since volume isn't linear). Example:
				[codeblock]
				# "Slider" refers to a node that inherits Range such as HSlider or VSlider.
				# Its range must be configured to go from 0 to 1.
				# Change the bus name if you'd like to change the volume of a specific bus only.
				AudioServer.set_bus_volume_db(AudioServer.get_bus_index("Master"), linear2db($Slider.value))
				[/codeblock]
			</description>
		</method>
		<method name="load">
			<return type="Resource" />
			<argument index="0" name="path" type="String" />
			<description>
				Loads a resource from the filesystem located at [code]path[/code]. The resource is loaded on the method call (unless it's referenced already elsewhere, e.g. in another script or in the scene), which might cause slight delay, especially when loading scenes. To avoid unnecessary delays when loading something multiple times, either store the resource in a variable or use [method preload].
				[b]Note:[/b] Resource paths can be obtained by right-clicking on a resource in the FileSystem dock and choosing "Copy Path" or by dragging the file from the FileSystem dock into the script.
				[codeblock]
				# Load a scene called main located in the root of the project directory and cache it in a variable.
				var main = load("res://main.tscn") # main will contain a PackedScene resource.
				[/codeblock]
				[b]Important:[/b] The path must be absolute, a local path will just return [code]null[/code].
				This method is a simplified version of [method ResourceLoader.load], which can be used for more advanced scenarios.
			</description>
		</method>
		<method name="log">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the [url=https://en.wikipedia.org/wiki/Natural_logarithm]natural logarithm[/url] of [code]s[/code] (base [url=https://en.wikipedia.org/wiki/E_(mathematical_constant)][i]e[/i][/url], with [i]e[/i] being approximately 2.71828). This is the amount of time needed to reach a certain level of continuous growth.
				[b]Note:[/b] This is not the same as the "log" function on most calculators, which uses a base 10 logarithm. To use base 10 logarithm, use [code]log(x) / log(10)[/code].
				[codeblock]
				log(10) # Returns 2.302585
				[/codeblock]
				[b]Note:[/b] The logarithm of [code]0[/code] returns [code]-inf[/code], while negative values return [code]-nan[/code].
			</description>
		</method>
		<method name="max">
			<return type="float" />
			<argument index="0" name="a" type="float" />
			<argument index="1" name="b" type="float" />
			<description>
				Returns the maximum of two values.
				[codeblock]
				max(1, 2) # Returns 2
				max(-3.99, -4) # Returns -3.99
				[/codeblock]
			</description>
		</method>
		<method name="min">
			<return type="float" />
			<argument index="0" name="a" type="float" />
			<argument index="1" name="b" type="float" />
			<description>
				Returns the minimum of two values.
				[codeblock]
				min(1, 2) # Returns 1
				min(-3.99, -4) # Returns -4
				[/codeblock]
			</description>
		</method>
		<method name="move_toward">
			<return type="float" />
			<argument index="0" name="from" type="float" />
			<argument index="1" name="to" type="float" />
			<argument index="2" name="delta" type="float" />
			<description>
				Moves [code]from[/code] toward [code]to[/code] by the [code]delta[/code] value.
				Use a negative [code]delta[/code] value to move away.
				[codeblock]
				move_toward(5, 10, 4) # Returns 9
				move_toward(10, 5, 4) # Returns 6
				move_toward(10, 5, -1.5) # Returns 11.5
				[/codeblock]
			</description>
		</method>
		<method name="nearest_po2">
			<return type="int" />
			<argument index="0" name="value" type="int" />
			<description>
				Returns the nearest equal or larger power of 2 for integer [code]value[/code].
				In other words, returns the smallest value [code]a[/code] where [code]a = pow(2, n)[/code] such that [code]value &lt;= a[/code] for some non-negative integer [code]n[/code].
				[codeblock]
				nearest_po2(3) # Returns 4
				nearest_po2(4) # Returns 4
				nearest_po2(5) # Returns 8

				nearest_po2(0) # Returns 0 (this may not be what you expect)
				nearest_po2(-1) # Returns 0 (this may not be what you expect)
				[/codeblock]
				[b]WARNING:[/b] Due to the way it is implemented, this function returns [code]0[/code] rather than [code]1[/code] for non-positive values of [code]value[/code] (in reality, 1 is the smallest integer power of 2).
			</description>
		</method>
		<method name="ord">
			<return type="int" />
			<argument index="0" name="char" type="String" />
			<description>
				Returns an integer representing the Unicode code point of the given Unicode character [code]char[/code].
				[codeblock]
				a = ord("A") # a is 65
				a = ord("a") # a is 97
				a = ord("â‚¬") # a is 8364
				[/codeblock]
				This is the inverse of [method char].
			</description>
		</method>
		<method name="parse_json">
			<return type="Variant" />
			<argument index="0" name="json" type="String" />
			<description>
				Parse JSON text to a Variant. (Use [method typeof] to check if the Variant's type is what you expect.)
				[b]Note:[/b] The JSON specification does not define integer or float types, but only a [i]number[/i] type. Therefore, parsing a JSON text will convert all numerical values to [float] types.
				[b]Note:[/b] JSON objects do not preserve key order like Godot dictionaries, thus, you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:
				[codeblock]
				var p = JSON.parse('["hello", "world", "!"]')
				if typeof(p.result) == TYPE_ARRAY:
				    print(p.result[0]) # Prints "hello"
				else:
				    push_error("Unexpected results.")
				[/codeblock]
				See also [JSON] for an alternative way to parse JSON text.
			</description>
		</method>
		<method name="polar2cartesian">
			<return type="Vector2" />
			<argument index="0" name="r" type="float" />
			<argument index="1" name="th" type="float" />
			<description>
				Converts a 2D point expressed in the polar coordinate system (a distance from the origin [code]r[/code] and an angle [code]th[/code]) to the cartesian coordinate system (X and Y axis).
			</description>
		</method>
		<method name="posmod">
			<return type="int" />
			<argument index="0" name="a" type="int" />
			<argument index="1" name="b" type="int" />
			<description>
				Returns the integer modulus of [code]a/b[/code] that wraps equally in positive and negative.
				[codeblock]
				for i in range(-3, 4):
				    print("%2d %2d %2d" % [i, i % 3, posmod(i, 3)])
				[/codeblock]
				Produces:
				[codeblock]
				-3  0  0
				-2 -2  1
				-1 -1  2
				 0  0  0
				 1  1  1
				 2  2  2
				 3  0  0
				[/codeblock]
			</description>
		</method>
		<method name="pow">
			<return type="float" />
			<argument index="0" name="base" type="float" />
			<argument index="1" name="exp" type="float" />
			<description>
				Returns the result of [code]base[/code] raised to the power of [code]exp[/code].
				[codeblock]
				pow(2, 5) # Returns 32.0
				[/codeblock]
			</description>
		</method>
		<method name="preload">
			<return type="Resource" />
			<argument index="0" name="path" type="String" />
			<description>
				Returns a [Resource] from the filesystem located at [code]path[/code]. The resource is loaded during script parsing, i.e. is loaded with the script and [method preload] effectively acts as a reference to that resource. Note that the method requires a constant path. If you want to load a resource from a dynamic/variable path, use [method load].
				[b]Note:[/b] Resource paths can be obtained by right clicking on a resource in the Assets Panel and choosing "Copy Path" or by dragging the file from the FileSystem dock into the script.
				[codeblock]
				# Instance a scene.
				var diamond = preload("res://diamond.tscn").instance()
				[/codeblock]
			</description>
		</method>
		<method name="print" qualifiers="vararg">
			<return type="void" />
			<description>
				Converts one or more arguments of any type to string in the best way possible and prints them to the console.
				[codeblock]
				a = [1, 2, 3]
				print("a", "=", a) # Prints a=[1, 2, 3]
				[/codeblock]
				[b]Note:[/b] Consider using [method push_error] and [method push_warning] to print error and warning messages instead of [method print]. This distinguishes them from print messages used for debugging purposes, while also displaying a stack trace when an error or warning is printed.
			</description>
		</method>
		<method name="print_debug" qualifiers="vararg">
			<return type="void" />
			<description>
				Like [method print], but includes the current stack frame when running with the debugger turned on.
				Output in the console would look something like this:
				[codeblock]
				Test print
				   At: res://test.gd:15:_process()
				[/codeblock]
			</description>
		</method>
		<method name="print_stack">
			<return type="void" />
			<description>
				Prints a stack trace at the current code location. See also [method get_stack].
				Output in the console would look something like this:
				[codeblock]
				Frame 0 - res://test.gd:16 in function '_process'
				[/codeblock]
				[b]Note:[/b] [method print_stack] only works if the running instance is connected to a debugging server (i.e. an editor instance). [method print_stack] will not work in projects exported in release mode, or in projects exported in debug mode if not connected to a debugging server.
			</description>
		</method>
		<method name="print_verbose" qualifiers="vararg">
			<return type="void" />
			<description>
				If verbose mode is enabled ([method OS.is_stdout_verbose] returning [code]true[/code]), converts one or more arguments of any type to string in the best way possible and prints them to the console.
			</description>
		</method>
		<method name="printerr" qualifiers="vararg">
			<return type="void" />
			<description>
				Prints one or more arguments to strings in the best way possible to standard error line.
				[codeblock]
				printerr("prints to stderr")
				[/codeblock]
			</description>
		</method>
		<method name="printraw" qualifiers="vararg">
			<return type="void" />
			<description>
				Prints one or more arguments to strings in the best way possible to console. No newline is added at the end.
				[codeblock]
				printraw("A")
				printraw("B")
				# Prints AB
				[/codeblock]
				[b]Note:[/b] Due to limitations with Godot's built-in console, this only prints to the terminal. If you need to print in the editor, use another method, such as [method print].
			</description>
		</method>
		<method name="prints" qualifiers="vararg">
			<return type="void" />
			<description>
				Prints one or more arguments to the console with a space between each argument.
				[codeblock]
				prints("A", "B", "C") # Prints A B C
				[/codeblock]
			</description>
		</method>
		<method name="printt" qualifiers="vararg">
			<return type="void" />
			<description>
				Prints one or more arguments to the console with a tab between each argument.
				[codeblock]
				printt("A", "B", "C") # Prints A       B       C
				[/codeblock]
			</description>
		</method>
		<method name="push_error">
			<return type="void" />
			<argument index="0" name="message" type="String" />
			<description>
				Pushes an error message to Godot's built-in debugger and to the OS terminal.
				[codeblock]
				push_error("test error") # Prints "test error" to debugger and terminal as error call
				[/codeblock]
				[b]Note:[/b] Errors printed this way will not pause project execution. To print an error message and pause project execution in debug builds, use [code]assert(false, "test error")[/code] instead.
			</description>
		</method>
		<method name="push_warning">
			<return type="void" />
			<argument index="0" name="message" type="String" />
			<description>
				Pushes a warning message to Godot's built-in debugger and to the OS terminal.
				[codeblock]
				push_warning("test warning") # Prints "test warning" to debugger and terminal as warning call
				[/codeblock]
			</description>
		</method>
		<method name="rad2deg">
			<return type="float" />
			<argument index="0" name="rad" type="float" />
			<description>
				Converts an angle expressed in radians to degrees.
				[codeblock]
				rad2deg(0.523599) # Returns 30.0
				[/codeblock]
			</description>
		</method>
		<method name="rand_range">
			<return type="float" />
			<argument index="0" name="from" type="float" />
			<argument index="1" name="to" type="float" />
			<description>
				Returns a random floating point value between [code]from[/code] and [code]to[/code] (both endpoints inclusive).
				[codeblock]
				prints(rand_range(0, 1), rand_range(0, 1)) # Prints e.g. 0.135591 0.405263
				[/codeblock]
				[b]Note:[/b] This is equivalent to [code]randf() * (to - from) + from[/code].
			</description>
		</method>
		<method name="rand_seed">
			<return type="Array" />
			<argument index="0" name="seed" type="int" />
			<description>
				Random from seed: pass a [code]seed[/code], and an array with both number and new seed is returned. "Seed" here refers to the internal state of the pseudo random number generator. The internal state of the current implementation is 64 bits.
			</description>
		</method>
		<method name="randf">
			<return type="float" />
			<description>
				Returns a random floating point value on the interval [code][0, 1][/code].
				[codeblock]
				randf() # Returns e.g. 0.375671
				[/codeblock]
			</description>
		</method>
		<method name="randi">
			<return type="int" />
			<description>
				Returns a random unsigned 32-bit integer. Use remainder to obtain a random value in the interval [code][0, N - 1][/code] (where N is smaller than 2^32).
				[codeblock]
				randi()           # Returns random integer between 0 and 2^32 - 1
				randi() % 20      # Returns random integer between 0 and 19
				randi() % 100     # Returns random integer between 0 and 99
				randi() % 100 + 1 # Returns random integer between 1 and 100
				[/codeblock]
			</description>
		</method>
		<method name="randomize">
			<return type="void" />
			<description>
				Randomizes the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time.
				[codeblock]
				func _ready():
				    randomize()
				[/codeblock]
			</description>
		</method>
		<method name="range" qualifiers="vararg">
			<return type="Array" />
			<description>
				Returns an array with the given range. [method range] can be called in three ways:
				[code]range(n: int)[/code]: Starts from 0, increases by steps of 1, and stops [i]before[/i] [code]n[/code]. The argument [code]n[/code] is [b]exclusive[/b].
				[code]range(b: int, n: int)[/code]: Starts from [code]b[/code], increases by steps of 1, and stops [i]before[/i] [code]n[/code]. The arguments [code]b[/code] and [code]n[/code] are [b]inclusive[/b] and [b]exclusive[/b], respectively.
				[code]range(b: int, n: int, s: int)[/code]: Starts from [code]b[/code], increases/decreases by steps of [code]s[/code], and stops [i]before[/i] [code]n[/code]. The arguments [code]b[/code] and [code]n[/code] are [b]inclusive[/b] and [b]exclusive[/b], respectively. The argument [code]s[/code] [b]can[/b] be negative, but not [code]0[/code]. If [code]s[/code] is [code]0[/code], an error message is printed.
				[method range] converts all arguments to [int] before processing.
				[b]Note:[/b] Returns an empty array if no value meets the value constraint (e.g. [code]range(2, 5, -1)[/code] or [code]range(5, 5, 1)[/code]).
				Examples:
				[codeblock]
				print(range(4))        # Prints [0, 1, 2, 3]
				print(range(2, 5))     # Prints [2, 3, 4]
				print(range(0, 6, 2))  # Prints [0, 2, 4]
				print(range(4, 1, -1)) # Prints [4, 3, 2]
				[/codeblock]
				To iterate over an [Array] backwards, use:
				[codeblock]
				var array = [3, 6, 9]
				for i in range(array.size(), 0, -1):
				    print(array[i - 1])
				[/codeblock]
				Output:
				[codeblock]
				9
				6
				3
				[/codeblock]
			</description>
		</method>
		<method name="range_lerp">
			<return type="float" />
			<argument index="0" name="value" type="float" />
			<argument index="1" name="istart" type="float" />
			<argument index="2" name="istop" type="float" />
			<argument index="3" name="ostart" type="float" />
			<argument index="4" name="ostop" type="float" />
			<description>
				Maps a [code]value[/code] from range [code][istart, istop][/code] to [code][ostart, ostop][/code]. See also [method lerp] and [method inverse_lerp]. If [code]value[/code] is outside [code][istart, istop][/code], then the resulting value will also be outside [code][ostart, ostop][/code]. Use [method clamp] on the result of [method range_lerp] if this is not desired.
				[codeblock]
				range_lerp(75, 0, 100, -1, 1) # Returns 0.5
				[/codeblock]
				For complex use cases where you need multiple ranges, consider using [Curve] or [Gradient] instead.
			</description>
		</method>
		<method name="round">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Rounds [code]s[/code] to the nearest whole number, with halfway cases rounded away from zero.
				[codeblock]
				a = round(2.49) # a is 2.0
				a = round(2.5)  # a is 3.0
				a = round(2.51) # a is 3.0
				[/codeblock]
				See also [method floor], [method ceil], [method stepify], and [int].
			</description>
		</method>
		<method name="seed">
			<return type="void" />
			<argument index="0" name="seed" type="int" />
			<description>
				Sets seed for the random number generator.
				[codeblock]
				my_seed = "Godot Rocks"
				seed(my_seed.hash())
				[/codeblock]
			</description>
		</method>
		<method name="sign">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the sign of [code]s[/code]: -1 or 1. Returns 0 if [code]s[/code] is 0.
				[codeblock]
				sign(-6) # Returns -1
				sign(0)  # Returns 0
				sign(6)  # Returns 1
				[/codeblock]
			</description>
		</method>
		<method name="sin">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the sine of angle [code]s[/code] in radians.
				[codeblock]
				sin(0.523599) # Returns 0.5
				[/codeblock]
			</description>
		</method>
		<method name="sinh">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the hyperbolic sine of [code]s[/code].
				[codeblock]
				a = log(2.0) # Returns 0.693147
				sinh(a) # Returns 0.75
				[/codeblock]
			</description>
		</method>
		<method name="smoothstep">
			<return type="float" />
			<argument index="0" name="from" type="float" />
			<argument index="1" name="to" type="float" />
			<argument index="2" name="s" type="float" />
			<description>
				Returns the result of smoothly interpolating the value of [code]s[/code] between [code]0[/code] and [code]1[/code], based on the where [code]s[/code] lies with respect to the edges [code]from[/code] and [code]to[/code].
				The return value is [code]0[/code] if [code]s &lt;= from[/code], and [code]1[/code] if [code]s &gt;= to[/code]. If [code]s[/code] lies between [code]from[/code] and [code]to[/code], the returned value follows an S-shaped curve that maps [code]s[/code] between [code]0[/code] and [code]1[/code].
				This S-shaped curve is the cubic Hermite interpolator, given by [code]f(y) = 3*y^2 - 2*y^3[/code] where [code]y = (x-from) / (to-from)[/code].
				[codeblock]
				smoothstep(0, 2, -5.0) # Returns 0.0
				smoothstep(0, 2, 0.5) # Returns 0.15625
				smoothstep(0, 2, 1.0) # Returns 0.5
				smoothstep(0, 2, 2.0) # Returns 1.0
				[/codeblock]
				Compared to [method ease] with a curve value of [code]-1.6521[/code], [method smoothstep] returns the smoothest possible curve with no sudden changes in the derivative. If you need to perform more advanced transitions, use [Tween] or [AnimationPlayer].
				[url=https://raw.githubusercontent.com/godotengine/godot-docs/3.6/img/smoothstep_ease_comparison.png]Comparison between smoothstep() and ease(x, -1.6521) return values[/url]
			</description>
		</method>
		<method name="sqrt">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the square root of [code]s[/code], where [code]s[/code] is a non-negative number.
				[codeblock]
				sqrt(9) # Returns 3
				[/codeblock]
				[b]Note:[/b] Negative values of [code]s[/code] return NaN. If you need negative inputs, use [code]System.Numerics.Complex[/code] in C#.
			</description>
		</method>
		<method name="step_decimals">
			<return type="int" />
			<argument index="0" name="step" type="float" />
			<description>
				Returns the position of the first non-zero digit, after the decimal point. Note that the maximum return value is 10, which is a design decision in the implementation.
				[codeblock]
				n = step_decimals(5)           # n is 0
				n = step_decimals(1.0005)      # n is 4
				n = step_decimals(0.000000005) # n is 9
				[/codeblock]
			</description>
		</method>
		<method name="stepify">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<argument index="1" name="step" type="float" />
			<description>
				Snaps float value [code]s[/code] to a given [code]step[/code]. This can also be used to round a floating point number to an arbitrary number of decimals.
				[codeblock]
				stepify(100, 32) # Returns 96.0
				stepify(3.14159, 0.01) # Returns 3.14
				[/codeblock]
				See also [method ceil], [method floor], [method round], and [int].
			</description>
		</method>
		<method name="str" qualifiers="vararg">
			<return type="String" />
			<description>
				Converts one or more arguments of any type to string in the best way possible.
				[codeblock]
				var a = [10, 20, 30]
				var b = str(a);
				len(a) # Returns 3
				len(b) # Returns 12
				[/codeblock]
			</description>
		</method>
		<method name="str2var">
			<return type="Variant" />
			<argument index="0" name="string" type="String" />
			<description>
				Converts a formatted string that was returned by [method var2str] to the original value.
				[codeblock]
				a = '{ "a": 1, "b": 2 }'
				b = str2var(a)
				print(b["a"]) # Prints 1
				[/codeblock]
			</description>
		</method>
		<method name="tan">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the tangent of angle [code]s[/code] in radians.
				[codeblock]
				tan(deg2rad(45)) # Returns 1
				[/codeblock]
			</description>
		</method>
		<method name="tanh">
			<return type="float" />
			<argument index="0" name="s" type="float" />
			<description>
				Returns the hyperbolic tangent of [code]s[/code].
				[codeblock]
				a = log(2.0) # a is 0.693147
				b = tanh(a)  # b is 0.6
				[/codeblock]
			</description>
		</method>
		<method name="to_json">
			<return type="String" />
			<argument index="0" name="var" type="Variant" />
			<description>
				Converts a [Variant] [code]var[/code] to JSON text and return the result. Useful for serializing data to store or send over the network.
				[codeblock]
				# Both numbers below are integers.
				a = { "a": 1, "b": 2 }
				b = to_json(a)
				print(b) # {"a":1, "b":2}
				# Both numbers above are floats, even if they display without any decimal places.
				[/codeblock]
				[b]Note:[/b] The JSON specification does not define integer or float types, but only a [i]number[/i] type. Therefore, converting a [Variant] to JSON text will convert all numerical values to [float] types.
				See also [JSON] for an alternative way to convert a [Variant] to JSON text.
			</description>
		</method>
		<method name="type_exists">
			<return type="bool" />
			<argument index="0" name="type" type="String" />
			<description>
				Returns whether the given class exists in [ClassDB].
				[codeblock]
				type_exists("Sprite") # Returns true
				type_exists("Variant") # Returns false
				[/codeblock]
			</description>
		</method>
		<method name="typeof">
			<return type="int" />
			<argument index="0" name="what" type="Variant" />
			<description>
				Returns the internal type of the given Variant object, using the [enum Variant.Type] values.
				[codeblock]
				p = parse_json('["a", "b", "c"]')
				if typeof(p) == TYPE_ARRAY:
				    print(p[0]) # Prints a
				else:
				    print("unexpected results")
				[/codeblock]
			</description>
		</method>
		<method name="validate_json">
			<return type="String" />
			<argument index="0" name="json" type="String" />
			<description>
				Checks that [code]json[/code] is valid JSON data. Returns an empty string if valid, or an error message otherwise.
				[codeblock]
				j = to_json([1, 2, 3])
				v = validate_json(j)
				if not v:
				    print("Valid JSON.")
				else:
				    push_error("Invalid JSON: " + v)
				[/codeblock]
			</description>
		</method>
		<method name="var2bytes">
			<return type="PoolByteArray" />
			<argument index="0" name="var" type="Variant" />
			<argument index="1" name="full_objects" type="bool" default="false" />
			<description>
				Encodes a variable value to a byte array. When [code]full_objects[/code] is [code]true[/code] encoding objects is allowed (and can potentially include code).
			</description>
		</method>
		<method name="var2str">
			<return type="String" />
			<argument index="0" name="var" type="Variant" />
			<description>
				Converts a Variant [code]var[/code] to a formatted string that can later be parsed using [method str2var].
				[codeblock]
				a = { "a": 1, "b": 2 }
				print(var2str(a))
				[/codeblock]
				prints
				[codeblock]
				{
				"a": 1,
				"b": 2
				}
				[/codeblock]
			</description>
		</method>
		<method name="weakref">
			<return type="WeakRef" />
			<argument index="0" name="obj" type="Object" />
			<description>
				Returns a weak reference to an object.
				A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it.
			</description>
		</method>
		<method name="wrapf">
			<return type="float" />
			<argument index="0" name="value" type="float" />
			<argument index="1" name="min" type="float" />
			<argument index="2" name="max" type="float" />
			<description>
				Wraps float [code]value[/code] between [code]min[/code] and [code]max[/code].
				Usable for creating loop-alike behavior or infinite surfaces.
				[codeblock]
				# Infinite loop between 5.0 and 9.9
				value = wrapf(value + 0.1, 5.0, 10.0)
				[/codeblock]
				[codeblock]
				# Infinite rotation (in radians)
				angle = wrapf(angle + 0.1, 0.0, TAU)
				[/codeblock]
				[codeblock]
				# Infinite rotation (in radians)
				angle = wrapf(angle + 0.1, -PI, PI)
				[/codeblock]
				[b]Note:[/b] If [code]min[/code] is [code]0[/code], this is equivalent to [method fposmod], so prefer using that instead.
				[code]wrapf[/code] is more flexible than using the [method fposmod] approach by giving the user control over the minimum value.
			</description>
		</method>
		<method name="wrapi">
			<return type="int" />
			<argument index="0" name="value" type="int" />
			<argument index="1" name="min" type="int" />
			<argument index="2" name="max" type="int" />
			<description>
				Wraps integer [code]value[/code] between [code]min[/code] and [code]max[/code].
				Usable for creating loop-alike behavior or infinite surfaces.
				[codeblock]
				# Infinite loop between 5 and 9
				frame = wrapi(frame + 1, 5, 10)
				[/codeblock]
				[codeblock]
				# result is -2
				var result = wrapi(-6, -5, -1)
				[/codeblock]
				[b]Note:[/b] If [code]min[/code] is [code]0[/code], this is equivalent to [method posmod], so prefer using that instead.
				[code]wrapi[/code] is more flexible than using the [method posmod] approach by giving the user control over the minimum value.
			</description>
		</method>
		<method name="yield">
			<return type="GDScriptFunctionState" />
			<argument index="0" name="object" type="Object" default="null" />
			<argument index="1" name="signal" type="String" default="&quot;&quot;" />
			<description>
				Stops the function execution and returns the current suspended state to the calling function.
				From the caller, call [method GDScriptFunctionState.resume] on the state to resume execution. This invalidates the state. Within the resumed function, [code]yield()[/code] returns whatever was passed to the [code]resume()[/code] function call.
				If passed an object and a signal, the execution is resumed when the object emits the given signal. In this case, [code]yield()[/code] returns the argument passed to [code]emit_signal()[/code] if the signal takes only one argument, or an array containing all the arguments passed to [code]emit_signal()[/code] if the signal takes multiple arguments.
				You can also use [code]yield[/code] to wait for a function to finish:
				[codeblock]
				func _ready():
				    yield(countdown(), "completed") # waiting for the countdown() function to complete
				    print('Ready')

				func countdown():
				    yield(get_tree(), "idle_frame") # returns a GDScriptFunctionState object to _ready()
				    print(3)
				    yield(get_tree().create_timer(1.0), "timeout")
				    print(2)
				    yield(get_tree().create_timer(1.0), "timeout")
				    print(1)
				    yield(get_tree().create_timer(1.0), "timeout")

				# prints:
				# 3
				# 2
				# 1
				# Ready
				[/codeblock]
				When yielding on a function, the [code]completed[/code] signal will be emitted automatically when the function returns. It can, therefore, be used as the [code]signal[/code] parameter of the [code]yield[/code] method to resume.
				In order to yield on a function, the resulting function should also return a [code]GDScriptFunctionState[/code]. Notice [code]yield(get_tree(), "idle_frame")[/code] from the above example.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PI" value="3.141593">
			Constant that represents how many times the diameter of a circle fits around its perimeter. This is equivalent to [code]TAU / 2[/code].
		</constant>
		<constant name="TAU" value="6.283185">
			The circle constant, the circumference of the unit circle in radians. This is equivalent to [code]PI * 2[/code], or 360 degrees in rotations.
		</constant>
		<constant name="INF" value="inf">
			Positive floating-point infinity. This is the result of floating-point division when the divisor is [code]0.0[/code]. For negative infinity, use [code]-INF[/code]. Dividing by [code]-0.0[/code] will result in negative infinity if the numerator is positive, so dividing by [code]0.0[/code] is not the same as dividing by [code]-0.0[/code] (despite [code]0.0 == -0.0[/code] returning [code]true[/code]).
			[b]Note:[/b] Numeric infinity is only a concept with floating-point numbers, and has no equivalent for integers. Dividing an integer number by [code]0[/code] will not result in [constant INF] and will result in a run-time error instead.
		</constant>
		<constant name="NAN" value="nan">
			"Not a Number", an invalid floating-point value. [constant NAN] has special properties, including that it is not equal to itself ([code]NAN == NAN[/code] returns [code]false[/code]). It is output by some invalid operations, such as dividing floating-point [code]0.0[/code] by [code]0.0[/code].
			[b]Note:[/b] "Not a Number" is only a concept with floating-point numbers, and has no equivalent for integers. Dividing an integer [code]0[/code] by [code]0[/code] will not result in [constant NAN] and will result in a run-time error instead.
		</constant>
	</constants>
</class>
