:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/modules/limboai/doc_classes/BTSelector.xml.

.. _class_BTSelector:

BTSelector
==========

**Inherits:** :ref:`BTComposite<class_BTComposite>` **<** :ref:`BTTask<class_BTTask>` **<** :ref:`BT<class_BT>`

BT composite that sequentially executes tasks until first ``SUCCESS``.

.. rst-class:: classref-introduction-group

Description
-----------

BTSelector executes its child tasks sequentially, from first to last, until any child returns ``SUCCESS``. If a child task results in ``FAILURE``, BTSelector will immediately execute the next child task until one of them returns ``SUCCESS`` or all of them result in ``FAILURE``. BTSelector and :ref:`BTSequence<class_BTSequence>` are two of the most common building blocks of behavior trees. Essentially, while :ref:`BTSequence<class_BTSequence>` is similar to a boolean AND operation, BTSelector is similar to a boolean OR operation. Selectors enable the behavior tree to respond to changes in the environment and trigger transitions between various fallback behaviors.

Returns ``RUNNING`` if a child task results in ``RUNNING``. BTSelector will remember the last child task that returned ``RUNNING``, ensuring it resumes from that point in the next execution tick.

Returns ``SUCCESS`` if a child task results in ``SUCCESS``.

Returns ``FAILURE`` if all child tasks result in ``FAILURE``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
