:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/modules/limboai/doc_classes/BTDecorator.xml.

.. _class_BTDecorator:

BTDecorator
===========

**Inherits:** :ref:`BTTask<class_BTTask>` **<** :ref:`BT<class_BT>`

**Inherited By:** :ref:`BTAlwaysFail<class_BTAlwaysFail>`, :ref:`BTAlwaysSucceed<class_BTAlwaysSucceed>`, :ref:`BTCooldown<class_BTCooldown>`, :ref:`BTDelay<class_BTDelay>`, :ref:`BTForEach<class_BTForEach>`, :ref:`BTInvert<class_BTInvert>`, :ref:`BTNewScope<class_BTNewScope>`, :ref:`BTProbability<class_BTProbability>`, :ref:`BTRepeat<class_BTRepeat>`, :ref:`BTRepeatUntilFailure<class_BTRepeatUntilFailure>`, :ref:`BTRepeatUntilSuccess<class_BTRepeatUntilSuccess>`, :ref:`BTRunLimit<class_BTRunLimit>`, :ref:`BTTimeLimit<class_BTTimeLimit>`

Base class for BT decorators.

.. rst-class:: classref-introduction-group

Description
-----------

Base class for all :ref:`BehaviorTree<class_BehaviorTree>` decorators. You can create your own decorators by extending the BTDecorator class.

A decorator is a task within a :ref:`BehaviorTree<class_BehaviorTree>` that alters the behavior of its child task. Decorators can have only one child task.

Decorators can be used to add conditions, limits, or other constraints to the execution of a task. Examples of :ref:`BehaviorTree<class_BehaviorTree>` decorators include :ref:`BTInvert<class_BTInvert>`, :ref:`BTRepeat<class_BTRepeat>`, and :ref:`BTCooldown<class_BTCooldown>`. The use of :ref:`BehaviorTree<class_BehaviorTree>` decorators can simplify the design and implementation of complex behaviors by adding additional logic to existing tasks.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
