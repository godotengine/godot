:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/modules/limboai/doc_classes/BTComposite.xml.

.. _class_BTComposite:

BTComposite
===========

**Inherits:** :ref:`BTTask<class_BTTask>` **<** :ref:`BT<class_BT>`

**Inherited By:** :ref:`BTDynamicSelector<class_BTDynamicSelector>`, :ref:`BTDynamicSequence<class_BTDynamicSequence>`, :ref:`BTParallel<class_BTParallel>`, :ref:`BTProbabilitySelector<class_BTProbabilitySelector>`, :ref:`BTRandomSelector<class_BTRandomSelector>`, :ref:`BTRandomSequence<class_BTRandomSequence>`, :ref:`BTSelector<class_BTSelector>`, :ref:`BTSequence<class_BTSequence>`

Base class for BT composite tasks.

.. rst-class:: classref-introduction-group

Description
-----------

Base class for all :ref:`BehaviorTree<class_BehaviorTree>` composite tasks. You can create your own composite tasks by extending the BTComposite class.

Composite is a control task within a :ref:`BehaviorTree<class_BehaviorTree>` that contains one or more child tasks. It defines the structure and flow of the :ref:`BehaviorTree<class_BehaviorTree>` by specifying how child tasks are executed. Composites can be used to group related tasks into a single unit, making it easier to manage and maintain the :ref:`BehaviorTree<class_BehaviorTree>`. Examples of :ref:`BehaviorTree<class_BehaviorTree>` composites include :ref:`BTSelector<class_BTSelector>`, :ref:`BTSequence<class_BTSequence>`, and :ref:`BTParallel<class_BTParallel>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
