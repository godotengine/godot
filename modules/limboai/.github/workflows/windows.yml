name: ðŸªŸ Windows builds
on:
  workflow_call:
    inputs:
      godot-ref:
        description: A tag, branch or commit hash in the Godot repository.
        type: string
        default: master
      limboai-ref:
        description: A tag, branch or commit hash in the LimboAI repository.
        type: string
        default: master
      test-build:
        description: Should we perform only a limited number of test builds?
        type: boolean
        default: false

  workflow_dispatch:
    inputs:
      godot-ref:
        description: A tag, branch or commit hash in the Godot repository.
        type: string
        default: master
      limboai-ref:
        description: A tag, branch or commit hash in the LimboAI repository.
        type: string
        default: master
      test-build:
        description: Should we perform only a limited number of test builds?
        type: boolean
        default: false

# Global Settings
env:
  SCONS_CACHE_MSVC_CONFIG: true
  SCONS_CACHE_LIMIT: 4096
  SCONSFLAGS: production=yes tests=no verbose=yes warnings=extra werror=yes
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  windows-builds:
    runs-on: "windows-latest"
    name: ${{ matrix.opts.name }}
    strategy:
      fail-fast: false
      matrix:
        opts:
          # * Standard x86_64

          - name: Editor (x86_64, release)
            target: editor
            arch: x86_64
            dotnet: false
            should-build: true

          - name: Template (x86_64, release)
            target: template_release
            arch: x86_64
            dotnet: false
            should-build: ${{ !inputs.test-build }}

          - name: Template (x86_64, debug)
            target: template_debug
            arch: x86_64
            dotnet: false
            should-build: ${{ !inputs.test-build }}

          # * Standard x86_32

          # - name: Editor (x86_32, release)
          #   target: editor
          #   arch: x86_32
          #   dotnet: false
          # should-build: ${{ !inputs.test-build }}

          - name: Template (x86_32, release)
            target: template_release
            arch: x86_32
            dotnet: false
            should-build: ${{ !inputs.test-build }}

          - name: Template (x86_32, debug)
            target: template_debug
            arch: x86_32
            dotnet: false
            should-build: ${{ !inputs.test-build }}

          # * Standard arm64

          # - name: Editor (arm64, release)
          #   target: editor
          #   arch: arm64
          #   dotnet: false
          #   should-build: ${{ !inputs.test-build }}

          - name: Template (arm64, release)
            target: template_release
            arch: arm64
            dotnet: false
            should-build: ${{ !inputs.test-build }}

          - name: Template (arm64, debug)
            target: template_debug
            arch: arm64
            dotnet: false
            should-build: ${{ !inputs.test-build }}

          # * .NET x86_64

          - name: Editor .NET (x86_64, release)
            target: editor
            arch: x86_64
            dotnet: true
            should-build: ${{ !inputs.test-build }}

          - name: Template .NET (x86_64, release)
            target: template_release
            arch: x86_64
            dotnet: true
            should-build: ${{ !inputs.test-build }}

          - name: Template .NET (x86_64, debug)
            target: template_debug
            arch: x86_64
            dotnet: true
            should-build: ${{ !inputs.test-build }}

          # * .NET x86_32

          # - name: Editor .NET (x86_32, release)
          #   target: editor
          #   arch: x86_32
          #   dotnet: true
          # should-build: ${{ !inputs.test-build }}

          - name: Template .NET (x86_32, release)
            target: template_release
            arch: x86_32
            dotnet: true
            should-build: ${{ !inputs.test-build }}

          - name: Template .NET (x86_32, debug)
            target: template_debug
            arch: x86_32
            dotnet: true
            should-build: ${{ !inputs.test-build }}

            # * .NET arm64

          # - name: Editor (arm64, release)
          #   target: editor
          #   arch: arm64
          #   dotnet: true
          #   should-build: ${{ !inputs.test-build }}

          - name: Template (arm64, release)
            target: template_release
            arch: arm64
            dotnet: true
            should-build: ${{ !inputs.test-build }}

          - name: Template (arm64, debug)
            target: template_debug
            arch: arm64
            dotnet: true
            should-build: ${{ !inputs.test-build }}

        exclude:
          - { opts: { should-build: false } }

    env:
      BIN: godot.windows.${{matrix.opts.target}}.${{matrix.opts.arch}}${{  matrix.opts.dotnet == true && '.mono' || ''  }}

    steps:
      - name: Clone Godot
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ inputs.godot-ref }}

      - name: Clone LimboAI module
        uses: actions/checkout@v4
        with:
          path: modules/limboai
          ref: ${{ inputs.limboai-ref }}

      # Inits GODOT_VERSION, LIMBOAI_VERSION and NAME_PREFIX environment variables.
      - uses: ./modules/limboai/.github/actions/init-version

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          architecture: "x64"

      - name: Set up scons
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons==4.4.0
          python --version
          scons --version

      - name: Set up MSVC problem matcher
        uses: ammaraskar/msvc-problem-matcher@master

      - name: Set up scons cache
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{env.BIN}}-${{inputs.godot-ref}}-${{inputs.limboai-ref}}-${{env.LIMBOAI_VERSION}}
          restore-keys: |
            ${{env.BIN}}-${{inputs.godot-ref}}-${{inputs.limboai-ref}}-${{env.LIMBOAI_VERSION}}
            ${{env.BIN}}-${{inputs.godot-ref}}-${{inputs.limboai-ref}}
            ${{env.BIN}}-${{inputs.godot-ref}}

      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 platform=windows target=${{matrix.opts.target}} arch=${{matrix.opts.arch}} module_mono_enabled=${{matrix.opts.dotnet}} ${{env.SCONSFLAGS}}

      - name: Generate C# glue
        if: matrix.opts.dotnet && matrix.opts.target == 'editor'
        shell: bash
        run: |
          GODOT_VERSION_STATUS=$(echo "${GODOT_VERSION_STATUS}" | sed "s|+|-|")
          echo "GODOT_VERSION_STATUS: ${GODOT_VERSION_STATUS}"
          ./bin/${{ env.BIN }} --headless --generate-mono-glue ./modules/mono/glue || true

      - name: Build .NET solutions
        if: matrix.opts.dotnet && matrix.opts.target == 'editor'
        shell: bash
        run: |
          GODOT_VERSION_STATUS=$(echo "${GODOT_VERSION_STATUS}" | sed "s|+|-|")
          echo "GODOT_VERSION_STATUS: ${GODOT_VERSION_STATUS}"
          python ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=windows

      - name: Prepare artifact
        shell: bash
        env:
          OUTDIR: ${{ startsWith(matrix.opts.target, 'template') && 'out/templates' || 'out/' }}
        run: |
          rm -f bin/*.{exp,lib,pdb}
          mkdir -p ${{env.OUTDIR}}
          mv bin/* ${{env.OUTDIR}}
          ls -R out/

      - name: Rename templates
        if: startsWith(matrix.opts.target, 'template')
        shell: bash
        env:
          BUILD_TYPE: ${{ endsWith(matrix.opts.target, 'release') && 'release' || 'debug' }}
        run: |
          mv out/templates/${BIN}.exe out/templates/windows_${BUILD_TYPE}_${{matrix.opts.arch}}.exe
          mv out/templates/${BIN}.console.exe out/templates/windows_${BUILD_TYPE}_${{matrix.opts.arch}}_console.exe
          echo "${GODOT_VERSION}.limboai+${LIMBOAI_VERSION}" > out/templates/version.txt
          ls -R out/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.NAME_PREFIX}}${{matrix.opts.dotnet == true && '.dotnet' || ''}}.${{matrix.opts.target}}.windows.${{matrix.opts.arch}}
          path: out/*
