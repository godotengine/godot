#!/usr/bin/env python

Import("env")
Import("env_modules")

env_openxr = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

# Khronos OpenXR loader

# Needs even for build against shared library, at least the defines used in public headers.
if env["platform"] == "android":
    # may need to set OPENXR_ANDROID_VERSION_SUFFIX
    env_openxr.AppendUnique(CPPDEFINES=["XR_OS_ANDROID", "XR_USE_PLATFORM_ANDROID"])
    env_openxr.AppendUnique(CPPDEFINES=["JSON_USE_EXCEPTION=0"])

    # may need to include java parts of the openxr loader
elif env["platform"] == "linuxbsd":
    env_openxr.AppendUnique(CPPDEFINES=["XR_OS_LINUX"])

    if env["x11"]:
        env_openxr.AppendUnique(CPPDEFINES=["XR_USE_PLATFORM_XLIB"])

    if env["wayland"]:
        env_openxr.AppendUnique(CPPDEFINES=["XR_USE_PLATFORM_WAYLAND"])

    # FIXME: Review what needs to be set for Android and macOS.
    env_openxr.AppendUnique(CPPDEFINES=["HAVE_SECURE_GETENV"])
elif env["platform"] == "windows":
    env_openxr.AppendUnique(CPPDEFINES=["XR_OS_WINDOWS", "NOMINMAX", "XR_USE_PLATFORM_WIN32"])
elif env["platform"] == "macos":
    env_openxr.AppendUnique(CPPDEFINES=["XR_OS_APPLE"])

    # There does not seem to be a XR_USE_PLATFORM_XYZ for Apple


# may need to check and set:
# - XR_USE_TIMESPEC

if env["builtin_openxr"]:
    thirdparty_dir = "#thirdparty/openxr"

    env_openxr.Prepend(
        CPPPATH=[
            thirdparty_dir,
            thirdparty_dir + "/include",
            thirdparty_dir + "/src",
            thirdparty_dir + "/src/common",
            thirdparty_dir + "/src/external/jsoncpp/include",
        ]
    )

    env_thirdparty = env_openxr.Clone()
    env_thirdparty.disable_warnings()

    env_thirdparty.AppendUnique(CPPDEFINES=["DISABLE_STD_FILESYSTEM"])
    if env["disable_exceptions"]:
        env_thirdparty.AppendUnique(CPPDEFINES=["XRLOADER_DISABLE_EXCEPTION_HANDLING", ("JSON_USE_EXCEPTION", 0)])

    env_thirdparty.Append(CPPPATH=[thirdparty_dir + "/src/loader"])

    # add in external jsoncpp dependency
    thirdparty_jsoncpp_dir = thirdparty_dir + "/src/external/jsoncpp/src/lib_json/"
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_jsoncpp_dir + "json_reader.cpp")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_jsoncpp_dir + "json_value.cpp")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_jsoncpp_dir + "json_writer.cpp")

    # add in load
    if env["platform"] != "android":
        # On Android the openxr_loader is provided by separate plugins for each device
        # Build the engine using object files
        khrloader_obj = []
        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/xr_generated_dispatch_table_core.c")

        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/common/filesystem_utils.cpp")
        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/common/object_info.cpp")

        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/loader/api_layer_interface.cpp")
        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/loader/loader_core.cpp")
        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/loader/loader_instance.cpp")
        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/loader/loader_logger_recorders.cpp")
        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/loader/loader_logger.cpp")
        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/loader/manifest_file.cpp")
        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/loader/runtime_interface.cpp")
        env_thirdparty.add_source_files(khrloader_obj, thirdparty_dir + "/src/loader/xr_generated_loader.cpp")
        env.modules_sources += khrloader_obj

    env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []

env_openxr.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

Export("env_openxr")

SConscript("action_map/SCsub")
SConscript("extensions/SCsub")
SConscript("scene/SCsub")

if env.editor_build:
    SConscript("editor/SCsub")

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
