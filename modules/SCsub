#!/usr/bin/env python
from misc.utility.scons_hints import *

import os

import modules_builders

Import("env")

env_modules = env.Clone()

# Allow modules to detect if they are being built as a module.
env_modules.Append(CPPDEFINES=["GODOT_MODULE"])

Export("env_modules")


# Header with MODULE_*_ENABLED defines.
modules_enabled = env.CommandNoCache(
    "modules_enabled.gen.h", env.Value(env.module_list), env.Run(modules_builders.modules_enabled_builder)
)


register_module_types = env.CommandNoCache(
    "register_module_types.gen.cpp",
    [env.Value(env.modules_detected), modules_enabled],
    env.Run(modules_builders.register_module_types_builder),
)

all_module_sources = []
env_modules.add_source_files(all_module_sources, register_module_types)

test_headers = []
# libmodule_<name>.a for each active module.
for name, path in env.module_list.items():
    env.modules_sources = []

    # Name for built-in modules, (absolute) path for custom ones.
    base_path = path if os.path.isabs(path) else name
    SConscript(base_path + "/SCsub")

    all_module_sources.extend(env.modules_sources)

    if env["tests"]:
        # Lookup potential headers in `tests` subfolder.
        import glob

        module_tests = sorted(glob.glob(os.path.join(base_path, "tests", "*.h")))
        if module_tests != []:
            test_headers += module_tests


# Generate header to be included in `tests/test_main.cpp` to run module-specific tests.
if env["tests"]:
    env.CommandNoCache("modules_tests.gen.h", test_headers, env.Run(modules_builders.modules_tests_builder))

env.modules_sources = all_module_sources
