#!/usr/bin/env python

import modules_builders
import os

Import("env")

env_modules = env.Clone()

# Allow modules to detect if they are being built as a module.
env_modules.Append(CPPDEFINES=["GODOT_MODULE"])

Export("env_modules")

# Header with MODULE_*_ENABLED defines.
env.Depends("modules_enabled.gen.h", Value(env.module_list))
env.CommandNoCache(
    "modules_enabled.gen.h",
    Value(env.module_list),
    env.Run(modules_builders.generate_modules_enabled),
)


vs_sources = []
test_headers = []
# libmodule_<name>.a for each active module.
for name, path in env.module_list.items():
    env.modules_sources = []

    # Name for built-in modules, (absolute) path for custom ones.
    base_path = path if os.path.isabs(path) else name
    SConscript(base_path + "/SCsub")

    lib = env_modules.add_library("module_%s" % name, env.modules_sources)
    env.Prepend(LIBS=[lib])
    if env["vsproj"]:
        vs_sources += env.modules_sources

    if env["tests"]:
        # Lookup potential headers in `tests` subfolder.
        import glob

        module_tests = sorted(glob.glob(os.path.join(base_path, "tests", "*.h")))
        if module_tests != []:
            test_headers += module_tests


# Generate header to be included in `tests/test_main.cpp` to run module-specific tests.
if env["tests"]:
    env.Depends("modules_tests.gen.h", test_headers)
    env.CommandNoCache(
        "modules_tests.gen.h",
        test_headers,
        env.Run(modules_builders.generate_modules_tests),
    )

# libmodules.a with only register_module_types.
# Must be last so that all libmodule_<name>.a libraries are on the right side
# in the linker command.
env.modules_sources = []
env_modules.add_source_files(env.modules_sources, "register_module_types.gen.cpp")
lib = env_modules.add_library("modules", env.modules_sources)
env.Prepend(LIBS=[lib])
if env["vsproj"]:
    env.modules_sources += vs_sources
