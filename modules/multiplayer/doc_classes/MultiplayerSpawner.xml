<?xml version="1.0" encoding="UTF-8" ?>
<class name="MultiplayerSpawner" inherits="Node" keywords="network" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Automatically replicates spawnable nodes from the authority to other multiplayer peers.
	</brief_description>
	<description>
		Spawnable scenes can be configured in the editor or through code (see [method add_spawnable_scene]).
		Also supports custom node spawns through [method spawn], calling [member spawn_function] on all peers.
		Internally, [MultiplayerSpawner] uses [method MultiplayerAPI.object_configuration_add] to notify spawns passing the spawned node as the [code]object[/code] and itself as the [code]configuration[/code], and [method MultiplayerAPI.object_configuration_remove] to notify despawns in a similar way.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_spawnable_scene">
			<return type="void" />
			<param index="0" name="path" type="String" />
			<description>
				Adds a scene path to spawnable scenes, making it automatically replicated from the multiplayer authority to other peers when added as children of the node pointed by [member spawn_path].
			</description>
		</method>
		<method name="clear_spawnable_scenes">
			<return type="void" />
			<description>
				Clears all spawnable scenes. Does not despawn existing instances on remote peers.
			</description>
		</method>
		<method name="get_spawnable_scene" qualifiers="const">
			<return type="String" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the spawnable scene path by index.
			</description>
		</method>
		<method name="get_spawnable_scene_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the count of spawnable scene paths.
			</description>
		</method>
		<method name="spawn">
			<return type="Node" />
			<param index="0" name="data" type="Variant" default="null" />
			<description>
				Requests a custom spawn, with [param data] passed to [member spawn_function] on all peers. Returns the locally spawned node instance already inside the scene tree, and added as a child of the node pointed by [member spawn_path].
				[b]Note:[/b] Spawnable scenes are spawned automatically. [method spawn] is only needed for custom spawns.
			</description>
		</method>
	</methods>
	<members>
		<member name="spawn_function" type="Callable" setter="set_spawn_function" getter="get_spawn_function">
			Method called on all peers when for every custom [method spawn] requested by the authority. Will receive the [code]data[/code] parameter, and should return a [Node] that is not in the scene tree.
			[b]Note:[/b] The returned node should [b]not[/b] be added to the scene with [method Node.add_child]. This is done automatically.
		</member>
		<member name="spawn_limit" type="int" setter="set_spawn_limit" getter="get_spawn_limit" default="0">
			Maximum nodes that is allowed to be spawned by this spawner. Includes both spawnable scenes and custom spawns.
			When set to [code]0[/code] (the default), there is no limit.
		</member>
		<member name="spawn_path" type="NodePath" setter="set_spawn_path" getter="get_spawn_path" default="NodePath(&quot;&quot;)">
			Path to the spawn root. Spawnable scenes that are added as direct children are replicated to other peers.
		</member>
	</members>
	<signals>
		<signal name="despawned">
			<param index="0" name="node" type="Node" />
			<description>
				Emitted when a spawnable scene or custom spawn was despawned by the multiplayer authority. Only called on puppets.
			</description>
		</signal>
		<signal name="spawned">
			<param index="0" name="node" type="Node" />
			<description>
				Emitted when a spawnable scene or custom spawn was spawned by the multiplayer authority. Only called on puppets.
			</description>
		</signal>
	</signals>
</class>
